#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CooperativeSystem.Service.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="csdb_prod")]
	public partial class CooperativeSystemModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSavingsDepositInterestRate(SavingsDepositInterestRate instance);
    partial void UpdateSavingsDepositInterestRate(SavingsDepositInterestRate instance);
    partial void DeleteSavingsDepositInterestRate(SavingsDepositInterestRate instance);
    partial void InsertDTIMEDPLoanServiceRate(DTIMEDPLoanServiceRate instance);
    partial void UpdateDTIMEDPLoanServiceRate(DTIMEDPLoanServiceRate instance);
    partial void DeleteDTIMEDPLoanServiceRate(DTIMEDPLoanServiceRate instance);
    partial void InsertDividendPatronageRatio(DividendPatronageRatio instance);
    partial void UpdateDividendPatronageRatio(DividendPatronageRatio instance);
    partial void DeleteDividendPatronageRatio(DividendPatronageRatio instance);
    partial void InsertTimeDepositInterestRate(TimeDepositInterestRate instance);
    partial void UpdateTimeDepositInterestRate(TimeDepositInterestRate instance);
    partial void DeleteTimeDepositInterestRate(TimeDepositInterestRate instance);
    partial void InsertAvailedService(AvailedService instance);
    partial void UpdateAvailedService(AvailedService instance);
    partial void DeleteAvailedService(AvailedService instance);
    partial void InsertDependent(Dependent instance);
    partial void UpdateDependent(Dependent instance);
    partial void DeleteDependent(Dependent instance);
    partial void InsertRelation(Relation instance);
    partial void UpdateRelation(Relation instance);
    partial void DeleteRelation(Relation instance);
    partial void InsertMembershipCategory(MembershipCategory instance);
    partial void UpdateMembershipCategory(MembershipCategory instance);
    partial void DeleteMembershipCategory(MembershipCategory instance);
    partial void InsertMaritalStatus(MaritalStatus instance);
    partial void UpdateMaritalStatus(MaritalStatus instance);
    partial void DeleteMaritalStatus(MaritalStatus instance);
    partial void InsertAccountStatus(AccountStatus instance);
    partial void UpdateAccountStatus(AccountStatus instance);
    partial void DeleteAccountStatus(AccountStatus instance);
    partial void InsertMembershipCategoryService(MembershipCategoryService instance);
    partial void UpdateMembershipCategoryService(MembershipCategoryService instance);
    partial void DeleteMembershipCategoryService(MembershipCategoryService instance);
    partial void InsertServiceCategory(ServiceCategory instance);
    partial void UpdateServiceCategory(ServiceCategory instance);
    partial void DeleteServiceCategory(ServiceCategory instance);
    partial void InsertCapitalShare(CapitalShare instance);
    partial void UpdateCapitalShare(CapitalShare instance);
    partial void DeleteCapitalShare(CapitalShare instance);
    partial void InsertCapitalShareDisbursement(CapitalShareDisbursement instance);
    partial void UpdateCapitalShareDisbursement(CapitalShareDisbursement instance);
    partial void DeleteCapitalShareDisbursement(CapitalShareDisbursement instance);
    partial void InsertCapitalShareReceipt(CapitalShareReceipt instance);
    partial void UpdateCapitalShareReceipt(CapitalShareReceipt instance);
    partial void DeleteCapitalShareReceipt(CapitalShareReceipt instance);
    partial void InsertSavingsDeposit(SavingsDeposit instance);
    partial void UpdateSavingsDeposit(SavingsDeposit instance);
    partial void DeleteSavingsDeposit(SavingsDeposit instance);
    partial void InsertSavingsDepositDisbursement(SavingsDepositDisbursement instance);
    partial void UpdateSavingsDepositDisbursement(SavingsDepositDisbursement instance);
    partial void DeleteSavingsDepositDisbursement(SavingsDepositDisbursement instance);
    partial void InsertSavingsDepositReceipt(SavingsDepositReceipt instance);
    partial void UpdateSavingsDepositReceipt(SavingsDepositReceipt instance);
    partial void DeleteSavingsDepositReceipt(SavingsDepositReceipt instance);
    partial void InsertMembershipFeeReceipt(MembershipFeeReceipt instance);
    partial void UpdateMembershipFeeReceipt(MembershipFeeReceipt instance);
    partial void DeleteMembershipFeeReceipt(MembershipFeeReceipt instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserCategory(UserCategory instance);
    partial void UpdateUserCategory(UserCategory instance);
    partial void DeleteUserCategory(UserCategory instance);
    partial void InsertSexType(SexType instance);
    partial void UpdateSexType(SexType instance);
    partial void DeleteSexType(SexType instance);
    partial void InsertLoanDeductionType(LoanDeductionType instance);
    partial void UpdateLoanDeductionType(LoanDeductionType instance);
    partial void DeleteLoanDeductionType(LoanDeductionType instance);
    partial void InsertLoanCollectionFeeRate(LoanCollectionFeeRate instance);
    partial void UpdateLoanCollectionFeeRate(LoanCollectionFeeRate instance);
    partial void DeleteLoanCollectionFeeRate(LoanCollectionFeeRate instance);
    partial void InsertLoanGuaranteeFundRate(LoanGuaranteeFundRate instance);
    partial void UpdateLoanGuaranteeFundRate(LoanGuaranteeFundRate instance);
    partial void DeleteLoanGuaranteeFundRate(LoanGuaranteeFundRate instance);
    partial void InsertLoanInterestRate(LoanInterestRate instance);
    partial void UpdateLoanInterestRate(LoanInterestRate instance);
    partial void DeleteLoanInterestRate(LoanInterestRate instance);
    partial void InsertLoanServiceFeeRate(LoanServiceFeeRate instance);
    partial void UpdateLoanServiceFeeRate(LoanServiceFeeRate instance);
    partial void DeleteLoanServiceFeeRate(LoanServiceFeeRate instance);
    partial void InsertApplianceLoanServiceRate(ApplianceLoanServiceRate instance);
    partial void UpdateApplianceLoanServiceRate(ApplianceLoanServiceRate instance);
    partial void DeleteApplianceLoanServiceRate(ApplianceLoanServiceRate instance);
    partial void InsertEasyLoanServiceRate(EasyLoanServiceRate instance);
    partial void UpdateEasyLoanServiceRate(EasyLoanServiceRate instance);
    partial void DeleteEasyLoanServiceRate(EasyLoanServiceRate instance);
    partial void InsertEmergencyLoanServiceRate(EmergencyLoanServiceRate instance);
    partial void UpdateEmergencyLoanServiceRate(EmergencyLoanServiceRate instance);
    partial void DeleteEmergencyLoanServiceRate(EmergencyLoanServiceRate instance);
    partial void InsertTimeDepositMinimumAmount(TimeDepositMinimumAmount instance);
    partial void UpdateTimeDepositMinimumAmount(TimeDepositMinimumAmount instance);
    partial void DeleteTimeDepositMinimumAmount(TimeDepositMinimumAmount instance);
    partial void InsertSavingsDepositMaintainingBalance(SavingsDepositMaintainingBalance instance);
    partial void UpdateSavingsDepositMaintainingBalance(SavingsDepositMaintainingBalance instance);
    partial void DeleteSavingsDepositMaintainingBalance(SavingsDepositMaintainingBalance instance);
    partial void InsertCapitalShareMinimumAmount(CapitalShareMinimumAmount instance);
    partial void UpdateCapitalShareMinimumAmount(CapitalShareMinimumAmount instance);
    partial void DeleteCapitalShareMinimumAmount(CapitalShareMinimumAmount instance);
    partial void InsertLoanCapitalBuildupRate(LoanCapitalBuildupRate instance);
    partial void UpdateLoanCapitalBuildupRate(LoanCapitalBuildupRate instance);
    partial void DeleteLoanCapitalBuildupRate(LoanCapitalBuildupRate instance);
    partial void InsertPensionPlanAvailOption(PensionPlanAvailOption instance);
    partial void UpdatePensionPlanAvailOption(PensionPlanAvailOption instance);
    partial void DeletePensionPlanAvailOption(PensionPlanAvailOption instance);
    partial void InsertSavingsDepositInterestAdjustment(SavingsDepositInterestAdjustment instance);
    partial void UpdateSavingsDepositInterestAdjustment(SavingsDepositInterestAdjustment instance);
    partial void DeleteSavingsDepositInterestAdjustment(SavingsDepositInterestAdjustment instance);
    partial void InsertNetSurplus(NetSurplus instance);
    partial void UpdateNetSurplus(NetSurplus instance);
    partial void DeleteNetSurplus(NetSurplus instance);
    partial void InsertQuarter(Quarter instance);
    partial void UpdateQuarter(Quarter instance);
    partial void DeleteQuarter(Quarter instance);
    partial void InsertMonth(Month instance);
    partial void UpdateMonth(Month instance);
    partial void DeleteMonth(Month instance);
    partial void InsertOtherReceipt(OtherReceipt instance);
    partial void UpdateOtherReceipt(OtherReceipt instance);
    partial void DeleteOtherReceipt(OtherReceipt instance);
    partial void InsertMiscellaneousIncomeReceipt(MiscellaneousIncomeReceipt instance);
    partial void UpdateMiscellaneousIncomeReceipt(MiscellaneousIncomeReceipt instance);
    partial void DeleteMiscellaneousIncomeReceipt(MiscellaneousIncomeReceipt instance);
    partial void InsertOtherDisbursement(OtherDisbursement instance);
    partial void UpdateOtherDisbursement(OtherDisbursement instance);
    partial void DeleteOtherDisbursement(OtherDisbursement instance);
    partial void InsertMiscellaneousIncomeDisbursement(MiscellaneousIncomeDisbursement instance);
    partial void UpdateMiscellaneousIncomeDisbursement(MiscellaneousIncomeDisbursement instance);
    partial void DeleteMiscellaneousIncomeDisbursement(MiscellaneousIncomeDisbursement instance);
    partial void InsertCashDisbursement(CashDisbursement instance);
    partial void UpdateCashDisbursement(CashDisbursement instance);
    partial void DeleteCashDisbursement(CashDisbursement instance);
    partial void InsertCashReceipt(CashReceipt instance);
    partial void UpdateCashReceipt(CashReceipt instance);
    partial void DeleteCashReceipt(CashReceipt instance);
    partial void InsertLoanReceipt(LoanReceipt instance);
    partial void UpdateLoanReceipt(LoanReceipt instance);
    partial void DeleteLoanReceipt(LoanReceipt instance);
    partial void InsertLoanDisbursement(LoanDisbursement instance);
    partial void UpdateLoanDisbursement(LoanDisbursement instance);
    partial void DeleteLoanDisbursement(LoanDisbursement instance);
    partial void InsertQuarterlyInterestComputation(QuarterlyInterestComputation instance);
    partial void UpdateQuarterlyInterestComputation(QuarterlyInterestComputation instance);
    partial void DeleteQuarterlyInterestComputation(QuarterlyInterestComputation instance);
    partial void InsertAverageMonthlyBalance(AverageMonthlyBalance instance);
    partial void UpdateAverageMonthlyBalance(AverageMonthlyBalance instance);
    partial void DeleteAverageMonthlyBalance(AverageMonthlyBalance instance);
    partial void InsertDividendShareItem(DividendShareItem instance);
    partial void UpdateDividendShareItem(DividendShareItem instance);
    partial void DeleteDividendShareItem(DividendShareItem instance);
    partial void InsertPatronageComputation(PatronageComputation instance);
    partial void UpdatePatronageComputation(PatronageComputation instance);
    partial void DeletePatronageComputation(PatronageComputation instance);
    partial void InsertPatronageItem(PatronageItem instance);
    partial void UpdatePatronageItem(PatronageItem instance);
    partial void DeletePatronageItem(PatronageItem instance);
    partial void InsertCapitalShareDividendAdjustment(CapitalShareDividendAdjustment instance);
    partial void UpdateCapitalShareDividendAdjustment(CapitalShareDividendAdjustment instance);
    partial void DeleteCapitalShareDividendAdjustment(CapitalShareDividendAdjustment instance);
    partial void InsertCapitalSharePatronageRefundAdjustment(CapitalSharePatronageRefundAdjustment instance);
    partial void UpdateCapitalSharePatronageRefundAdjustment(CapitalSharePatronageRefundAdjustment instance);
    partial void DeleteCapitalSharePatronageRefundAdjustment(CapitalSharePatronageRefundAdjustment instance);
    partial void InsertLoanDividendAdjustment(LoanDividendAdjustment instance);
    partial void UpdateLoanDividendAdjustment(LoanDividendAdjustment instance);
    partial void DeleteLoanDividendAdjustment(LoanDividendAdjustment instance);
    partial void InsertSavingsDepositDividendAdjustment(SavingsDepositDividendAdjustment instance);
    partial void UpdateSavingsDepositDividendAdjustment(SavingsDepositDividendAdjustment instance);
    partial void DeleteSavingsDepositDividendAdjustment(SavingsDepositDividendAdjustment instance);
    partial void InsertYearlyDividend(YearlyDividend instance);
    partial void UpdateYearlyDividend(YearlyDividend instance);
    partial void DeleteYearlyDividend(YearlyDividend instance);
    partial void InsertYearlyPatronage(YearlyPatronage instance);
    partial void UpdateYearlyPatronage(YearlyPatronage instance);
    partial void DeleteYearlyPatronage(YearlyPatronage instance);
    partial void InsertQuarterlyInterest(QuarterlyInterest instance);
    partial void UpdateQuarterlyInterest(QuarterlyInterest instance);
    partial void DeleteQuarterlyInterest(QuarterlyInterest instance);
    partial void InsertCapitalShareInterestRebateAdjustment(CapitalShareInterestRebateAdjustment instance);
    partial void UpdateCapitalShareInterestRebateAdjustment(CapitalShareInterestRebateAdjustment instance);
    partial void DeleteCapitalShareInterestRebateAdjustment(CapitalShareInterestRebateAdjustment instance);
    partial void InsertDeathAidFundType(DeathAidFundType instance);
    partial void UpdateDeathAidFundType(DeathAidFundType instance);
    partial void DeleteDeathAidFundType(DeathAidFundType instance);
    partial void InsertDeathAidFundSetting(DeathAidFundSetting instance);
    partial void UpdateDeathAidFundSetting(DeathAidFundSetting instance);
    partial void DeleteDeathAidFundSetting(DeathAidFundSetting instance);
    partial void InsertTulunganFundSetting(TulunganFundSetting instance);
    partial void UpdateTulunganFundSetting(TulunganFundSetting instance);
    partial void DeleteTulunganFundSetting(TulunganFundSetting instance);
    partial void InsertCollegeInsurancePlanSetting(CollegeInsurancePlanSetting instance);
    partial void UpdateCollegeInsurancePlanSetting(CollegeInsurancePlanSetting instance);
    partial void DeleteCollegeInsurancePlanSetting(CollegeInsurancePlanSetting instance);
    partial void InsertPaymentMode(PaymentMode instance);
    partial void UpdatePaymentMode(PaymentMode instance);
    partial void DeletePaymentMode(PaymentMode instance);
    partial void InsertServicePaymentMode(ServicePaymentMode instance);
    partial void UpdateServicePaymentMode(ServicePaymentMode instance);
    partial void DeleteServicePaymentMode(ServicePaymentMode instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertPensionPlanSetting(PensionPlanSetting instance);
    partial void UpdatePensionPlanSetting(PensionPlanSetting instance);
    partial void DeletePensionPlanSetting(PensionPlanSetting instance);
    partial void InsertCapitalShareBuildup(CapitalShareBuildup instance);
    partial void UpdateCapitalShareBuildup(CapitalShareBuildup instance);
    partial void DeleteCapitalShareBuildup(CapitalShareBuildup instance);
    partial void InsertLoanSetting(LoanSetting instance);
    partial void UpdateLoanSetting(LoanSetting instance);
    partial void DeleteLoanSetting(LoanSetting instance);
    partial void InsertLoanAdjustment(LoanAdjustment instance);
    partial void UpdateLoanAdjustment(LoanAdjustment instance);
    partial void DeleteLoanAdjustment(LoanAdjustment instance);
    partial void InsertCollegeInsurancePlan(CollegeInsurancePlan instance);
    partial void UpdateCollegeInsurancePlan(CollegeInsurancePlan instance);
    partial void DeleteCollegeInsurancePlan(CollegeInsurancePlan instance);
    partial void InsertCollegeInsurancePlanAdjustment(CollegeInsurancePlanAdjustment instance);
    partial void UpdateCollegeInsurancePlanAdjustment(CollegeInsurancePlanAdjustment instance);
    partial void DeleteCollegeInsurancePlanAdjustment(CollegeInsurancePlanAdjustment instance);
    partial void InsertCollegeInsurancePlanDisbursement(CollegeInsurancePlanDisbursement instance);
    partial void UpdateCollegeInsurancePlanDisbursement(CollegeInsurancePlanDisbursement instance);
    partial void DeleteCollegeInsurancePlanDisbursement(CollegeInsurancePlanDisbursement instance);
    partial void InsertCollegeInsurancePlanReceipt(CollegeInsurancePlanReceipt instance);
    partial void UpdateCollegeInsurancePlanReceipt(CollegeInsurancePlanReceipt instance);
    partial void DeleteCollegeInsurancePlanReceipt(CollegeInsurancePlanReceipt instance);
    partial void InsertPensionPlanAdjustment(PensionPlanAdjustment instance);
    partial void UpdatePensionPlanAdjustment(PensionPlanAdjustment instance);
    partial void DeletePensionPlanAdjustment(PensionPlanAdjustment instance);
    partial void InsertPensionPlanDisbursement(PensionPlanDisbursement instance);
    partial void UpdatePensionPlanDisbursement(PensionPlanDisbursement instance);
    partial void DeletePensionPlanDisbursement(PensionPlanDisbursement instance);
    partial void InsertPensionPlanInterestAdjustment(PensionPlanInterestAdjustment instance);
    partial void UpdatePensionPlanInterestAdjustment(PensionPlanInterestAdjustment instance);
    partial void DeletePensionPlanInterestAdjustment(PensionPlanInterestAdjustment instance);
    partial void InsertPensionPlanReceipt(PensionPlanReceipt instance);
    partial void UpdatePensionPlanReceipt(PensionPlanReceipt instance);
    partial void DeletePensionPlanReceipt(PensionPlanReceipt instance);
    partial void InsertPensionPlan(PensionPlan instance);
    partial void UpdatePensionPlan(PensionPlan instance);
    partial void DeletePensionPlan(PensionPlan instance);
    partial void InsertCapitalShareAdjustment(CapitalShareAdjustment instance);
    partial void UpdateCapitalShareAdjustment(CapitalShareAdjustment instance);
    partial void DeleteCapitalShareAdjustment(CapitalShareAdjustment instance);
    partial void InsertSavingsDepositAdjustment(SavingsDepositAdjustment instance);
    partial void UpdateSavingsDepositAdjustment(SavingsDepositAdjustment instance);
    partial void DeleteSavingsDepositAdjustment(SavingsDepositAdjustment instance);
    partial void InsertTimeDeposit(TimeDeposit instance);
    partial void UpdateTimeDeposit(TimeDeposit instance);
    partial void DeleteTimeDeposit(TimeDeposit instance);
    partial void InsertTimeDepositAdjustment(TimeDepositAdjustment instance);
    partial void UpdateTimeDepositAdjustment(TimeDepositAdjustment instance);
    partial void DeleteTimeDepositAdjustment(TimeDepositAdjustment instance);
    partial void InsertTimeDepositDisbursement(TimeDepositDisbursement instance);
    partial void UpdateTimeDepositDisbursement(TimeDepositDisbursement instance);
    partial void DeleteTimeDepositDisbursement(TimeDepositDisbursement instance);
    partial void InsertTimeDepositReceipt(TimeDepositReceipt instance);
    partial void UpdateTimeDepositReceipt(TimeDepositReceipt instance);
    partial void DeleteTimeDepositReceipt(TimeDepositReceipt instance);
    partial void InsertTulunganFund(TulunganFund instance);
    partial void UpdateTulunganFund(TulunganFund instance);
    partial void DeleteTulunganFund(TulunganFund instance);
    partial void InsertTulunganFundReceipt(TulunganFundReceipt instance);
    partial void UpdateTulunganFundReceipt(TulunganFundReceipt instance);
    partial void DeleteTulunganFundReceipt(TulunganFundReceipt instance);
    partial void InsertTulunganFundDisbursement(TulunganFundDisbursement instance);
    partial void UpdateTulunganFundDisbursement(TulunganFundDisbursement instance);
    partial void DeleteTulunganFundDisbursement(TulunganFundDisbursement instance);
    partial void InsertTulunganFundAdjustment(TulunganFundAdjustment instance);
    partial void UpdateTulunganFundAdjustment(TulunganFundAdjustment instance);
    partial void DeleteTulunganFundAdjustment(TulunganFundAdjustment instance);
    partial void InsertDeathAidFund(DeathAidFund instance);
    partial void UpdateDeathAidFund(DeathAidFund instance);
    partial void DeleteDeathAidFund(DeathAidFund instance);
    partial void InsertDeathAidFundDisbursement(DeathAidFundDisbursement instance);
    partial void UpdateDeathAidFundDisbursement(DeathAidFundDisbursement instance);
    partial void DeleteDeathAidFundDisbursement(DeathAidFundDisbursement instance);
    partial void InsertDeathAidFundReceipt(DeathAidFundReceipt instance);
    partial void UpdateDeathAidFundReceipt(DeathAidFundReceipt instance);
    partial void DeleteDeathAidFundReceipt(DeathAidFundReceipt instance);
    partial void InsertDeathAidFundAdjustment(DeathAidFundAdjustment instance);
    partial void UpdateDeathAidFundAdjustment(DeathAidFundAdjustment instance);
    partial void DeleteDeathAidFundAdjustment(DeathAidFundAdjustment instance);
    partial void InsertAdjustment(Adjustment instance);
    partial void UpdateAdjustment(Adjustment instance);
    partial void DeleteAdjustment(Adjustment instance);
    partial void InsertMiscellaneousIncomeAdjustment(MiscellaneousIncomeAdjustment instance);
    partial void UpdateMiscellaneousIncomeAdjustment(MiscellaneousIncomeAdjustment instance);
    partial void DeleteMiscellaneousIncomeAdjustment(MiscellaneousIncomeAdjustment instance);
    partial void InsertOtherAdjustment(OtherAdjustment instance);
    partial void UpdateOtherAdjustment(OtherAdjustment instance);
    partial void DeleteOtherAdjustment(OtherAdjustment instance);
    partial void InsertDividendComputation(DividendComputation instance);
    partial void UpdateDividendComputation(DividendComputation instance);
    partial void DeleteDividendComputation(DividendComputation instance);
    partial void InsertEducationalAttainment(EducationalAttainment instance);
    partial void UpdateEducationalAttainment(EducationalAttainment instance);
    partial void DeleteEducationalAttainment(EducationalAttainment instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertPicture(Picture instance);
    partial void UpdatePicture(Picture instance);
    partial void DeletePicture(Picture instance);
    partial void InsertUsersRole(UsersRole instance);
    partial void UpdateUsersRole(UsersRole instance);
    partial void DeleteUsersRole(UsersRole instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertFineComputationRate(FineComputationRate instance);
    partial void UpdateFineComputationRate(FineComputationRate instance);
    partial void DeleteFineComputationRate(FineComputationRate instance);
    partial void InsertDelinquentFineReceipt(DelinquentFineReceipt instance);
    partial void UpdateDelinquentFineReceipt(DelinquentFineReceipt instance);
    partial void DeleteDelinquentFineReceipt(DelinquentFineReceipt instance);
    partial void InsertLatePaymentFineReceipt(LatePaymentFineReceipt instance);
    partial void UpdateLatePaymentFineReceipt(LatePaymentFineReceipt instance);
    partial void DeleteLatePaymentFineReceipt(LatePaymentFineReceipt instance);
    partial void InsertAgingLoanItem(AgingLoanItem instance);
    partial void UpdateAgingLoanItem(AgingLoanItem instance);
    partial void DeleteAgingLoanItem(AgingLoanItem instance);
    partial void InsertAgingLoan(AgingLoan instance);
    partial void UpdateAgingLoan(AgingLoan instance);
    partial void DeleteAgingLoan(AgingLoan instance);
    partial void InsertDelinquentLoanItem(DelinquentLoanItem instance);
    partial void UpdateDelinquentLoanItem(DelinquentLoanItem instance);
    partial void DeleteDelinquentLoanItem(DelinquentLoanItem instance);
    partial void InsertDelinquentLoan(DelinquentLoan instance);
    partial void UpdateDelinquentLoan(DelinquentLoan instance);
    partial void DeleteDelinquentLoan(DelinquentLoan instance);
    partial void InsertLoan(Loan instance);
    partial void UpdateLoan(Loan instance);
    partial void DeleteLoan(Loan instance);
    partial void InsertLoanNotice(LoanNotice instance);
    partial void UpdateLoanNotice(LoanNotice instance);
    partial void DeleteLoanNotice(LoanNotice instance);
    #endregion
		
		public CooperativeSystemModelDataContext() : 
				base(global::CooperativeSystem.Service.Properties.Settings.Default.csdb_prodConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public CooperativeSystemModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CooperativeSystemModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CooperativeSystemModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CooperativeSystemModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SavingsDepositInterestRate> SavingsDepositInterestRates
		{
			get
			{
				return this.GetTable<SavingsDepositInterestRate>();
			}
		}
		
		public System.Data.Linq.Table<DTIMEDPLoanServiceRate> DTIMEDPLoanServiceRates
		{
			get
			{
				return this.GetTable<DTIMEDPLoanServiceRate>();
			}
		}
		
		public System.Data.Linq.Table<DividendPatronageRatio> DividendPatronageRatios
		{
			get
			{
				return this.GetTable<DividendPatronageRatio>();
			}
		}
		
		public System.Data.Linq.Table<TimeDepositInterestRate> TimeDepositInterestRates
		{
			get
			{
				return this.GetTable<TimeDepositInterestRate>();
			}
		}
		
		public System.Data.Linq.Table<AvailedService> AvailedServices
		{
			get
			{
				return this.GetTable<AvailedService>();
			}
		}
		
		public System.Data.Linq.Table<Dependent> Dependents
		{
			get
			{
				return this.GetTable<Dependent>();
			}
		}
		
		public System.Data.Linq.Table<Relation> Relations
		{
			get
			{
				return this.GetTable<Relation>();
			}
		}
		
		public System.Data.Linq.Table<MembershipCategory> MembershipCategories
		{
			get
			{
				return this.GetTable<MembershipCategory>();
			}
		}
		
		public System.Data.Linq.Table<MaritalStatus> MaritalStatus
		{
			get
			{
				return this.GetTable<MaritalStatus>();
			}
		}
		
		public System.Data.Linq.Table<AccountStatus> AccountStatus
		{
			get
			{
				return this.GetTable<AccountStatus>();
			}
		}
		
		public System.Data.Linq.Table<MembershipCategoryService> MembershipCategoryServices
		{
			get
			{
				return this.GetTable<MembershipCategoryService>();
			}
		}
		
		public System.Data.Linq.Table<ServiceCategory> ServiceCategories
		{
			get
			{
				return this.GetTable<ServiceCategory>();
			}
		}
		
		public System.Data.Linq.Table<CapitalShare> CapitalShares
		{
			get
			{
				return this.GetTable<CapitalShare>();
			}
		}
		
		public System.Data.Linq.Table<CapitalShareDisbursement> CapitalShareDisbursements
		{
			get
			{
				return this.GetTable<CapitalShareDisbursement>();
			}
		}
		
		public System.Data.Linq.Table<CapitalShareReceipt> CapitalShareReceipts
		{
			get
			{
				return this.GetTable<CapitalShareReceipt>();
			}
		}
		
		public System.Data.Linq.Table<SavingsDeposit> SavingsDeposits
		{
			get
			{
				return this.GetTable<SavingsDeposit>();
			}
		}
		
		public System.Data.Linq.Table<SavingsDepositDisbursement> SavingsDepositDisbursements
		{
			get
			{
				return this.GetTable<SavingsDepositDisbursement>();
			}
		}
		
		public System.Data.Linq.Table<SavingsDepositReceipt> SavingsDepositReceipts
		{
			get
			{
				return this.GetTable<SavingsDepositReceipt>();
			}
		}
		
		public System.Data.Linq.Table<MembershipFeeReceipt> MembershipFeeReceipts
		{
			get
			{
				return this.GetTable<MembershipFeeReceipt>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserCategory> UserCategories
		{
			get
			{
				return this.GetTable<UserCategory>();
			}
		}
		
		public System.Data.Linq.Table<SexType> SexTypes
		{
			get
			{
				return this.GetTable<SexType>();
			}
		}
		
		public System.Data.Linq.Table<LoanDeductionType> LoanDeductionTypes
		{
			get
			{
				return this.GetTable<LoanDeductionType>();
			}
		}
		
		public System.Data.Linq.Table<LoanCollectionFeeRate> LoanCollectionFeeRates
		{
			get
			{
				return this.GetTable<LoanCollectionFeeRate>();
			}
		}
		
		public System.Data.Linq.Table<LoanGuaranteeFundRate> LoanGuaranteeFundRates
		{
			get
			{
				return this.GetTable<LoanGuaranteeFundRate>();
			}
		}
		
		public System.Data.Linq.Table<LoanInterestRate> LoanInterestRates
		{
			get
			{
				return this.GetTable<LoanInterestRate>();
			}
		}
		
		public System.Data.Linq.Table<LoanServiceFeeRate> LoanServiceFeeRates
		{
			get
			{
				return this.GetTable<LoanServiceFeeRate>();
			}
		}
		
		public System.Data.Linq.Table<ApplianceLoanServiceRate> ApplianceLoanServiceRates
		{
			get
			{
				return this.GetTable<ApplianceLoanServiceRate>();
			}
		}
		
		public System.Data.Linq.Table<EasyLoanServiceRate> EasyLoanServiceRates
		{
			get
			{
				return this.GetTable<EasyLoanServiceRate>();
			}
		}
		
		public System.Data.Linq.Table<EmergencyLoanServiceRate> EmergencyLoanServiceRates
		{
			get
			{
				return this.GetTable<EmergencyLoanServiceRate>();
			}
		}
		
		public System.Data.Linq.Table<TimeDepositMinimumAmount> TimeDepositMinimumAmounts
		{
			get
			{
				return this.GetTable<TimeDepositMinimumAmount>();
			}
		}
		
		public System.Data.Linq.Table<SavingsDepositMaintainingBalance> SavingsDepositMaintainingBalances
		{
			get
			{
				return this.GetTable<SavingsDepositMaintainingBalance>();
			}
		}
		
		public System.Data.Linq.Table<CapitalShareMinimumAmount> CapitalShareMinimumAmounts
		{
			get
			{
				return this.GetTable<CapitalShareMinimumAmount>();
			}
		}
		
		public System.Data.Linq.Table<LoanCapitalBuildupRate> LoanCapitalBuildupRates
		{
			get
			{
				return this.GetTable<LoanCapitalBuildupRate>();
			}
		}
		
		public System.Data.Linq.Table<PensionPlanAvailOption> PensionPlanAvailOptions
		{
			get
			{
				return this.GetTable<PensionPlanAvailOption>();
			}
		}
		
		public System.Data.Linq.Table<SavingsDepositInterestAdjustment> SavingsDepositInterestAdjustments
		{
			get
			{
				return this.GetTable<SavingsDepositInterestAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<NetSurplus> NetSurplus
		{
			get
			{
				return this.GetTable<NetSurplus>();
			}
		}
		
		public System.Data.Linq.Table<Quarter> Quarters
		{
			get
			{
				return this.GetTable<Quarter>();
			}
		}
		
		public System.Data.Linq.Table<Month> Months
		{
			get
			{
				return this.GetTable<Month>();
			}
		}
		
		public System.Data.Linq.Table<OtherReceipt> OtherReceipts
		{
			get
			{
				return this.GetTable<OtherReceipt>();
			}
		}
		
		public System.Data.Linq.Table<MiscellaneousIncomeReceipt> MiscellaneousIncomeReceipts
		{
			get
			{
				return this.GetTable<MiscellaneousIncomeReceipt>();
			}
		}
		
		public System.Data.Linq.Table<OtherDisbursement> OtherDisbursements
		{
			get
			{
				return this.GetTable<OtherDisbursement>();
			}
		}
		
		public System.Data.Linq.Table<MiscellaneousIncomeDisbursement> MiscellaneousIncomeDisbursements
		{
			get
			{
				return this.GetTable<MiscellaneousIncomeDisbursement>();
			}
		}
		
		public System.Data.Linq.Table<CashDisbursement> CashDisbursements
		{
			get
			{
				return this.GetTable<CashDisbursement>();
			}
		}
		
		public System.Data.Linq.Table<CashReceipt> CashReceipts
		{
			get
			{
				return this.GetTable<CashReceipt>();
			}
		}
		
		public System.Data.Linq.Table<LoanReceipt> LoanReceipts
		{
			get
			{
				return this.GetTable<LoanReceipt>();
			}
		}
		
		public System.Data.Linq.Table<LoanDisbursement> LoanDisbursements
		{
			get
			{
				return this.GetTable<LoanDisbursement>();
			}
		}
		
		public System.Data.Linq.Table<QuarterlyInterestComputation> QuarterlyInterestComputations
		{
			get
			{
				return this.GetTable<QuarterlyInterestComputation>();
			}
		}
		
		public System.Data.Linq.Table<AverageMonthlyBalance> AverageMonthlyBalances
		{
			get
			{
				return this.GetTable<AverageMonthlyBalance>();
			}
		}
		
		public System.Data.Linq.Table<DividendShareItem> DividendShareItems
		{
			get
			{
				return this.GetTable<DividendShareItem>();
			}
		}
		
		public System.Data.Linq.Table<PatronageComputation> PatronageComputations
		{
			get
			{
				return this.GetTable<PatronageComputation>();
			}
		}
		
		public System.Data.Linq.Table<PatronageItem> PatronageItems
		{
			get
			{
				return this.GetTable<PatronageItem>();
			}
		}
		
		public System.Data.Linq.Table<CapitalShareDividendAdjustment> CapitalShareDividendAdjustments
		{
			get
			{
				return this.GetTable<CapitalShareDividendAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<CapitalSharePatronageRefundAdjustment> CapitalSharePatronageRefundAdjustments
		{
			get
			{
				return this.GetTable<CapitalSharePatronageRefundAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<LoanDividendAdjustment> LoanDividendAdjustments
		{
			get
			{
				return this.GetTable<LoanDividendAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<SavingsDepositDividendAdjustment> SavingsDepositDividendAdjustments
		{
			get
			{
				return this.GetTable<SavingsDepositDividendAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<YearlyDividend> YearlyDividends
		{
			get
			{
				return this.GetTable<YearlyDividend>();
			}
		}
		
		public System.Data.Linq.Table<YearlyPatronage> YearlyPatronages
		{
			get
			{
				return this.GetTable<YearlyPatronage>();
			}
		}
		
		public System.Data.Linq.Table<QuarterlyInterest> QuarterlyInterests
		{
			get
			{
				return this.GetTable<QuarterlyInterest>();
			}
		}
		
		public System.Data.Linq.Table<CapitalShareInterestRebateAdjustment> CapitalShareInterestRebateAdjustments
		{
			get
			{
				return this.GetTable<CapitalShareInterestRebateAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<DeathAidFundType> DeathAidFundTypes
		{
			get
			{
				return this.GetTable<DeathAidFundType>();
			}
		}
		
		public System.Data.Linq.Table<DeathAidFundSetting> DeathAidFundSettings
		{
			get
			{
				return this.GetTable<DeathAidFundSetting>();
			}
		}
		
		public System.Data.Linq.Table<TulunganFundSetting> TulunganFundSettings
		{
			get
			{
				return this.GetTable<TulunganFundSetting>();
			}
		}
		
		public System.Data.Linq.Table<CollegeInsurancePlanSetting> CollegeInsurancePlanSettings
		{
			get
			{
				return this.GetTable<CollegeInsurancePlanSetting>();
			}
		}
		
		public System.Data.Linq.Table<PaymentMode> PaymentModes
		{
			get
			{
				return this.GetTable<PaymentMode>();
			}
		}
		
		public System.Data.Linq.Table<ServicePaymentMode> ServicePaymentModes
		{
			get
			{
				return this.GetTable<ServicePaymentMode>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<PensionPlanSetting> PensionPlanSettings
		{
			get
			{
				return this.GetTable<PensionPlanSetting>();
			}
		}
		
		public System.Data.Linq.Table<CapitalShareBuildup> CapitalShareBuildups
		{
			get
			{
				return this.GetTable<CapitalShareBuildup>();
			}
		}
		
		public System.Data.Linq.Table<LoanSetting> LoanSettings
		{
			get
			{
				return this.GetTable<LoanSetting>();
			}
		}
		
		public System.Data.Linq.Table<LoanAdjustment> LoanAdjustments
		{
			get
			{
				return this.GetTable<LoanAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<CollegeInsurancePlan> CollegeInsurancePlans
		{
			get
			{
				return this.GetTable<CollegeInsurancePlan>();
			}
		}
		
		public System.Data.Linq.Table<CollegeInsurancePlanAdjustment> CollegeInsurancePlanAdjustments
		{
			get
			{
				return this.GetTable<CollegeInsurancePlanAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<CollegeInsurancePlanDisbursement> CollegeInsurancePlanDisbursements
		{
			get
			{
				return this.GetTable<CollegeInsurancePlanDisbursement>();
			}
		}
		
		public System.Data.Linq.Table<CollegeInsurancePlanReceipt> CollegeInsurancePlanReceipts
		{
			get
			{
				return this.GetTable<CollegeInsurancePlanReceipt>();
			}
		}
		
		public System.Data.Linq.Table<PensionPlanAdjustment> PensionPlanAdjustments
		{
			get
			{
				return this.GetTable<PensionPlanAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<PensionPlanDisbursement> PensionPlanDisbursements
		{
			get
			{
				return this.GetTable<PensionPlanDisbursement>();
			}
		}
		
		public System.Data.Linq.Table<PensionPlanInterestAdjustment> PensionPlanInterestAdjustments
		{
			get
			{
				return this.GetTable<PensionPlanInterestAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<PensionPlanReceipt> PensionPlanReceipts
		{
			get
			{
				return this.GetTable<PensionPlanReceipt>();
			}
		}
		
		public System.Data.Linq.Table<PensionPlan> PensionPlans
		{
			get
			{
				return this.GetTable<PensionPlan>();
			}
		}
		
		public System.Data.Linq.Table<CapitalShareAdjustment> CapitalShareAdjustments
		{
			get
			{
				return this.GetTable<CapitalShareAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<SavingsDepositAdjustment> SavingsDepositAdjustments
		{
			get
			{
				return this.GetTable<SavingsDepositAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<TimeDeposit> TimeDeposits
		{
			get
			{
				return this.GetTable<TimeDeposit>();
			}
		}
		
		public System.Data.Linq.Table<TimeDepositAdjustment> TimeDepositAdjustments
		{
			get
			{
				return this.GetTable<TimeDepositAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<TimeDepositDisbursement> TimeDepositDisbursements
		{
			get
			{
				return this.GetTable<TimeDepositDisbursement>();
			}
		}
		
		public System.Data.Linq.Table<TimeDepositReceipt> TimeDepositReceipts
		{
			get
			{
				return this.GetTable<TimeDepositReceipt>();
			}
		}
		
		public System.Data.Linq.Table<TulunganFund> TulunganFunds
		{
			get
			{
				return this.GetTable<TulunganFund>();
			}
		}
		
		public System.Data.Linq.Table<TulunganFundReceipt> TulunganFundReceipts
		{
			get
			{
				return this.GetTable<TulunganFundReceipt>();
			}
		}
		
		public System.Data.Linq.Table<TulunganFundDisbursement> TulunganFundDisbursements
		{
			get
			{
				return this.GetTable<TulunganFundDisbursement>();
			}
		}
		
		public System.Data.Linq.Table<TulunganFundAdjustment> TulunganFundAdjustments
		{
			get
			{
				return this.GetTable<TulunganFundAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<DeathAidFund> DeathAidFunds
		{
			get
			{
				return this.GetTable<DeathAidFund>();
			}
		}
		
		public System.Data.Linq.Table<DeathAidFundDisbursement> DeathAidFundDisbursements
		{
			get
			{
				return this.GetTable<DeathAidFundDisbursement>();
			}
		}
		
		public System.Data.Linq.Table<DeathAidFundReceipt> DeathAidFundReceipts
		{
			get
			{
				return this.GetTable<DeathAidFundReceipt>();
			}
		}
		
		public System.Data.Linq.Table<DeathAidFundAdjustment> DeathAidFundAdjustments
		{
			get
			{
				return this.GetTable<DeathAidFundAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<Adjustment> Adjustments
		{
			get
			{
				return this.GetTable<Adjustment>();
			}
		}
		
		public System.Data.Linq.Table<MiscellaneousIncomeAdjustment> MiscellaneousIncomeAdjustments
		{
			get
			{
				return this.GetTable<MiscellaneousIncomeAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<OtherAdjustment> OtherAdjustments
		{
			get
			{
				return this.GetTable<OtherAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<DividendComputation> DividendComputations
		{
			get
			{
				return this.GetTable<DividendComputation>();
			}
		}
		
		public System.Data.Linq.Table<Application> Applications
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<EducationalAttainment> EducationalAttainments
		{
			get
			{
				return this.GetTable<EducationalAttainment>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Picture> Pictures
		{
			get
			{
				return this.GetTable<Picture>();
			}
		}
		
		public System.Data.Linq.Table<UsersRole> UsersRoles
		{
			get
			{
				return this.GetTable<UsersRole>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<FineComputationRate> FineComputationRates
		{
			get
			{
				return this.GetTable<FineComputationRate>();
			}
		}
		
		public System.Data.Linq.Table<DelinquentFineReceipt> DelinquentFineReceipts
		{
			get
			{
				return this.GetTable<DelinquentFineReceipt>();
			}
		}
		
		public System.Data.Linq.Table<LatePaymentFineReceipt> LatePaymentFineReceipts
		{
			get
			{
				return this.GetTable<LatePaymentFineReceipt>();
			}
		}
		
		public System.Data.Linq.Table<AgingLoanItem> AgingLoanItems
		{
			get
			{
				return this.GetTable<AgingLoanItem>();
			}
		}
		
		public System.Data.Linq.Table<AgingLoan> AgingLoans
		{
			get
			{
				return this.GetTable<AgingLoan>();
			}
		}
		
		public System.Data.Linq.Table<DelinquentLoanItem> DelinquentLoanItems
		{
			get
			{
				return this.GetTable<DelinquentLoanItem>();
			}
		}
		
		public System.Data.Linq.Table<DelinquentLoan> DelinquentLoans
		{
			get
			{
				return this.GetTable<DelinquentLoan>();
			}
		}
		
		public System.Data.Linq.Table<Loan> Loans
		{
			get
			{
				return this.GetTable<Loan>();
			}
		}
		
		public System.Data.Linq.Table<LoanNotice> LoanNotices
		{
			get
			{
				return this.GetTable<LoanNotice>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Member.uspFindMembers")]
		public ISingleResult<uspFindMembersResult> FindMembers([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountNumber", DbType="Char(13)")] string accountNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LastName", DbType="VarChar(30)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstName", DbType="VarChar(30)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MiddleName", DbType="VarChar(30)")] string middleName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accountNumber, lastName, firstName, middleName);
			return ((ISingleResult<uspFindMembersResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.SavingsDepositInterestRates")]
	public partial class SavingsDepositInterestRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _InterestRate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnInterestRateChanging(decimal value);
    partial void OnInterestRateChanged();
    #endregion
		
		public SavingsDepositInterestRate()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestRate", DbType="Decimal(4,2) NOT NULL")]
		public decimal InterestRate
		{
			get
			{
				return this._InterestRate;
			}
			set
			{
				if ((this._InterestRate != value))
				{
					this.OnInterestRateChanging(value);
					this.SendPropertyChanging();
					this._InterestRate = value;
					this.SendPropertyChanged("InterestRate");
					this.OnInterestRateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.DTIMEDPLoanServiceRates")]
	public partial class DTIMEDPLoanServiceRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _ServiceFeeRate;
		
		private decimal _CollectionFeeRate;
		
		private decimal _LoanGuaranteeFundRate;
		
		private decimal _CapitalBuildupRate;
		
		private decimal _InterestRate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnServiceFeeRateChanging(decimal value);
    partial void OnServiceFeeRateChanged();
    partial void OnCollectionFeeRateChanging(decimal value);
    partial void OnCollectionFeeRateChanged();
    partial void OnLoanGuaranteeFundRateChanging(decimal value);
    partial void OnLoanGuaranteeFundRateChanged();
    partial void OnCapitalBuildupRateChanging(decimal value);
    partial void OnCapitalBuildupRateChanged();
    partial void OnInterestRateChanging(decimal value);
    partial void OnInterestRateChanged();
    #endregion
		
		public DTIMEDPLoanServiceRate()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceFeeRate", DbType="Decimal(4,2) NOT NULL")]
		public decimal ServiceFeeRate
		{
			get
			{
				return this._ServiceFeeRate;
			}
			set
			{
				if ((this._ServiceFeeRate != value))
				{
					this.OnServiceFeeRateChanging(value);
					this.SendPropertyChanging();
					this._ServiceFeeRate = value;
					this.SendPropertyChanged("ServiceFeeRate");
					this.OnServiceFeeRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionFeeRate", DbType="Decimal(4,2) NOT NULL")]
		public decimal CollectionFeeRate
		{
			get
			{
				return this._CollectionFeeRate;
			}
			set
			{
				if ((this._CollectionFeeRate != value))
				{
					this.OnCollectionFeeRateChanging(value);
					this.SendPropertyChanging();
					this._CollectionFeeRate = value;
					this.SendPropertyChanged("CollectionFeeRate");
					this.OnCollectionFeeRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanGuaranteeFundRate", DbType="Decimal(4,3) NOT NULL")]
		public decimal LoanGuaranteeFundRate
		{
			get
			{
				return this._LoanGuaranteeFundRate;
			}
			set
			{
				if ((this._LoanGuaranteeFundRate != value))
				{
					this.OnLoanGuaranteeFundRateChanging(value);
					this.SendPropertyChanging();
					this._LoanGuaranteeFundRate = value;
					this.SendPropertyChanged("LoanGuaranteeFundRate");
					this.OnLoanGuaranteeFundRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapitalBuildupRate", DbType="Decimal(4,2) NOT NULL")]
		public decimal CapitalBuildupRate
		{
			get
			{
				return this._CapitalBuildupRate;
			}
			set
			{
				if ((this._CapitalBuildupRate != value))
				{
					this.OnCapitalBuildupRateChanging(value);
					this.SendPropertyChanging();
					this._CapitalBuildupRate = value;
					this.SendPropertyChanged("CapitalBuildupRate");
					this.OnCapitalBuildupRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestRate", DbType="Decimal(4,2) NOT NULL")]
		public decimal InterestRate
		{
			get
			{
				return this._InterestRate;
			}
			set
			{
				if ((this._InterestRate != value))
				{
					this.OnInterestRateChanging(value);
					this.SendPropertyChanging();
					this._InterestRate = value;
					this.SendPropertyChanged("InterestRate");
					this.OnInterestRateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DividendPatronageRatio")]
	public partial class DividendPatronageRatio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _DividendRatio;
		
		private int _PatronageRatio;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDividendRatioChanging(int value);
    partial void OnDividendRatioChanged();
    partial void OnPatronageRatioChanging(int value);
    partial void OnPatronageRatioChanged();
    #endregion
		
		public DividendPatronageRatio()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DividendRatio", DbType="Int NOT NULL")]
		public int DividendRatio
		{
			get
			{
				return this._DividendRatio;
			}
			set
			{
				if ((this._DividendRatio != value))
				{
					this.OnDividendRatioChanging(value);
					this.SendPropertyChanging();
					this._DividendRatio = value;
					this.SendPropertyChanged("DividendRatio");
					this.OnDividendRatioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatronageRatio", DbType="Int NOT NULL")]
		public int PatronageRatio
		{
			get
			{
				return this._PatronageRatio;
			}
			set
			{
				if ((this._PatronageRatio != value))
				{
					this.OnPatronageRatioChanging(value);
					this.SendPropertyChanging();
					this._PatronageRatio = value;
					this.SendPropertyChanged("PatronageRatio");
					this.OnPatronageRatioChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.TimeDepositInterestRates")]
	public partial class TimeDepositInterestRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _BelowFiftyThousand;
		
		private decimal _FiftyToNinetyNineThousand;
		
		private decimal _AboveNinetyNineThousand;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBelowFiftyThousandChanging(decimal value);
    partial void OnBelowFiftyThousandChanged();
    partial void OnFiftyToNinetyNineThousandChanging(decimal value);
    partial void OnFiftyToNinetyNineThousandChanged();
    partial void OnAboveNinetyNineThousandChanging(decimal value);
    partial void OnAboveNinetyNineThousandChanged();
    #endregion
		
		public TimeDepositInterestRate()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BelowFiftyThousand", DbType="Decimal(4,2) NOT NULL")]
		public decimal BelowFiftyThousand
		{
			get
			{
				return this._BelowFiftyThousand;
			}
			set
			{
				if ((this._BelowFiftyThousand != value))
				{
					this.OnBelowFiftyThousandChanging(value);
					this.SendPropertyChanging();
					this._BelowFiftyThousand = value;
					this.SendPropertyChanged("BelowFiftyThousand");
					this.OnBelowFiftyThousandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FiftyToNinetyNineThousand", DbType="Decimal(4,2) NOT NULL")]
		public decimal FiftyToNinetyNineThousand
		{
			get
			{
				return this._FiftyToNinetyNineThousand;
			}
			set
			{
				if ((this._FiftyToNinetyNineThousand != value))
				{
					this.OnFiftyToNinetyNineThousandChanging(value);
					this.SendPropertyChanging();
					this._FiftyToNinetyNineThousand = value;
					this.SendPropertyChanged("FiftyToNinetyNineThousand");
					this.OnFiftyToNinetyNineThousandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AboveNinetyNineThousand", DbType="Decimal(4,2) NOT NULL")]
		public decimal AboveNinetyNineThousand
		{
			get
			{
				return this._AboveNinetyNineThousand;
			}
			set
			{
				if ((this._AboveNinetyNineThousand != value))
				{
					this.OnAboveNinetyNineThousandChanging(value);
					this.SendPropertyChanging();
					this._AboveNinetyNineThousand = value;
					this.SendPropertyChanged("AboveNinetyNineThousand");
					this.OnAboveNinetyNineThousandChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Member.AvailedServices")]
	public partial class AvailedService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MemberID;
		
		private string _ServiceID;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnServiceIDChanging(string value);
    partial void OnServiceIDChanged();
    #endregion
		
		public AvailedService()
		{
			this._Service = default(EntityRef<Service>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_AvailedService", Storage="_Service", ThisKey="ServiceID", OtherKey="ServiceID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.AvailedServices.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.AvailedServices.Add(this);
						this._ServiceID = value.ServiceID;
					}
					else
					{
						this._ServiceID = default(string);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_AvailedService", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.AvailedServices.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.AvailedServices.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Member.Dependents")]
	public partial class Dependent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MemberID;
		
		private int _LineNumber;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private int _RelationID;
		
		private EntityRef<Relation> _Relation;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnLineNumberChanging(int value);
    partial void OnLineNumberChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnRelationIDChanging(int value);
    partial void OnRelationIDChanged();
    #endregion
		
		public Dependent()
		{
			this._Relation = default(EntityRef<Relation>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LineNumber
		{
			get
			{
				return this._LineNumber;
			}
			set
			{
				if ((this._LineNumber != value))
				{
					this.OnLineNumberChanging(value);
					this.SendPropertyChanging();
					this._LineNumber = value;
					this.SendPropertyChanged("LineNumber");
					this.OnLineNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(30)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationID", DbType="Int NOT NULL")]
		public int RelationID
		{
			get
			{
				return this._RelationID;
			}
			set
			{
				if ((this._RelationID != value))
				{
					if (this._Relation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationIDChanging(value);
					this.SendPropertyChanging();
					this._RelationID = value;
					this.SendPropertyChanged("RelationID");
					this.OnRelationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Relation_Dependent", Storage="_Relation", ThisKey="RelationID", OtherKey="RelationID", IsForeignKey=true)]
		public Relation Relation
		{
			get
			{
				return this._Relation.Entity;
			}
			set
			{
				Relation previousValue = this._Relation.Entity;
				if (((previousValue != value) 
							|| (this._Relation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Relation.Entity = null;
						previousValue.Dependents.Remove(this);
					}
					this._Relation.Entity = value;
					if ((value != null))
					{
						value.Dependents.Add(this);
						this._RelationID = value.RelationID;
					}
					else
					{
						this._RelationID = default(int);
					}
					this.SendPropertyChanged("Relation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Dependent", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Dependents.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Dependents.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Lookup.Relations")]
	public partial class Relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationID;
		
		private string _RelationName;
		
		private EntitySet<Dependent> _Dependents;
		
		private EntitySet<CollegeInsurancePlan> _CollegeInsurancePlans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationIDChanging(int value);
    partial void OnRelationIDChanged();
    partial void OnRelationNameChanging(string value);
    partial void OnRelationNameChanged();
    #endregion
		
		public Relation()
		{
			this._Dependents = new EntitySet<Dependent>(new Action<Dependent>(this.attach_Dependents), new Action<Dependent>(this.detach_Dependents));
			this._CollegeInsurancePlans = new EntitySet<CollegeInsurancePlan>(new Action<CollegeInsurancePlan>(this.attach_CollegeInsurancePlans), new Action<CollegeInsurancePlan>(this.detach_CollegeInsurancePlans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelationID
		{
			get
			{
				return this._RelationID;
			}
			set
			{
				if ((this._RelationID != value))
				{
					this.OnRelationIDChanging(value);
					this.SendPropertyChanging();
					this._RelationID = value;
					this.SendPropertyChanged("RelationID");
					this.OnRelationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string RelationName
		{
			get
			{
				return this._RelationName;
			}
			set
			{
				if ((this._RelationName != value))
				{
					this.OnRelationNameChanging(value);
					this.SendPropertyChanging();
					this._RelationName = value;
					this.SendPropertyChanged("RelationName");
					this.OnRelationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Relation_Dependent", Storage="_Dependents", ThisKey="RelationID", OtherKey="RelationID")]
		public EntitySet<Dependent> Dependents
		{
			get
			{
				return this._Dependents;
			}
			set
			{
				this._Dependents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Relation_CollegeInsurancePlan", Storage="_CollegeInsurancePlans", ThisKey="RelationID", OtherKey="RelationID")]
		public EntitySet<CollegeInsurancePlan> CollegeInsurancePlans
		{
			get
			{
				return this._CollegeInsurancePlans;
			}
			set
			{
				this._CollegeInsurancePlans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dependents(Dependent entity)
		{
			this.SendPropertyChanging();
			entity.Relation = this;
		}
		
		private void detach_Dependents(Dependent entity)
		{
			this.SendPropertyChanging();
			entity.Relation = null;
		}
		
		private void attach_CollegeInsurancePlans(CollegeInsurancePlan entity)
		{
			this.SendPropertyChanging();
			entity.Relation = this;
		}
		
		private void detach_CollegeInsurancePlans(CollegeInsurancePlan entity)
		{
			this.SendPropertyChanging();
			entity.Relation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Lookup.MembershipCategories")]
	public partial class MembershipCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MembershipCategoryID;
		
		private string _MembershipCategoryName;
		
		private EntitySet<MembershipCategoryService> _MembershipCategoryServices;
		
		private EntitySet<Member> _Members;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMembershipCategoryIDChanging(string value);
    partial void OnMembershipCategoryIDChanged();
    partial void OnMembershipCategoryNameChanging(string value);
    partial void OnMembershipCategoryNameChanged();
    #endregion
		
		public MembershipCategory()
		{
			this._MembershipCategoryServices = new EntitySet<MembershipCategoryService>(new Action<MembershipCategoryService>(this.attach_MembershipCategoryServices), new Action<MembershipCategoryService>(this.detach_MembershipCategoryServices));
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembershipCategoryID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MembershipCategoryID
		{
			get
			{
				return this._MembershipCategoryID;
			}
			set
			{
				if ((this._MembershipCategoryID != value))
				{
					this.OnMembershipCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._MembershipCategoryID = value;
					this.SendPropertyChanged("MembershipCategoryID");
					this.OnMembershipCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembershipCategoryName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string MembershipCategoryName
		{
			get
			{
				return this._MembershipCategoryName;
			}
			set
			{
				if ((this._MembershipCategoryName != value))
				{
					this.OnMembershipCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._MembershipCategoryName = value;
					this.SendPropertyChanged("MembershipCategoryName");
					this.OnMembershipCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MembershipCategory_MembershipCategoryService", Storage="_MembershipCategoryServices", ThisKey="MembershipCategoryID", OtherKey="MembershipCategoryID")]
		public EntitySet<MembershipCategoryService> MembershipCategoryServices
		{
			get
			{
				return this._MembershipCategoryServices;
			}
			set
			{
				this._MembershipCategoryServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MembershipCategory_Member", Storage="_Members", ThisKey="MembershipCategoryID", OtherKey="MembershipCategoryID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MembershipCategoryServices(MembershipCategoryService entity)
		{
			this.SendPropertyChanging();
			entity.MembershipCategory = this;
		}
		
		private void detach_MembershipCategoryServices(MembershipCategoryService entity)
		{
			this.SendPropertyChanging();
			entity.MembershipCategory = null;
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.MembershipCategory = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.MembershipCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Lookup.MaritalStatuses")]
	public partial class MaritalStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private char _MaritalStatusID;
		
		private string _MaritalStatusName;
		
		private EntitySet<Member> _Members;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaritalStatusIDChanging(char value);
    partial void OnMaritalStatusIDChanged();
    partial void OnMaritalStatusNameChanging(string value);
    partial void OnMaritalStatusNameChanged();
    #endregion
		
		public MaritalStatus()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatusID", DbType="Char(1) NOT NULL", IsPrimaryKey=true)]
		public char MaritalStatusID
		{
			get
			{
				return this._MaritalStatusID;
			}
			set
			{
				if ((this._MaritalStatusID != value))
				{
					this.OnMaritalStatusIDChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusID = value;
					this.SendPropertyChanged("MaritalStatusID");
					this.OnMaritalStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatusName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string MaritalStatusName
		{
			get
			{
				return this._MaritalStatusName;
			}
			set
			{
				if ((this._MaritalStatusName != value))
				{
					this.OnMaritalStatusNameChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusName = value;
					this.SendPropertyChanged("MaritalStatusName");
					this.OnMaritalStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaritalStatus_Member", Storage="_Members", ThisKey="MaritalStatusID", OtherKey="MaritalStatusID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatus = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Lookup.AccountStatuses")]
	public partial class AccountStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AccountStatusID;
		
		private string _AccountStatusName;
		
		private EntitySet<Member> _Members;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountStatusIDChanging(string value);
    partial void OnAccountStatusIDChanged();
    partial void OnAccountStatusNameChanging(string value);
    partial void OnAccountStatusNameChanged();
    #endregion
		
		public AccountStatus()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountStatusID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccountStatusID
		{
			get
			{
				return this._AccountStatusID;
			}
			set
			{
				if ((this._AccountStatusID != value))
				{
					this.OnAccountStatusIDChanging(value);
					this.SendPropertyChanging();
					this._AccountStatusID = value;
					this.SendPropertyChanged("AccountStatusID");
					this.OnAccountStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountStatusName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string AccountStatusName
		{
			get
			{
				return this._AccountStatusName;
			}
			set
			{
				if ((this._AccountStatusName != value))
				{
					this.OnAccountStatusNameChanging(value);
					this.SendPropertyChanging();
					this._AccountStatusName = value;
					this.SendPropertyChanged("AccountStatusName");
					this.OnAccountStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountStatus_Member", Storage="_Members", ThisKey="AccountStatusID", OtherKey="AccountStatusID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.AccountStatus = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.AccountStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Link.MembershipCategoryServices")]
	public partial class MembershipCategoryService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MembershipCategoryID;
		
		private string _ServiceID;
		
		private EntityRef<MembershipCategory> _MembershipCategory;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMembershipCategoryIDChanging(string value);
    partial void OnMembershipCategoryIDChanged();
    partial void OnServiceIDChanging(string value);
    partial void OnServiceIDChanged();
    #endregion
		
		public MembershipCategoryService()
		{
			this._MembershipCategory = default(EntityRef<MembershipCategory>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembershipCategoryID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MembershipCategoryID
		{
			get
			{
				return this._MembershipCategoryID;
			}
			set
			{
				if ((this._MembershipCategoryID != value))
				{
					if (this._MembershipCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembershipCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._MembershipCategoryID = value;
					this.SendPropertyChanged("MembershipCategoryID");
					this.OnMembershipCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MembershipCategory_MembershipCategoryService", Storage="_MembershipCategory", ThisKey="MembershipCategoryID", OtherKey="MembershipCategoryID", IsForeignKey=true)]
		public MembershipCategory MembershipCategory
		{
			get
			{
				return this._MembershipCategory.Entity;
			}
			set
			{
				MembershipCategory previousValue = this._MembershipCategory.Entity;
				if (((previousValue != value) 
							|| (this._MembershipCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MembershipCategory.Entity = null;
						previousValue.MembershipCategoryServices.Remove(this);
					}
					this._MembershipCategory.Entity = value;
					if ((value != null))
					{
						value.MembershipCategoryServices.Add(this);
						this._MembershipCategoryID = value.MembershipCategoryID;
					}
					else
					{
						this._MembershipCategoryID = default(string);
					}
					this.SendPropertyChanged("MembershipCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_MembershipCategoryService", Storage="_Service", ThisKey="ServiceID", OtherKey="ServiceID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.MembershipCategoryServices.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.MembershipCategoryServices.Add(this);
						this._ServiceID = value.ServiceID;
					}
					else
					{
						this._ServiceID = default(string);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Lookup.ServiceCategories")]
	public partial class ServiceCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ServiceCategoryID;
		
		private string _ServiceCategoryName;
		
		private EntitySet<Service> _Services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceCategoryIDChanging(string value);
    partial void OnServiceCategoryIDChanged();
    partial void OnServiceCategoryNameChanging(string value);
    partial void OnServiceCategoryNameChanged();
    #endregion
		
		public ServiceCategory()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceCategoryID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ServiceCategoryID
		{
			get
			{
				return this._ServiceCategoryID;
			}
			set
			{
				if ((this._ServiceCategoryID != value))
				{
					this.OnServiceCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceCategoryID = value;
					this.SendPropertyChanged("ServiceCategoryID");
					this.OnServiceCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceCategoryName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ServiceCategoryName
		{
			get
			{
				return this._ServiceCategoryName;
			}
			set
			{
				if ((this._ServiceCategoryName != value))
				{
					this.OnServiceCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._ServiceCategoryName = value;
					this.SendPropertyChanged("ServiceCategoryName");
					this.OnServiceCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceCategory_Service", Storage="_Services", ThisKey="ServiceCategoryID", OtherKey="ServiceCategoryID")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.ServiceCategory = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.ServiceCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.CapitalShares")]
	public partial class CapitalShare : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MemberID;
		
		private decimal _CurrentBalance;
		
		private EntitySet<CapitalShareDisbursement> _CapitalShareDisbursements;
		
		private EntitySet<CapitalShareReceipt> _CapitalShareReceipts;
		
		private EntitySet<CapitalShareDividendAdjustment> _CapitalShareDividendAdjustments;
		
		private EntitySet<CapitalSharePatronageRefundAdjustment> _CapitalSharePatronageRefundAdjustments;
		
		private EntitySet<CapitalShareInterestRebateAdjustment> _CapitalShareInterestRebateAdjustments;
		
		private EntitySet<CapitalShareBuildup> _CapitalShareBuildups;
		
		private EntitySet<CapitalShareAdjustment> _CapitalShareAdjustments;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnCurrentBalanceChanging(decimal value);
    partial void OnCurrentBalanceChanged();
    #endregion
		
		public CapitalShare()
		{
			this._CapitalShareDisbursements = new EntitySet<CapitalShareDisbursement>(new Action<CapitalShareDisbursement>(this.attach_CapitalShareDisbursements), new Action<CapitalShareDisbursement>(this.detach_CapitalShareDisbursements));
			this._CapitalShareReceipts = new EntitySet<CapitalShareReceipt>(new Action<CapitalShareReceipt>(this.attach_CapitalShareReceipts), new Action<CapitalShareReceipt>(this.detach_CapitalShareReceipts));
			this._CapitalShareDividendAdjustments = new EntitySet<CapitalShareDividendAdjustment>(new Action<CapitalShareDividendAdjustment>(this.attach_CapitalShareDividendAdjustments), new Action<CapitalShareDividendAdjustment>(this.detach_CapitalShareDividendAdjustments));
			this._CapitalSharePatronageRefundAdjustments = new EntitySet<CapitalSharePatronageRefundAdjustment>(new Action<CapitalSharePatronageRefundAdjustment>(this.attach_CapitalSharePatronageRefundAdjustments), new Action<CapitalSharePatronageRefundAdjustment>(this.detach_CapitalSharePatronageRefundAdjustments));
			this._CapitalShareInterestRebateAdjustments = new EntitySet<CapitalShareInterestRebateAdjustment>(new Action<CapitalShareInterestRebateAdjustment>(this.attach_CapitalShareInterestRebateAdjustments), new Action<CapitalShareInterestRebateAdjustment>(this.detach_CapitalShareInterestRebateAdjustments));
			this._CapitalShareBuildups = new EntitySet<CapitalShareBuildup>(new Action<CapitalShareBuildup>(this.attach_CapitalShareBuildups), new Action<CapitalShareBuildup>(this.detach_CapitalShareBuildups));
			this._CapitalShareAdjustments = new EntitySet<CapitalShareAdjustment>(new Action<CapitalShareAdjustment>(this.attach_CapitalShareAdjustments), new Action<CapitalShareAdjustment>(this.detach_CapitalShareAdjustments));
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentBalance", DbType="Money NOT NULL")]
		public decimal CurrentBalance
		{
			get
			{
				return this._CurrentBalance;
			}
			set
			{
				if ((this._CurrentBalance != value))
				{
					this.OnCurrentBalanceChanging(value);
					this.SendPropertyChanging();
					this._CurrentBalance = value;
					this.SendPropertyChanged("CurrentBalance");
					this.OnCurrentBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalShare_CapitalShareDisbursement", Storage="_CapitalShareDisbursements", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<CapitalShareDisbursement> CapitalShareDisbursements
		{
			get
			{
				return this._CapitalShareDisbursements;
			}
			set
			{
				this._CapitalShareDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalShare_CapitalShareReceipt", Storage="_CapitalShareReceipts", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<CapitalShareReceipt> CapitalShareReceipts
		{
			get
			{
				return this._CapitalShareReceipts;
			}
			set
			{
				this._CapitalShareReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalShare_CapitalShareDividendAdjustment", Storage="_CapitalShareDividendAdjustments", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<CapitalShareDividendAdjustment> CapitalShareDividendAdjustments
		{
			get
			{
				return this._CapitalShareDividendAdjustments;
			}
			set
			{
				this._CapitalShareDividendAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalShare_CapitalSharePatronageRefundAdjustment", Storage="_CapitalSharePatronageRefundAdjustments", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<CapitalSharePatronageRefundAdjustment> CapitalSharePatronageRefundAdjustments
		{
			get
			{
				return this._CapitalSharePatronageRefundAdjustments;
			}
			set
			{
				this._CapitalSharePatronageRefundAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalShare_CapitalShareInterestRebateAdjustment", Storage="_CapitalShareInterestRebateAdjustments", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<CapitalShareInterestRebateAdjustment> CapitalShareInterestRebateAdjustments
		{
			get
			{
				return this._CapitalShareInterestRebateAdjustments;
			}
			set
			{
				this._CapitalShareInterestRebateAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalShare_CapitalShareBuildup", Storage="_CapitalShareBuildups", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<CapitalShareBuildup> CapitalShareBuildups
		{
			get
			{
				return this._CapitalShareBuildups;
			}
			set
			{
				this._CapitalShareBuildups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalShare_CapitalShareAdjustment", Storage="_CapitalShareAdjustments", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<CapitalShareAdjustment> CapitalShareAdjustments
		{
			get
			{
				return this._CapitalShareAdjustments;
			}
			set
			{
				this._CapitalShareAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_CapitalShare", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.CapitalShare = null;
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.CapitalShare = this;
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CapitalShareDisbursements(CapitalShareDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CapitalShare = this;
		}
		
		private void detach_CapitalShareDisbursements(CapitalShareDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CapitalShare = null;
		}
		
		private void attach_CapitalShareReceipts(CapitalShareReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CapitalShare = this;
		}
		
		private void detach_CapitalShareReceipts(CapitalShareReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CapitalShare = null;
		}
		
		private void attach_CapitalShareDividendAdjustments(CapitalShareDividendAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.CapitalShare = this;
		}
		
		private void detach_CapitalShareDividendAdjustments(CapitalShareDividendAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.CapitalShare = null;
		}
		
		private void attach_CapitalSharePatronageRefundAdjustments(CapitalSharePatronageRefundAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.CapitalShare = this;
		}
		
		private void detach_CapitalSharePatronageRefundAdjustments(CapitalSharePatronageRefundAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.CapitalShare = null;
		}
		
		private void attach_CapitalShareInterestRebateAdjustments(CapitalShareInterestRebateAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.CapitalShare = this;
		}
		
		private void detach_CapitalShareInterestRebateAdjustments(CapitalShareInterestRebateAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.CapitalShare = null;
		}
		
		private void attach_CapitalShareBuildups(CapitalShareBuildup entity)
		{
			this.SendPropertyChanging();
			entity.CapitalShare = this;
		}
		
		private void detach_CapitalShareBuildups(CapitalShareBuildup entity)
		{
			this.SendPropertyChanging();
			entity.CapitalShare = null;
		}
		
		private void attach_CapitalShareAdjustments(CapitalShareAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.CapitalShare = this;
		}
		
		private void detach_CapitalShareAdjustments(CapitalShareAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.CapitalShare = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.CapitalShareDisbursements")]
	public partial class CapitalShareDisbursement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _DisbursementID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CapitalShare> _CapitalShare;
		
		private EntityRef<CashDisbursement> _CashDisbursement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnDisbursementIDChanging(long value);
    partial void OnDisbursementIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public CapitalShareDisbursement()
		{
			this._CapitalShare = default(EntityRef<CapitalShare>);
			this._CashDisbursement = default(EntityRef<CashDisbursement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._CapitalShare.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisbursementID", DbType="BigInt NOT NULL")]
		public long DisbursementID
		{
			get
			{
				return this._DisbursementID;
			}
			set
			{
				if ((this._DisbursementID != value))
				{
					if (this._CashDisbursement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisbursementIDChanging(value);
					this.SendPropertyChanging();
					this._DisbursementID = value;
					this.SendPropertyChanged("DisbursementID");
					this.OnDisbursementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalShare_CapitalShareDisbursement", Storage="_CapitalShare", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public CapitalShare CapitalShare
		{
			get
			{
				return this._CapitalShare.Entity;
			}
			set
			{
				CapitalShare previousValue = this._CapitalShare.Entity;
				if (((previousValue != value) 
							|| (this._CapitalShare.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CapitalShare.Entity = null;
						previousValue.CapitalShareDisbursements.Remove(this);
					}
					this._CapitalShare.Entity = value;
					if ((value != null))
					{
						value.CapitalShareDisbursements.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("CapitalShare");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_CapitalShareDisbursement", Storage="_CashDisbursement", ThisKey="DisbursementID", OtherKey="DisbursementID", IsForeignKey=true)]
		public CashDisbursement CashDisbursement
		{
			get
			{
				return this._CashDisbursement.Entity;
			}
			set
			{
				CashDisbursement previousValue = this._CashDisbursement.Entity;
				if (((previousValue != value) 
							|| (this._CashDisbursement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashDisbursement.Entity = null;
						previousValue.CapitalShareDisbursements.Remove(this);
					}
					this._CashDisbursement.Entity = value;
					if ((value != null))
					{
						value.CapitalShareDisbursements.Add(this);
						this._DisbursementID = value.DisbursementID;
					}
					else
					{
						this._DisbursementID = default(long);
					}
					this.SendPropertyChanged("CashDisbursement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.CapitalShareReceipts")]
	public partial class CapitalShareReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _ReceiptID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CapitalShare> _CapitalShare;
		
		private EntityRef<CashReceipt> _CashReceipt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnReceiptIDChanging(long value);
    partial void OnReceiptIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public CapitalShareReceipt()
		{
			this._CapitalShare = default(EntityRef<CapitalShare>);
			this._CashReceipt = default(EntityRef<CashReceipt>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._CapitalShare.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="BigInt NOT NULL")]
		public long ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					if (this._CashReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalShare_CapitalShareReceipt", Storage="_CapitalShare", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public CapitalShare CapitalShare
		{
			get
			{
				return this._CapitalShare.Entity;
			}
			set
			{
				CapitalShare previousValue = this._CapitalShare.Entity;
				if (((previousValue != value) 
							|| (this._CapitalShare.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CapitalShare.Entity = null;
						previousValue.CapitalShareReceipts.Remove(this);
					}
					this._CapitalShare.Entity = value;
					if ((value != null))
					{
						value.CapitalShareReceipts.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("CapitalShare");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_CapitalShareReceipt", Storage="_CashReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsForeignKey=true)]
		public CashReceipt CashReceipt
		{
			get
			{
				return this._CashReceipt.Entity;
			}
			set
			{
				CashReceipt previousValue = this._CashReceipt.Entity;
				if (((previousValue != value) 
							|| (this._CashReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashReceipt.Entity = null;
						previousValue.CapitalShareReceipts.Remove(this);
					}
					this._CashReceipt.Entity = value;
					if ((value != null))
					{
						value.CapitalShareReceipts.Add(this);
						this._ReceiptID = value.ReceiptID;
					}
					else
					{
						this._ReceiptID = default(long);
					}
					this.SendPropertyChanged("CashReceipt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.SavingsDeposits")]
	public partial class SavingsDeposit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MemberID;
		
		private decimal _CurrentBalance;
		
		private EntitySet<SavingsDepositDisbursement> _SavingsDepositDisbursements;
		
		private EntitySet<SavingsDepositReceipt> _SavingsDepositReceipts;
		
		private EntitySet<SavingsDepositInterestAdjustment> _SavingsDepositInterestAdjustments;
		
		private EntitySet<SavingsDepositDividendAdjustment> _SavingsDepositDividendAdjustments;
		
		private EntitySet<SavingsDepositAdjustment> _SavingsDepositAdjustments;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnCurrentBalanceChanging(decimal value);
    partial void OnCurrentBalanceChanged();
    #endregion
		
		public SavingsDeposit()
		{
			this._SavingsDepositDisbursements = new EntitySet<SavingsDepositDisbursement>(new Action<SavingsDepositDisbursement>(this.attach_SavingsDepositDisbursements), new Action<SavingsDepositDisbursement>(this.detach_SavingsDepositDisbursements));
			this._SavingsDepositReceipts = new EntitySet<SavingsDepositReceipt>(new Action<SavingsDepositReceipt>(this.attach_SavingsDepositReceipts), new Action<SavingsDepositReceipt>(this.detach_SavingsDepositReceipts));
			this._SavingsDepositInterestAdjustments = new EntitySet<SavingsDepositInterestAdjustment>(new Action<SavingsDepositInterestAdjustment>(this.attach_SavingsDepositInterestAdjustments), new Action<SavingsDepositInterestAdjustment>(this.detach_SavingsDepositInterestAdjustments));
			this._SavingsDepositDividendAdjustments = new EntitySet<SavingsDepositDividendAdjustment>(new Action<SavingsDepositDividendAdjustment>(this.attach_SavingsDepositDividendAdjustments), new Action<SavingsDepositDividendAdjustment>(this.detach_SavingsDepositDividendAdjustments));
			this._SavingsDepositAdjustments = new EntitySet<SavingsDepositAdjustment>(new Action<SavingsDepositAdjustment>(this.attach_SavingsDepositAdjustments), new Action<SavingsDepositAdjustment>(this.detach_SavingsDepositAdjustments));
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentBalance", DbType="Money NOT NULL")]
		public decimal CurrentBalance
		{
			get
			{
				return this._CurrentBalance;
			}
			set
			{
				if ((this._CurrentBalance != value))
				{
					this.OnCurrentBalanceChanging(value);
					this.SendPropertyChanging();
					this._CurrentBalance = value;
					this.SendPropertyChanged("CurrentBalance");
					this.OnCurrentBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SavingsDeposit_SavingsDepositDisbursement", Storage="_SavingsDepositDisbursements", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<SavingsDepositDisbursement> SavingsDepositDisbursements
		{
			get
			{
				return this._SavingsDepositDisbursements;
			}
			set
			{
				this._SavingsDepositDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SavingsDeposit_SavingsDepositReceipt", Storage="_SavingsDepositReceipts", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<SavingsDepositReceipt> SavingsDepositReceipts
		{
			get
			{
				return this._SavingsDepositReceipts;
			}
			set
			{
				this._SavingsDepositReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SavingsDeposit_SavingsDepositInterestAdjustment", Storage="_SavingsDepositInterestAdjustments", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<SavingsDepositInterestAdjustment> SavingsDepositInterestAdjustments
		{
			get
			{
				return this._SavingsDepositInterestAdjustments;
			}
			set
			{
				this._SavingsDepositInterestAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SavingsDeposit_SavingsDepositDividendAdjustment", Storage="_SavingsDepositDividendAdjustments", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<SavingsDepositDividendAdjustment> SavingsDepositDividendAdjustments
		{
			get
			{
				return this._SavingsDepositDividendAdjustments;
			}
			set
			{
				this._SavingsDepositDividendAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SavingsDeposit_SavingsDepositAdjustment", Storage="_SavingsDepositAdjustments", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<SavingsDepositAdjustment> SavingsDepositAdjustments
		{
			get
			{
				return this._SavingsDepositAdjustments;
			}
			set
			{
				this._SavingsDepositAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_SavingsDeposit", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.SavingsDeposit = null;
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.SavingsDeposit = this;
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SavingsDepositDisbursements(SavingsDepositDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.SavingsDeposit = this;
		}
		
		private void detach_SavingsDepositDisbursements(SavingsDepositDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.SavingsDeposit = null;
		}
		
		private void attach_SavingsDepositReceipts(SavingsDepositReceipt entity)
		{
			this.SendPropertyChanging();
			entity.SavingsDeposit = this;
		}
		
		private void detach_SavingsDepositReceipts(SavingsDepositReceipt entity)
		{
			this.SendPropertyChanging();
			entity.SavingsDeposit = null;
		}
		
		private void attach_SavingsDepositInterestAdjustments(SavingsDepositInterestAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.SavingsDeposit = this;
		}
		
		private void detach_SavingsDepositInterestAdjustments(SavingsDepositInterestAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.SavingsDeposit = null;
		}
		
		private void attach_SavingsDepositDividendAdjustments(SavingsDepositDividendAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.SavingsDeposit = this;
		}
		
		private void detach_SavingsDepositDividendAdjustments(SavingsDepositDividendAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.SavingsDeposit = null;
		}
		
		private void attach_SavingsDepositAdjustments(SavingsDepositAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.SavingsDeposit = this;
		}
		
		private void detach_SavingsDepositAdjustments(SavingsDepositAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.SavingsDeposit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.SavingsDepositDisbursements")]
	public partial class SavingsDepositDisbursement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _DisbursementID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<SavingsDeposit> _SavingsDeposit;
		
		private EntityRef<CashDisbursement> _CashDisbursement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnDisbursementIDChanging(long value);
    partial void OnDisbursementIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public SavingsDepositDisbursement()
		{
			this._SavingsDeposit = default(EntityRef<SavingsDeposit>);
			this._CashDisbursement = default(EntityRef<CashDisbursement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._SavingsDeposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisbursementID", DbType="BigInt NOT NULL")]
		public long DisbursementID
		{
			get
			{
				return this._DisbursementID;
			}
			set
			{
				if ((this._DisbursementID != value))
				{
					if (this._CashDisbursement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisbursementIDChanging(value);
					this.SendPropertyChanging();
					this._DisbursementID = value;
					this.SendPropertyChanged("DisbursementID");
					this.OnDisbursementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SavingsDeposit_SavingsDepositDisbursement", Storage="_SavingsDeposit", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public SavingsDeposit SavingsDeposit
		{
			get
			{
				return this._SavingsDeposit.Entity;
			}
			set
			{
				SavingsDeposit previousValue = this._SavingsDeposit.Entity;
				if (((previousValue != value) 
							|| (this._SavingsDeposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SavingsDeposit.Entity = null;
						previousValue.SavingsDepositDisbursements.Remove(this);
					}
					this._SavingsDeposit.Entity = value;
					if ((value != null))
					{
						value.SavingsDepositDisbursements.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("SavingsDeposit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_SavingsDepositDisbursement", Storage="_CashDisbursement", ThisKey="DisbursementID", OtherKey="DisbursementID", IsForeignKey=true)]
		public CashDisbursement CashDisbursement
		{
			get
			{
				return this._CashDisbursement.Entity;
			}
			set
			{
				CashDisbursement previousValue = this._CashDisbursement.Entity;
				if (((previousValue != value) 
							|| (this._CashDisbursement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashDisbursement.Entity = null;
						previousValue.SavingsDepositDisbursements.Remove(this);
					}
					this._CashDisbursement.Entity = value;
					if ((value != null))
					{
						value.SavingsDepositDisbursements.Add(this);
						this._DisbursementID = value.DisbursementID;
					}
					else
					{
						this._DisbursementID = default(long);
					}
					this.SendPropertyChanged("CashDisbursement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.SavingsDepositReceipts")]
	public partial class SavingsDepositReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _ReceiptID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<SavingsDeposit> _SavingsDeposit;
		
		private EntityRef<CashReceipt> _CashReceipt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnReceiptIDChanging(long value);
    partial void OnReceiptIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public SavingsDepositReceipt()
		{
			this._SavingsDeposit = default(EntityRef<SavingsDeposit>);
			this._CashReceipt = default(EntityRef<CashReceipt>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._SavingsDeposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="BigInt NOT NULL")]
		public long ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					if (this._CashReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SavingsDeposit_SavingsDepositReceipt", Storage="_SavingsDeposit", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public SavingsDeposit SavingsDeposit
		{
			get
			{
				return this._SavingsDeposit.Entity;
			}
			set
			{
				SavingsDeposit previousValue = this._SavingsDeposit.Entity;
				if (((previousValue != value) 
							|| (this._SavingsDeposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SavingsDeposit.Entity = null;
						previousValue.SavingsDepositReceipts.Remove(this);
					}
					this._SavingsDeposit.Entity = value;
					if ((value != null))
					{
						value.SavingsDepositReceipts.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("SavingsDeposit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_SavingsDepositReceipt", Storage="_CashReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsForeignKey=true)]
		public CashReceipt CashReceipt
		{
			get
			{
				return this._CashReceipt.Entity;
			}
			set
			{
				CashReceipt previousValue = this._CashReceipt.Entity;
				if (((previousValue != value) 
							|| (this._CashReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashReceipt.Entity = null;
						previousValue.SavingsDepositReceipts.Remove(this);
					}
					this._CashReceipt.Entity = value;
					if ((value != null))
					{
						value.SavingsDepositReceipts.Add(this);
						this._ReceiptID = value.ReceiptID;
					}
					else
					{
						this._ReceiptID = default(long);
					}
					this.SendPropertyChanged("CashReceipt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MembershipFeeReceipts")]
	public partial class MembershipFeeReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ReceiptID;
		
		private decimal _Amount;
		
		private EntityRef<CashReceipt> _CashReceipt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiptIDChanging(long value);
    partial void OnReceiptIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    #endregion
		
		public MembershipFeeReceipt()
		{
			this._CashReceipt = default(EntityRef<CashReceipt>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					if (this._CashReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_MembershipFeeReceipt", Storage="_CashReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsForeignKey=true)]
		public CashReceipt CashReceipt
		{
			get
			{
				return this._CashReceipt.Entity;
			}
			set
			{
				CashReceipt previousValue = this._CashReceipt.Entity;
				if (((previousValue != value) 
							|| (this._CashReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashReceipt.Entity = null;
						previousValue.MembershipFeeReceipt = null;
					}
					this._CashReceipt.Entity = value;
					if ((value != null))
					{
						value.MembershipFeeReceipt = this;
						this._ReceiptID = value.ReceiptID;
					}
					else
					{
						this._ReceiptID = default(long);
					}
					this.SendPropertyChanged("CashReceipt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[User].Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserID;
		
		private string _UserPassword;
		
		private string _UserCategoryID;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private EntitySet<CashDisbursement> _CashDisbursements;
		
		private EntitySet<CashReceipt> _CashReceipts;
		
		private EntitySet<Adjustment> _Adjustments;
		
		private EntitySet<UsersRole> _UsersRoles;
		
		private EntityRef<UserCategory> _UserCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnUserCategoryIDChanging(string value);
    partial void OnUserCategoryIDChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    #endregion
		
		public User()
		{
			this._CashDisbursements = new EntitySet<CashDisbursement>(new Action<CashDisbursement>(this.attach_CashDisbursements), new Action<CashDisbursement>(this.detach_CashDisbursements));
			this._CashReceipts = new EntitySet<CashReceipt>(new Action<CashReceipt>(this.attach_CashReceipts), new Action<CashReceipt>(this.detach_CashReceipts));
			this._Adjustments = new EntitySet<Adjustment>(new Action<Adjustment>(this.attach_Adjustments), new Action<Adjustment>(this.detach_Adjustments));
			this._UsersRoles = new EntitySet<UsersRole>(new Action<UsersRole>(this.attach_UsersRoles), new Action<UsersRole>(this.detach_UsersRoles));
			this._UserCategory = default(EntityRef<UserCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCategoryID", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string UserCategoryID
		{
			get
			{
				return this._UserCategoryID;
			}
			set
			{
				if ((this._UserCategoryID != value))
				{
					if (this._UserCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._UserCategoryID = value;
					this.SendPropertyChanged("UserCategoryID");
					this.OnUserCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(30)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CashDisbursement", Storage="_CashDisbursements", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<CashDisbursement> CashDisbursements
		{
			get
			{
				return this._CashDisbursements;
			}
			set
			{
				this._CashDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CashReceipt", Storage="_CashReceipts", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<CashReceipt> CashReceipts
		{
			get
			{
				return this._CashReceipts;
			}
			set
			{
				this._CashReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Adjustment", Storage="_Adjustments", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Adjustment> Adjustments
		{
			get
			{
				return this._Adjustments;
			}
			set
			{
				this._Adjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersRole", Storage="_UsersRoles", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UsersRole> UsersRoles
		{
			get
			{
				return this._UsersRoles;
			}
			set
			{
				this._UsersRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserCategory_User", Storage="_UserCategory", ThisKey="UserCategoryID", OtherKey="UserCategoryID", IsForeignKey=true)]
		public UserCategory UserCategory
		{
			get
			{
				return this._UserCategory.Entity;
			}
			set
			{
				UserCategory previousValue = this._UserCategory.Entity;
				if (((previousValue != value) 
							|| (this._UserCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserCategory.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserCategory.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UserCategoryID = value.UserCategoryID;
					}
					else
					{
						this._UserCategoryID = default(string);
					}
					this.SendPropertyChanged("UserCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CashDisbursements(CashDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CashDisbursements(CashDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CashReceipts(CashReceipt entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CashReceipts(CashReceipt entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Adjustments(Adjustment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Adjustments(Adjustment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UsersRoles(UsersRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersRoles(UsersRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Lookup.UserCategories")]
	public partial class UserCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserCategoryID;
		
		private string _UserCategoryName;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserCategoryIDChanging(string value);
    partial void OnUserCategoryIDChanged();
    partial void OnUserCategoryNameChanging(string value);
    partial void OnUserCategoryNameChanged();
    #endregion
		
		public UserCategory()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCategoryID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserCategoryID
		{
			get
			{
				return this._UserCategoryID;
			}
			set
			{
				if ((this._UserCategoryID != value))
				{
					this.OnUserCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._UserCategoryID = value;
					this.SendPropertyChanged("UserCategoryID");
					this.OnUserCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCategoryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserCategoryName
		{
			get
			{
				return this._UserCategoryName;
			}
			set
			{
				if ((this._UserCategoryName != value))
				{
					this.OnUserCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._UserCategoryName = value;
					this.SendPropertyChanged("UserCategoryName");
					this.OnUserCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserCategory_User", Storage="_Users", ThisKey="UserCategoryID", OtherKey="UserCategoryID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserCategory = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Lookup.SexTypes")]
	public partial class SexType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private char _SexTypeID;
		
		private string _SexTypeName;
		
		private EntitySet<Member> _Members;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSexTypeIDChanging(char value);
    partial void OnSexTypeIDChanged();
    partial void OnSexTypeNameChanging(string value);
    partial void OnSexTypeNameChanged();
    #endregion
		
		public SexType()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SexTypeID", DbType="Char(1) NOT NULL", IsPrimaryKey=true)]
		public char SexTypeID
		{
			get
			{
				return this._SexTypeID;
			}
			set
			{
				if ((this._SexTypeID != value))
				{
					this.OnSexTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SexTypeID = value;
					this.SendPropertyChanged("SexTypeID");
					this.OnSexTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SexTypeName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SexTypeName
		{
			get
			{
				return this._SexTypeName;
			}
			set
			{
				if ((this._SexTypeName != value))
				{
					this.OnSexTypeNameChanging(value);
					this.SendPropertyChanging();
					this._SexTypeName = value;
					this.SendPropertyChanged("SexTypeName");
					this.OnSexTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SexType_Member", Storage="_Members", ThisKey="SexTypeID", OtherKey="SexTypeID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.SexType = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.SexType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Lookup.LoanDeductionTypes")]
	public partial class LoanDeductionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoanDeductionTypeID;
		
		private string _LoanDeductionTypeName;
		
		private EntityRef<LoanCollectionFeeRate> _LoanCollectionFeeRate;
		
		private EntityRef<LoanGuaranteeFundRate> _LoanGuaranteeFundRate;
		
		private EntitySet<LoanInterestRate> _LoanInterestRates;
		
		private EntityRef<LoanServiceFeeRate> _LoanServiceFeeRate;
		
		private EntityRef<ApplianceLoanServiceRate> _ApplianceLoanServiceRate;
		
		private EntityRef<EasyLoanServiceRate> _EasyLoanServiceRate;
		
		private EntityRef<EmergencyLoanServiceRate> _EmergencyLoanServiceRate;
		
		private EntityRef<LoanCapitalBuildupRate> _LoanCapitalBuildupRate;
		
		private EntitySet<Loan> _Loans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanDeductionTypeIDChanging(string value);
    partial void OnLoanDeductionTypeIDChanged();
    partial void OnLoanDeductionTypeNameChanging(string value);
    partial void OnLoanDeductionTypeNameChanged();
    #endregion
		
		public LoanDeductionType()
		{
			this._LoanCollectionFeeRate = default(EntityRef<LoanCollectionFeeRate>);
			this._LoanGuaranteeFundRate = default(EntityRef<LoanGuaranteeFundRate>);
			this._LoanInterestRates = new EntitySet<LoanInterestRate>(new Action<LoanInterestRate>(this.attach_LoanInterestRates), new Action<LoanInterestRate>(this.detach_LoanInterestRates));
			this._LoanServiceFeeRate = default(EntityRef<LoanServiceFeeRate>);
			this._ApplianceLoanServiceRate = default(EntityRef<ApplianceLoanServiceRate>);
			this._EasyLoanServiceRate = default(EntityRef<EasyLoanServiceRate>);
			this._EmergencyLoanServiceRate = default(EntityRef<EmergencyLoanServiceRate>);
			this._LoanCapitalBuildupRate = default(EntityRef<LoanCapitalBuildupRate>);
			this._Loans = new EntitySet<Loan>(new Action<Loan>(this.attach_Loans), new Action<Loan>(this.detach_Loans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDeductionTypeID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoanDeductionTypeID
		{
			get
			{
				return this._LoanDeductionTypeID;
			}
			set
			{
				if ((this._LoanDeductionTypeID != value))
				{
					this.OnLoanDeductionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LoanDeductionTypeID = value;
					this.SendPropertyChanged("LoanDeductionTypeID");
					this.OnLoanDeductionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDeductionTypeName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string LoanDeductionTypeName
		{
			get
			{
				return this._LoanDeductionTypeName;
			}
			set
			{
				if ((this._LoanDeductionTypeName != value))
				{
					this.OnLoanDeductionTypeNameChanging(value);
					this.SendPropertyChanging();
					this._LoanDeductionTypeName = value;
					this.SendPropertyChanged("LoanDeductionTypeName");
					this.OnLoanDeductionTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_LoanCollectionFeeRate", Storage="_LoanCollectionFeeRate", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsUnique=true, IsForeignKey=false)]
		public LoanCollectionFeeRate LoanCollectionFeeRate
		{
			get
			{
				return this._LoanCollectionFeeRate.Entity;
			}
			set
			{
				LoanCollectionFeeRate previousValue = this._LoanCollectionFeeRate.Entity;
				if (((previousValue != value) 
							|| (this._LoanCollectionFeeRate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanCollectionFeeRate.Entity = null;
						previousValue.LoanDeductionType = null;
					}
					this._LoanCollectionFeeRate.Entity = value;
					if ((value != null))
					{
						value.LoanDeductionType = this;
					}
					this.SendPropertyChanged("LoanCollectionFeeRate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_LoanGuaranteeFundRate", Storage="_LoanGuaranteeFundRate", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsUnique=true, IsForeignKey=false)]
		public LoanGuaranteeFundRate LoanGuaranteeFundRate
		{
			get
			{
				return this._LoanGuaranteeFundRate.Entity;
			}
			set
			{
				LoanGuaranteeFundRate previousValue = this._LoanGuaranteeFundRate.Entity;
				if (((previousValue != value) 
							|| (this._LoanGuaranteeFundRate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanGuaranteeFundRate.Entity = null;
						previousValue.LoanDeductionType = null;
					}
					this._LoanGuaranteeFundRate.Entity = value;
					if ((value != null))
					{
						value.LoanDeductionType = this;
					}
					this.SendPropertyChanged("LoanGuaranteeFundRate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_LoanInterestRate", Storage="_LoanInterestRates", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID")]
		public EntitySet<LoanInterestRate> LoanInterestRates
		{
			get
			{
				return this._LoanInterestRates;
			}
			set
			{
				this._LoanInterestRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_LoanServiceFeeRate", Storage="_LoanServiceFeeRate", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsUnique=true, IsForeignKey=false)]
		public LoanServiceFeeRate LoanServiceFeeRate
		{
			get
			{
				return this._LoanServiceFeeRate.Entity;
			}
			set
			{
				LoanServiceFeeRate previousValue = this._LoanServiceFeeRate.Entity;
				if (((previousValue != value) 
							|| (this._LoanServiceFeeRate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanServiceFeeRate.Entity = null;
						previousValue.LoanDeductionType = null;
					}
					this._LoanServiceFeeRate.Entity = value;
					if ((value != null))
					{
						value.LoanDeductionType = this;
					}
					this.SendPropertyChanged("LoanServiceFeeRate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_ApplianceLoanServiceRate", Storage="_ApplianceLoanServiceRate", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsUnique=true, IsForeignKey=false)]
		public ApplianceLoanServiceRate ApplianceLoanServiceRate
		{
			get
			{
				return this._ApplianceLoanServiceRate.Entity;
			}
			set
			{
				ApplianceLoanServiceRate previousValue = this._ApplianceLoanServiceRate.Entity;
				if (((previousValue != value) 
							|| (this._ApplianceLoanServiceRate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplianceLoanServiceRate.Entity = null;
						previousValue.LoanDeductionType = null;
					}
					this._ApplianceLoanServiceRate.Entity = value;
					if ((value != null))
					{
						value.LoanDeductionType = this;
					}
					this.SendPropertyChanged("ApplianceLoanServiceRate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_EasyLoanServiceRate", Storage="_EasyLoanServiceRate", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsUnique=true, IsForeignKey=false)]
		public EasyLoanServiceRate EasyLoanServiceRate
		{
			get
			{
				return this._EasyLoanServiceRate.Entity;
			}
			set
			{
				EasyLoanServiceRate previousValue = this._EasyLoanServiceRate.Entity;
				if (((previousValue != value) 
							|| (this._EasyLoanServiceRate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EasyLoanServiceRate.Entity = null;
						previousValue.LoanDeductionType = null;
					}
					this._EasyLoanServiceRate.Entity = value;
					if ((value != null))
					{
						value.LoanDeductionType = this;
					}
					this.SendPropertyChanged("EasyLoanServiceRate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_EmergencyLoanServiceRate", Storage="_EmergencyLoanServiceRate", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsUnique=true, IsForeignKey=false)]
		public EmergencyLoanServiceRate EmergencyLoanServiceRate
		{
			get
			{
				return this._EmergencyLoanServiceRate.Entity;
			}
			set
			{
				EmergencyLoanServiceRate previousValue = this._EmergencyLoanServiceRate.Entity;
				if (((previousValue != value) 
							|| (this._EmergencyLoanServiceRate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmergencyLoanServiceRate.Entity = null;
						previousValue.LoanDeductionType = null;
					}
					this._EmergencyLoanServiceRate.Entity = value;
					if ((value != null))
					{
						value.LoanDeductionType = this;
					}
					this.SendPropertyChanged("EmergencyLoanServiceRate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_LoanCapitalBuildupRate", Storage="_LoanCapitalBuildupRate", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsUnique=true, IsForeignKey=false)]
		public LoanCapitalBuildupRate LoanCapitalBuildupRate
		{
			get
			{
				return this._LoanCapitalBuildupRate.Entity;
			}
			set
			{
				LoanCapitalBuildupRate previousValue = this._LoanCapitalBuildupRate.Entity;
				if (((previousValue != value) 
							|| (this._LoanCapitalBuildupRate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanCapitalBuildupRate.Entity = null;
						previousValue.LoanDeductionType = null;
					}
					this._LoanCapitalBuildupRate.Entity = value;
					if ((value != null))
					{
						value.LoanDeductionType = this;
					}
					this.SendPropertyChanged("LoanCapitalBuildupRate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_Loan", Storage="_Loans", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID")]
		public EntitySet<Loan> Loans
		{
			get
			{
				return this._Loans;
			}
			set
			{
				this._Loans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LoanInterestRates(LoanInterestRate entity)
		{
			this.SendPropertyChanging();
			entity.LoanDeductionType = this;
		}
		
		private void detach_LoanInterestRates(LoanInterestRate entity)
		{
			this.SendPropertyChanging();
			entity.LoanDeductionType = null;
		}
		
		private void attach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.LoanDeductionType = this;
		}
		
		private void detach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.LoanDeductionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.LoanCollectionFeeRates")]
	public partial class LoanCollectionFeeRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoanDeductionTypeID;
		
		private decimal _OneToFiveMonths;
		
		private decimal _SixToTenMonths;
		
		private EntityRef<LoanDeductionType> _LoanDeductionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanDeductionTypeIDChanging(string value);
    partial void OnLoanDeductionTypeIDChanged();
    partial void OnOneToFiveMonthsChanging(decimal value);
    partial void OnOneToFiveMonthsChanged();
    partial void OnSixToTenMonthsChanging(decimal value);
    partial void OnSixToTenMonthsChanged();
    #endregion
		
		public LoanCollectionFeeRate()
		{
			this._LoanDeductionType = default(EntityRef<LoanDeductionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDeductionTypeID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoanDeductionTypeID
		{
			get
			{
				return this._LoanDeductionTypeID;
			}
			set
			{
				if ((this._LoanDeductionTypeID != value))
				{
					if (this._LoanDeductionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanDeductionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LoanDeductionTypeID = value;
					this.SendPropertyChanged("LoanDeductionTypeID");
					this.OnLoanDeductionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OneToFiveMonths", DbType="Decimal(4,2) NOT NULL")]
		public decimal OneToFiveMonths
		{
			get
			{
				return this._OneToFiveMonths;
			}
			set
			{
				if ((this._OneToFiveMonths != value))
				{
					this.OnOneToFiveMonthsChanging(value);
					this.SendPropertyChanging();
					this._OneToFiveMonths = value;
					this.SendPropertyChanged("OneToFiveMonths");
					this.OnOneToFiveMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SixToTenMonths", DbType="Decimal(4,2) NOT NULL")]
		public decimal SixToTenMonths
		{
			get
			{
				return this._SixToTenMonths;
			}
			set
			{
				if ((this._SixToTenMonths != value))
				{
					this.OnSixToTenMonthsChanging(value);
					this.SendPropertyChanging();
					this._SixToTenMonths = value;
					this.SendPropertyChanged("SixToTenMonths");
					this.OnSixToTenMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_LoanCollectionFeeRate", Storage="_LoanDeductionType", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsForeignKey=true)]
		public LoanDeductionType LoanDeductionType
		{
			get
			{
				return this._LoanDeductionType.Entity;
			}
			set
			{
				LoanDeductionType previousValue = this._LoanDeductionType.Entity;
				if (((previousValue != value) 
							|| (this._LoanDeductionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanDeductionType.Entity = null;
						previousValue.LoanCollectionFeeRate = null;
					}
					this._LoanDeductionType.Entity = value;
					if ((value != null))
					{
						value.LoanCollectionFeeRate = this;
						this._LoanDeductionTypeID = value.LoanDeductionTypeID;
					}
					else
					{
						this._LoanDeductionTypeID = default(string);
					}
					this.SendPropertyChanged("LoanDeductionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.LoanGuaranteeFundRates")]
	public partial class LoanGuaranteeFundRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoanDeductionTypeID;
		
		private decimal _OneToFiveMonths;
		
		private decimal _SixToTenMonths;
		
		private EntityRef<LoanDeductionType> _LoanDeductionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanDeductionTypeIDChanging(string value);
    partial void OnLoanDeductionTypeIDChanged();
    partial void OnOneToFiveMonthsChanging(decimal value);
    partial void OnOneToFiveMonthsChanged();
    partial void OnSixToTenMonthsChanging(decimal value);
    partial void OnSixToTenMonthsChanged();
    #endregion
		
		public LoanGuaranteeFundRate()
		{
			this._LoanDeductionType = default(EntityRef<LoanDeductionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDeductionTypeID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoanDeductionTypeID
		{
			get
			{
				return this._LoanDeductionTypeID;
			}
			set
			{
				if ((this._LoanDeductionTypeID != value))
				{
					if (this._LoanDeductionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanDeductionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LoanDeductionTypeID = value;
					this.SendPropertyChanged("LoanDeductionTypeID");
					this.OnLoanDeductionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OneToFiveMonths", DbType="Decimal(4,3) NOT NULL")]
		public decimal OneToFiveMonths
		{
			get
			{
				return this._OneToFiveMonths;
			}
			set
			{
				if ((this._OneToFiveMonths != value))
				{
					this.OnOneToFiveMonthsChanging(value);
					this.SendPropertyChanging();
					this._OneToFiveMonths = value;
					this.SendPropertyChanged("OneToFiveMonths");
					this.OnOneToFiveMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SixToTenMonths", DbType="Decimal(4,3) NOT NULL")]
		public decimal SixToTenMonths
		{
			get
			{
				return this._SixToTenMonths;
			}
			set
			{
				if ((this._SixToTenMonths != value))
				{
					this.OnSixToTenMonthsChanging(value);
					this.SendPropertyChanging();
					this._SixToTenMonths = value;
					this.SendPropertyChanged("SixToTenMonths");
					this.OnSixToTenMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_LoanGuaranteeFundRate", Storage="_LoanDeductionType", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsForeignKey=true)]
		public LoanDeductionType LoanDeductionType
		{
			get
			{
				return this._LoanDeductionType.Entity;
			}
			set
			{
				LoanDeductionType previousValue = this._LoanDeductionType.Entity;
				if (((previousValue != value) 
							|| (this._LoanDeductionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanDeductionType.Entity = null;
						previousValue.LoanGuaranteeFundRate = null;
					}
					this._LoanDeductionType.Entity = value;
					if ((value != null))
					{
						value.LoanGuaranteeFundRate = this;
						this._LoanDeductionTypeID = value.LoanDeductionTypeID;
					}
					else
					{
						this._LoanDeductionTypeID = default(string);
					}
					this.SendPropertyChanged("LoanDeductionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.LoanInterestRates")]
	public partial class LoanInterestRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PaymentModeID;
		
		private string _LoanDeductionTypeID;
		
		private decimal _InterestRate;
		
		private EntityRef<LoanDeductionType> _LoanDeductionType;
		
		private EntityRef<PaymentMode> _PaymentMode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentModeIDChanging(string value);
    partial void OnPaymentModeIDChanged();
    partial void OnLoanDeductionTypeIDChanging(string value);
    partial void OnLoanDeductionTypeIDChanged();
    partial void OnInterestRateChanging(decimal value);
    partial void OnInterestRateChanged();
    #endregion
		
		public LoanInterestRate()
		{
			this._LoanDeductionType = default(EntityRef<LoanDeductionType>);
			this._PaymentMode = default(EntityRef<PaymentMode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentModeID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PaymentModeID
		{
			get
			{
				return this._PaymentModeID;
			}
			set
			{
				if ((this._PaymentModeID != value))
				{
					if (this._PaymentMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentModeIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentModeID = value;
					this.SendPropertyChanged("PaymentModeID");
					this.OnPaymentModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDeductionTypeID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoanDeductionTypeID
		{
			get
			{
				return this._LoanDeductionTypeID;
			}
			set
			{
				if ((this._LoanDeductionTypeID != value))
				{
					if (this._LoanDeductionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanDeductionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LoanDeductionTypeID = value;
					this.SendPropertyChanged("LoanDeductionTypeID");
					this.OnLoanDeductionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestRate", DbType="Decimal(4,2) NOT NULL")]
		public decimal InterestRate
		{
			get
			{
				return this._InterestRate;
			}
			set
			{
				if ((this._InterestRate != value))
				{
					this.OnInterestRateChanging(value);
					this.SendPropertyChanging();
					this._InterestRate = value;
					this.SendPropertyChanged("InterestRate");
					this.OnInterestRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_LoanInterestRate", Storage="_LoanDeductionType", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsForeignKey=true)]
		public LoanDeductionType LoanDeductionType
		{
			get
			{
				return this._LoanDeductionType.Entity;
			}
			set
			{
				LoanDeductionType previousValue = this._LoanDeductionType.Entity;
				if (((previousValue != value) 
							|| (this._LoanDeductionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanDeductionType.Entity = null;
						previousValue.LoanInterestRates.Remove(this);
					}
					this._LoanDeductionType.Entity = value;
					if ((value != null))
					{
						value.LoanInterestRates.Add(this);
						this._LoanDeductionTypeID = value.LoanDeductionTypeID;
					}
					else
					{
						this._LoanDeductionTypeID = default(string);
					}
					this.SendPropertyChanged("LoanDeductionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMode_LoanInterestRate", Storage="_PaymentMode", ThisKey="PaymentModeID", OtherKey="PaymentModeID", IsForeignKey=true)]
		public PaymentMode PaymentMode
		{
			get
			{
				return this._PaymentMode.Entity;
			}
			set
			{
				PaymentMode previousValue = this._PaymentMode.Entity;
				if (((previousValue != value) 
							|| (this._PaymentMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentMode.Entity = null;
						previousValue.LoanInterestRates.Remove(this);
					}
					this._PaymentMode.Entity = value;
					if ((value != null))
					{
						value.LoanInterestRates.Add(this);
						this._PaymentModeID = value.PaymentModeID;
					}
					else
					{
						this._PaymentModeID = default(string);
					}
					this.SendPropertyChanged("PaymentMode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.LoanServiceFeeRates")]
	public partial class LoanServiceFeeRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoanDeductionTypeID;
		
		private decimal _OneToFiveMonths;
		
		private decimal _SixToTenMonths;
		
		private EntityRef<LoanDeductionType> _LoanDeductionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanDeductionTypeIDChanging(string value);
    partial void OnLoanDeductionTypeIDChanged();
    partial void OnOneToFiveMonthsChanging(decimal value);
    partial void OnOneToFiveMonthsChanged();
    partial void OnSixToTenMonthsChanging(decimal value);
    partial void OnSixToTenMonthsChanged();
    #endregion
		
		public LoanServiceFeeRate()
		{
			this._LoanDeductionType = default(EntityRef<LoanDeductionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDeductionTypeID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoanDeductionTypeID
		{
			get
			{
				return this._LoanDeductionTypeID;
			}
			set
			{
				if ((this._LoanDeductionTypeID != value))
				{
					if (this._LoanDeductionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanDeductionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LoanDeductionTypeID = value;
					this.SendPropertyChanged("LoanDeductionTypeID");
					this.OnLoanDeductionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OneToFiveMonths", DbType="Decimal(4,2) NOT NULL")]
		public decimal OneToFiveMonths
		{
			get
			{
				return this._OneToFiveMonths;
			}
			set
			{
				if ((this._OneToFiveMonths != value))
				{
					this.OnOneToFiveMonthsChanging(value);
					this.SendPropertyChanging();
					this._OneToFiveMonths = value;
					this.SendPropertyChanged("OneToFiveMonths");
					this.OnOneToFiveMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SixToTenMonths", DbType="Decimal(4,2) NOT NULL")]
		public decimal SixToTenMonths
		{
			get
			{
				return this._SixToTenMonths;
			}
			set
			{
				if ((this._SixToTenMonths != value))
				{
					this.OnSixToTenMonthsChanging(value);
					this.SendPropertyChanging();
					this._SixToTenMonths = value;
					this.SendPropertyChanged("SixToTenMonths");
					this.OnSixToTenMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_LoanServiceFeeRate", Storage="_LoanDeductionType", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsForeignKey=true)]
		public LoanDeductionType LoanDeductionType
		{
			get
			{
				return this._LoanDeductionType.Entity;
			}
			set
			{
				LoanDeductionType previousValue = this._LoanDeductionType.Entity;
				if (((previousValue != value) 
							|| (this._LoanDeductionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanDeductionType.Entity = null;
						previousValue.LoanServiceFeeRate = null;
					}
					this._LoanDeductionType.Entity = value;
					if ((value != null))
					{
						value.LoanServiceFeeRate = this;
						this._LoanDeductionTypeID = value.LoanDeductionTypeID;
					}
					else
					{
						this._LoanDeductionTypeID = default(string);
					}
					this.SendPropertyChanged("LoanDeductionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.ApplianceLoanServiceRates")]
	public partial class ApplianceLoanServiceRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoanDeductionTypeID;
		
		private decimal _MaximumAmount;
		
		private decimal _ServiceFee;
		
		private decimal _CollectionFee;
		
		private decimal _CapitalBuildup;
		
		private decimal _Interest;
		
		private EntityRef<LoanDeductionType> _LoanDeductionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanDeductionTypeIDChanging(string value);
    partial void OnLoanDeductionTypeIDChanged();
    partial void OnMaximumAmountChanging(decimal value);
    partial void OnMaximumAmountChanged();
    partial void OnServiceFeeChanging(decimal value);
    partial void OnServiceFeeChanged();
    partial void OnCollectionFeeChanging(decimal value);
    partial void OnCollectionFeeChanged();
    partial void OnCapitalBuildupChanging(decimal value);
    partial void OnCapitalBuildupChanged();
    partial void OnInterestChanging(decimal value);
    partial void OnInterestChanged();
    #endregion
		
		public ApplianceLoanServiceRate()
		{
			this._LoanDeductionType = default(EntityRef<LoanDeductionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDeductionTypeID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoanDeductionTypeID
		{
			get
			{
				return this._LoanDeductionTypeID;
			}
			set
			{
				if ((this._LoanDeductionTypeID != value))
				{
					if (this._LoanDeductionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanDeductionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LoanDeductionTypeID = value;
					this.SendPropertyChanged("LoanDeductionTypeID");
					this.OnLoanDeductionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaximumAmount", DbType="Money NOT NULL")]
		public decimal MaximumAmount
		{
			get
			{
				return this._MaximumAmount;
			}
			set
			{
				if ((this._MaximumAmount != value))
				{
					this.OnMaximumAmountChanging(value);
					this.SendPropertyChanging();
					this._MaximumAmount = value;
					this.SendPropertyChanged("MaximumAmount");
					this.OnMaximumAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceFee", DbType="Money NOT NULL")]
		public decimal ServiceFee
		{
			get
			{
				return this._ServiceFee;
			}
			set
			{
				if ((this._ServiceFee != value))
				{
					this.OnServiceFeeChanging(value);
					this.SendPropertyChanging();
					this._ServiceFee = value;
					this.SendPropertyChanged("ServiceFee");
					this.OnServiceFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionFee", DbType="Money NOT NULL")]
		public decimal CollectionFee
		{
			get
			{
				return this._CollectionFee;
			}
			set
			{
				if ((this._CollectionFee != value))
				{
					this.OnCollectionFeeChanging(value);
					this.SendPropertyChanging();
					this._CollectionFee = value;
					this.SendPropertyChanged("CollectionFee");
					this.OnCollectionFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapitalBuildup", DbType="Money NOT NULL")]
		public decimal CapitalBuildup
		{
			get
			{
				return this._CapitalBuildup;
			}
			set
			{
				if ((this._CapitalBuildup != value))
				{
					this.OnCapitalBuildupChanging(value);
					this.SendPropertyChanging();
					this._CapitalBuildup = value;
					this.SendPropertyChanged("CapitalBuildup");
					this.OnCapitalBuildupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interest", DbType="Money NOT NULL")]
		public decimal Interest
		{
			get
			{
				return this._Interest;
			}
			set
			{
				if ((this._Interest != value))
				{
					this.OnInterestChanging(value);
					this.SendPropertyChanging();
					this._Interest = value;
					this.SendPropertyChanged("Interest");
					this.OnInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_ApplianceLoanServiceRate", Storage="_LoanDeductionType", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsForeignKey=true)]
		public LoanDeductionType LoanDeductionType
		{
			get
			{
				return this._LoanDeductionType.Entity;
			}
			set
			{
				LoanDeductionType previousValue = this._LoanDeductionType.Entity;
				if (((previousValue != value) 
							|| (this._LoanDeductionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanDeductionType.Entity = null;
						previousValue.ApplianceLoanServiceRate = null;
					}
					this._LoanDeductionType.Entity = value;
					if ((value != null))
					{
						value.ApplianceLoanServiceRate = this;
						this._LoanDeductionTypeID = value.LoanDeductionTypeID;
					}
					else
					{
						this._LoanDeductionTypeID = default(string);
					}
					this.SendPropertyChanged("LoanDeductionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.EasyLoanServiceRates")]
	public partial class EasyLoanServiceRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoanDeductionTypeID;
		
		private decimal _MaximumAmount;
		
		private decimal _ServiceFee;
		
		private decimal _CollectionFee;
		
		private decimal _CapitalBuildup;
		
		private decimal _Interest;
		
		private EntityRef<LoanDeductionType> _LoanDeductionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanDeductionTypeIDChanging(string value);
    partial void OnLoanDeductionTypeIDChanged();
    partial void OnMaximumAmountChanging(decimal value);
    partial void OnMaximumAmountChanged();
    partial void OnServiceFeeChanging(decimal value);
    partial void OnServiceFeeChanged();
    partial void OnCollectionFeeChanging(decimal value);
    partial void OnCollectionFeeChanged();
    partial void OnCapitalBuildupChanging(decimal value);
    partial void OnCapitalBuildupChanged();
    partial void OnInterestChanging(decimal value);
    partial void OnInterestChanged();
    #endregion
		
		public EasyLoanServiceRate()
		{
			this._LoanDeductionType = default(EntityRef<LoanDeductionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDeductionTypeID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoanDeductionTypeID
		{
			get
			{
				return this._LoanDeductionTypeID;
			}
			set
			{
				if ((this._LoanDeductionTypeID != value))
				{
					if (this._LoanDeductionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanDeductionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LoanDeductionTypeID = value;
					this.SendPropertyChanged("LoanDeductionTypeID");
					this.OnLoanDeductionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaximumAmount", DbType="Money NOT NULL")]
		public decimal MaximumAmount
		{
			get
			{
				return this._MaximumAmount;
			}
			set
			{
				if ((this._MaximumAmount != value))
				{
					this.OnMaximumAmountChanging(value);
					this.SendPropertyChanging();
					this._MaximumAmount = value;
					this.SendPropertyChanged("MaximumAmount");
					this.OnMaximumAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceFee", DbType="Money NOT NULL")]
		public decimal ServiceFee
		{
			get
			{
				return this._ServiceFee;
			}
			set
			{
				if ((this._ServiceFee != value))
				{
					this.OnServiceFeeChanging(value);
					this.SendPropertyChanging();
					this._ServiceFee = value;
					this.SendPropertyChanged("ServiceFee");
					this.OnServiceFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionFee", DbType="Money NOT NULL")]
		public decimal CollectionFee
		{
			get
			{
				return this._CollectionFee;
			}
			set
			{
				if ((this._CollectionFee != value))
				{
					this.OnCollectionFeeChanging(value);
					this.SendPropertyChanging();
					this._CollectionFee = value;
					this.SendPropertyChanged("CollectionFee");
					this.OnCollectionFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapitalBuildup", DbType="Money NOT NULL")]
		public decimal CapitalBuildup
		{
			get
			{
				return this._CapitalBuildup;
			}
			set
			{
				if ((this._CapitalBuildup != value))
				{
					this.OnCapitalBuildupChanging(value);
					this.SendPropertyChanging();
					this._CapitalBuildup = value;
					this.SendPropertyChanged("CapitalBuildup");
					this.OnCapitalBuildupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interest", DbType="Money NOT NULL")]
		public decimal Interest
		{
			get
			{
				return this._Interest;
			}
			set
			{
				if ((this._Interest != value))
				{
					this.OnInterestChanging(value);
					this.SendPropertyChanging();
					this._Interest = value;
					this.SendPropertyChanged("Interest");
					this.OnInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_EasyLoanServiceRate", Storage="_LoanDeductionType", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsForeignKey=true)]
		public LoanDeductionType LoanDeductionType
		{
			get
			{
				return this._LoanDeductionType.Entity;
			}
			set
			{
				LoanDeductionType previousValue = this._LoanDeductionType.Entity;
				if (((previousValue != value) 
							|| (this._LoanDeductionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanDeductionType.Entity = null;
						previousValue.EasyLoanServiceRate = null;
					}
					this._LoanDeductionType.Entity = value;
					if ((value != null))
					{
						value.EasyLoanServiceRate = this;
						this._LoanDeductionTypeID = value.LoanDeductionTypeID;
					}
					else
					{
						this._LoanDeductionTypeID = default(string);
					}
					this.SendPropertyChanged("LoanDeductionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.EmergencyLoanServiceRates")]
	public partial class EmergencyLoanServiceRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoanDeductionTypeID;
		
		private decimal _MaximumAmount;
		
		private decimal _ServiceFee;
		
		private decimal _CollectionFee;
		
		private decimal _CapitalBuildup;
		
		private decimal _Interest;
		
		private EntityRef<LoanDeductionType> _LoanDeductionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanDeductionTypeIDChanging(string value);
    partial void OnLoanDeductionTypeIDChanged();
    partial void OnMaximumAmountChanging(decimal value);
    partial void OnMaximumAmountChanged();
    partial void OnServiceFeeChanging(decimal value);
    partial void OnServiceFeeChanged();
    partial void OnCollectionFeeChanging(decimal value);
    partial void OnCollectionFeeChanged();
    partial void OnCapitalBuildupChanging(decimal value);
    partial void OnCapitalBuildupChanged();
    partial void OnInterestChanging(decimal value);
    partial void OnInterestChanged();
    #endregion
		
		public EmergencyLoanServiceRate()
		{
			this._LoanDeductionType = default(EntityRef<LoanDeductionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDeductionTypeID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoanDeductionTypeID
		{
			get
			{
				return this._LoanDeductionTypeID;
			}
			set
			{
				if ((this._LoanDeductionTypeID != value))
				{
					if (this._LoanDeductionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanDeductionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LoanDeductionTypeID = value;
					this.SendPropertyChanged("LoanDeductionTypeID");
					this.OnLoanDeductionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaximumAmount", DbType="Money NOT NULL")]
		public decimal MaximumAmount
		{
			get
			{
				return this._MaximumAmount;
			}
			set
			{
				if ((this._MaximumAmount != value))
				{
					this.OnMaximumAmountChanging(value);
					this.SendPropertyChanging();
					this._MaximumAmount = value;
					this.SendPropertyChanged("MaximumAmount");
					this.OnMaximumAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceFee", DbType="Money NOT NULL")]
		public decimal ServiceFee
		{
			get
			{
				return this._ServiceFee;
			}
			set
			{
				if ((this._ServiceFee != value))
				{
					this.OnServiceFeeChanging(value);
					this.SendPropertyChanging();
					this._ServiceFee = value;
					this.SendPropertyChanged("ServiceFee");
					this.OnServiceFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionFee", DbType="Money NOT NULL")]
		public decimal CollectionFee
		{
			get
			{
				return this._CollectionFee;
			}
			set
			{
				if ((this._CollectionFee != value))
				{
					this.OnCollectionFeeChanging(value);
					this.SendPropertyChanging();
					this._CollectionFee = value;
					this.SendPropertyChanged("CollectionFee");
					this.OnCollectionFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapitalBuildup", DbType="Money NOT NULL")]
		public decimal CapitalBuildup
		{
			get
			{
				return this._CapitalBuildup;
			}
			set
			{
				if ((this._CapitalBuildup != value))
				{
					this.OnCapitalBuildupChanging(value);
					this.SendPropertyChanging();
					this._CapitalBuildup = value;
					this.SendPropertyChanged("CapitalBuildup");
					this.OnCapitalBuildupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interest", DbType="Money NOT NULL")]
		public decimal Interest
		{
			get
			{
				return this._Interest;
			}
			set
			{
				if ((this._Interest != value))
				{
					this.OnInterestChanging(value);
					this.SendPropertyChanging();
					this._Interest = value;
					this.SendPropertyChanged("Interest");
					this.OnInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_EmergencyLoanServiceRate", Storage="_LoanDeductionType", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsForeignKey=true)]
		public LoanDeductionType LoanDeductionType
		{
			get
			{
				return this._LoanDeductionType.Entity;
			}
			set
			{
				LoanDeductionType previousValue = this._LoanDeductionType.Entity;
				if (((previousValue != value) 
							|| (this._LoanDeductionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanDeductionType.Entity = null;
						previousValue.EmergencyLoanServiceRate = null;
					}
					this._LoanDeductionType.Entity = value;
					if ((value != null))
					{
						value.EmergencyLoanServiceRate = this;
						this._LoanDeductionTypeID = value.LoanDeductionTypeID;
					}
					else
					{
						this._LoanDeductionTypeID = default(string);
					}
					this.SendPropertyChanged("LoanDeductionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.TimeDepositMinimumAmount")]
	public partial class TimeDepositMinimumAmount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _Amount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    #endregion
		
		public TimeDepositMinimumAmount()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.SavingsDepositMaintainingBalance")]
	public partial class SavingsDepositMaintainingBalance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _Amount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    #endregion
		
		public SavingsDepositMaintainingBalance()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.CapitalShareMinimumAmount")]
	public partial class CapitalShareMinimumAmount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _Amount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    #endregion
		
		public CapitalShareMinimumAmount()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.LoanCapitalBuildupRates")]
	public partial class LoanCapitalBuildupRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoanDeductionTypeID;
		
		private decimal _BelowFiveThousand;
		
		private decimal _FiveThousandAndAbove;
		
		private decimal _ShareBelowFifteenThousand;
		
		private decimal _ShareFifteenThousandAndAbove;
		
		private EntityRef<LoanDeductionType> _LoanDeductionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanDeductionTypeIDChanging(string value);
    partial void OnLoanDeductionTypeIDChanged();
    partial void OnBelowFiveThousandChanging(decimal value);
    partial void OnBelowFiveThousandChanged();
    partial void OnFiveThousandAndAboveChanging(decimal value);
    partial void OnFiveThousandAndAboveChanged();
    partial void OnShareBelowFifteenThousandChanging(decimal value);
    partial void OnShareBelowFifteenThousandChanged();
    partial void OnShareFifteenThousandAndAboveChanging(decimal value);
    partial void OnShareFifteenThousandAndAboveChanged();
    #endregion
		
		public LoanCapitalBuildupRate()
		{
			this._LoanDeductionType = default(EntityRef<LoanDeductionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDeductionTypeID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoanDeductionTypeID
		{
			get
			{
				return this._LoanDeductionTypeID;
			}
			set
			{
				if ((this._LoanDeductionTypeID != value))
				{
					if (this._LoanDeductionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanDeductionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LoanDeductionTypeID = value;
					this.SendPropertyChanged("LoanDeductionTypeID");
					this.OnLoanDeductionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BelowFiveThousand", DbType="Money NOT NULL")]
		public decimal BelowFiveThousand
		{
			get
			{
				return this._BelowFiveThousand;
			}
			set
			{
				if ((this._BelowFiveThousand != value))
				{
					this.OnBelowFiveThousandChanging(value);
					this.SendPropertyChanging();
					this._BelowFiveThousand = value;
					this.SendPropertyChanged("BelowFiveThousand");
					this.OnBelowFiveThousandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FiveThousandAndAbove", DbType="Decimal(4,2) NOT NULL")]
		public decimal FiveThousandAndAbove
		{
			get
			{
				return this._FiveThousandAndAbove;
			}
			set
			{
				if ((this._FiveThousandAndAbove != value))
				{
					this.OnFiveThousandAndAboveChanging(value);
					this.SendPropertyChanging();
					this._FiveThousandAndAbove = value;
					this.SendPropertyChanged("FiveThousandAndAbove");
					this.OnFiveThousandAndAboveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareBelowFifteenThousand", DbType="Decimal(4,2) NOT NULL")]
		public decimal ShareBelowFifteenThousand
		{
			get
			{
				return this._ShareBelowFifteenThousand;
			}
			set
			{
				if ((this._ShareBelowFifteenThousand != value))
				{
					this.OnShareBelowFifteenThousandChanging(value);
					this.SendPropertyChanging();
					this._ShareBelowFifteenThousand = value;
					this.SendPropertyChanged("ShareBelowFifteenThousand");
					this.OnShareBelowFifteenThousandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareFifteenThousandAndAbove", DbType="Decimal(4,2) NOT NULL")]
		public decimal ShareFifteenThousandAndAbove
		{
			get
			{
				return this._ShareFifteenThousandAndAbove;
			}
			set
			{
				if ((this._ShareFifteenThousandAndAbove != value))
				{
					this.OnShareFifteenThousandAndAboveChanging(value);
					this.SendPropertyChanging();
					this._ShareFifteenThousandAndAbove = value;
					this.SendPropertyChanged("ShareFifteenThousandAndAbove");
					this.OnShareFifteenThousandAndAboveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_LoanCapitalBuildupRate", Storage="_LoanDeductionType", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsForeignKey=true)]
		public LoanDeductionType LoanDeductionType
		{
			get
			{
				return this._LoanDeductionType.Entity;
			}
			set
			{
				LoanDeductionType previousValue = this._LoanDeductionType.Entity;
				if (((previousValue != value) 
							|| (this._LoanDeductionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanDeductionType.Entity = null;
						previousValue.LoanCapitalBuildupRate = null;
					}
					this._LoanDeductionType.Entity = value;
					if ((value != null))
					{
						value.LoanCapitalBuildupRate = this;
						this._LoanDeductionTypeID = value.LoanDeductionTypeID;
					}
					else
					{
						this._LoanDeductionTypeID = default(string);
					}
					this.SendPropertyChanged("LoanDeductionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Plans.PensionPlanAvailOption")]
	public partial class PensionPlanAvailOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AvailOptionID;
		
		private string _AvailOptionName;
		
		private string _AvailOptionDescription;
		
		private decimal _AwardAmount;
		
		private int _AgingPeriod;
		
		private bool _WithMonthlyPension;
		
		private EntitySet<PensionPlan> _PensionPlans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAvailOptionIDChanging(int value);
    partial void OnAvailOptionIDChanged();
    partial void OnAvailOptionNameChanging(string value);
    partial void OnAvailOptionNameChanged();
    partial void OnAvailOptionDescriptionChanging(string value);
    partial void OnAvailOptionDescriptionChanged();
    partial void OnAwardAmountChanging(decimal value);
    partial void OnAwardAmountChanged();
    partial void OnAgingPeriodChanging(int value);
    partial void OnAgingPeriodChanged();
    partial void OnWithMonthlyPensionChanging(bool value);
    partial void OnWithMonthlyPensionChanged();
    #endregion
		
		public PensionPlanAvailOption()
		{
			this._PensionPlans = new EntitySet<PensionPlan>(new Action<PensionPlan>(this.attach_PensionPlans), new Action<PensionPlan>(this.detach_PensionPlans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailOptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AvailOptionID
		{
			get
			{
				return this._AvailOptionID;
			}
			set
			{
				if ((this._AvailOptionID != value))
				{
					this.OnAvailOptionIDChanging(value);
					this.SendPropertyChanging();
					this._AvailOptionID = value;
					this.SendPropertyChanged("AvailOptionID");
					this.OnAvailOptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailOptionName", DbType="Char(30) NOT NULL", CanBeNull=false)]
		public string AvailOptionName
		{
			get
			{
				return this._AvailOptionName;
			}
			set
			{
				if ((this._AvailOptionName != value))
				{
					this.OnAvailOptionNameChanging(value);
					this.SendPropertyChanging();
					this._AvailOptionName = value;
					this.SendPropertyChanged("AvailOptionName");
					this.OnAvailOptionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailOptionDescription", DbType="VarChar(MAX)")]
		public string AvailOptionDescription
		{
			get
			{
				return this._AvailOptionDescription;
			}
			set
			{
				if ((this._AvailOptionDescription != value))
				{
					this.OnAvailOptionDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AvailOptionDescription = value;
					this.SendPropertyChanged("AvailOptionDescription");
					this.OnAvailOptionDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwardAmount", DbType="Money NOT NULL")]
		public decimal AwardAmount
		{
			get
			{
				return this._AwardAmount;
			}
			set
			{
				if ((this._AwardAmount != value))
				{
					this.OnAwardAmountChanging(value);
					this.SendPropertyChanging();
					this._AwardAmount = value;
					this.SendPropertyChanged("AwardAmount");
					this.OnAwardAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgingPeriod", DbType="Int NOT NULL")]
		public int AgingPeriod
		{
			get
			{
				return this._AgingPeriod;
			}
			set
			{
				if ((this._AgingPeriod != value))
				{
					this.OnAgingPeriodChanging(value);
					this.SendPropertyChanging();
					this._AgingPeriod = value;
					this.SendPropertyChanged("AgingPeriod");
					this.OnAgingPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WithMonthlyPension", DbType="Bit NOT NULL")]
		public bool WithMonthlyPension
		{
			get
			{
				return this._WithMonthlyPension;
			}
			set
			{
				if ((this._WithMonthlyPension != value))
				{
					this.OnWithMonthlyPensionChanging(value);
					this.SendPropertyChanging();
					this._WithMonthlyPension = value;
					this.SendPropertyChanged("WithMonthlyPension");
					this.OnWithMonthlyPensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PensionPlanAvailOption_PensionPlan", Storage="_PensionPlans", ThisKey="AvailOptionID", OtherKey="AvailOptionID")]
		public EntitySet<PensionPlan> PensionPlans
		{
			get
			{
				return this._PensionPlans;
			}
			set
			{
				this._PensionPlans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PensionPlans(PensionPlan entity)
		{
			this.SendPropertyChanging();
			entity.PensionPlanAvailOption = this;
		}
		
		private void detach_PensionPlans(PensionPlan entity)
		{
			this.SendPropertyChanging();
			entity.PensionPlanAvailOption = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.SavingsDepositInterestAdjustments")]
	public partial class SavingsDepositInterestAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<SavingsDeposit> _SavingsDeposit;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public SavingsDepositInterestAdjustment()
		{
			this._SavingsDeposit = default(EntityRef<SavingsDeposit>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._SavingsDeposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SavingsDeposit_SavingsDepositInterestAdjustment", Storage="_SavingsDeposit", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public SavingsDeposit SavingsDeposit
		{
			get
			{
				return this._SavingsDeposit.Entity;
			}
			set
			{
				SavingsDeposit previousValue = this._SavingsDeposit.Entity;
				if (((previousValue != value) 
							|| (this._SavingsDeposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SavingsDeposit.Entity = null;
						previousValue.SavingsDepositInterestAdjustments.Remove(this);
					}
					this._SavingsDeposit.Entity = value;
					if ((value != null))
					{
						value.SavingsDepositInterestAdjustments.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("SavingsDeposit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_SavingsDepositInterestAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.SavingsDepositInterestAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.SavingsDepositInterestAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NetSurpluses")]
	public partial class NetSurplus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Year;
		
		private decimal _Amount;
		
		private EntityRef<YearlyDividend> _YearlyDividend;
		
		private EntityRef<YearlyPatronage> _YearlyPatronage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    #endregion
		
		public NetSurplus()
		{
			this._YearlyDividend = default(EntityRef<YearlyDividend>);
			this._YearlyPatronage = default(EntityRef<YearlyPatronage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NetSurplus_YearlyDividend", Storage="_YearlyDividend", ThisKey="Year", OtherKey="Year", IsUnique=true, IsForeignKey=false)]
		public YearlyDividend YearlyDividend
		{
			get
			{
				return this._YearlyDividend.Entity;
			}
			set
			{
				YearlyDividend previousValue = this._YearlyDividend.Entity;
				if (((previousValue != value) 
							|| (this._YearlyDividend.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._YearlyDividend.Entity = null;
						previousValue.NetSurplus = null;
					}
					this._YearlyDividend.Entity = value;
					if ((value != null))
					{
						value.NetSurplus = this;
					}
					this.SendPropertyChanged("YearlyDividend");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NetSurplus_YearlyPatronage", Storage="_YearlyPatronage", ThisKey="Year", OtherKey="Year", IsUnique=true, IsForeignKey=false)]
		public YearlyPatronage YearlyPatronage
		{
			get
			{
				return this._YearlyPatronage.Entity;
			}
			set
			{
				YearlyPatronage previousValue = this._YearlyPatronage.Entity;
				if (((previousValue != value) 
							|| (this._YearlyPatronage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._YearlyPatronage.Entity = null;
						previousValue.NetSurplus = null;
					}
					this._YearlyPatronage.Entity = value;
					if ((value != null))
					{
						value.NetSurplus = this;
					}
					this.SendPropertyChanged("YearlyPatronage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Lookup.Quarters")]
	public partial class Quarter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuarterID;
		
		private string _Name;
		
		private EntitySet<Month> _Months;
		
		private EntitySet<QuarterlyInterest> _QuarterlyInterests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuarterIDChanging(int value);
    partial void OnQuarterIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Quarter()
		{
			this._Months = new EntitySet<Month>(new Action<Month>(this.attach_Months), new Action<Month>(this.detach_Months));
			this._QuarterlyInterests = new EntitySet<QuarterlyInterest>(new Action<QuarterlyInterest>(this.attach_QuarterlyInterests), new Action<QuarterlyInterest>(this.detach_QuarterlyInterests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuarterID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuarterID
		{
			get
			{
				return this._QuarterID;
			}
			set
			{
				if ((this._QuarterID != value))
				{
					this.OnQuarterIDChanging(value);
					this.SendPropertyChanging();
					this._QuarterID = value;
					this.SendPropertyChanged("QuarterID");
					this.OnQuarterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quarter_Month", Storage="_Months", ThisKey="QuarterID", OtherKey="QuarterID")]
		public EntitySet<Month> Months
		{
			get
			{
				return this._Months;
			}
			set
			{
				this._Months.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quarter_QuarterlyInterest", Storage="_QuarterlyInterests", ThisKey="QuarterID", OtherKey="QuarterID")]
		public EntitySet<QuarterlyInterest> QuarterlyInterests
		{
			get
			{
				return this._QuarterlyInterests;
			}
			set
			{
				this._QuarterlyInterests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Months(Month entity)
		{
			this.SendPropertyChanging();
			entity.Quarter = this;
		}
		
		private void detach_Months(Month entity)
		{
			this.SendPropertyChanging();
			entity.Quarter = null;
		}
		
		private void attach_QuarterlyInterests(QuarterlyInterest entity)
		{
			this.SendPropertyChanging();
			entity.Quarter = this;
		}
		
		private void detach_QuarterlyInterests(QuarterlyInterest entity)
		{
			this.SendPropertyChanging();
			entity.Quarter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Lookup.Months")]
	public partial class Month : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MonthID;
		
		private int _QuarterID;
		
		private string _Name;
		
		private EntityRef<Quarter> _Quarter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMonthIDChanging(int value);
    partial void OnMonthIDChanged();
    partial void OnQuarterIDChanging(int value);
    partial void OnQuarterIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Month()
		{
			this._Quarter = default(EntityRef<Quarter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MonthID
		{
			get
			{
				return this._MonthID;
			}
			set
			{
				if ((this._MonthID != value))
				{
					this.OnMonthIDChanging(value);
					this.SendPropertyChanging();
					this._MonthID = value;
					this.SendPropertyChanged("MonthID");
					this.OnMonthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuarterID", DbType="Int NOT NULL")]
		public int QuarterID
		{
			get
			{
				return this._QuarterID;
			}
			set
			{
				if ((this._QuarterID != value))
				{
					if (this._Quarter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuarterIDChanging(value);
					this.SendPropertyChanging();
					this._QuarterID = value;
					this.SendPropertyChanged("QuarterID");
					this.OnQuarterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quarter_Month", Storage="_Quarter", ThisKey="QuarterID", OtherKey="QuarterID", IsForeignKey=true)]
		public Quarter Quarter
		{
			get
			{
				return this._Quarter.Entity;
			}
			set
			{
				Quarter previousValue = this._Quarter.Entity;
				if (((previousValue != value) 
							|| (this._Quarter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quarter.Entity = null;
						previousValue.Months.Remove(this);
					}
					this._Quarter.Entity = value;
					if ((value != null))
					{
						value.Months.Add(this);
						this._QuarterID = value.QuarterID;
					}
					else
					{
						this._QuarterID = default(int);
					}
					this.SendPropertyChanged("Quarter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OtherReceipts")]
	public partial class OtherReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ReceiptID;
		
		private decimal _Amount;
		
		private string _Remarks;
		
		private EntityRef<CashReceipt> _CashReceipt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiptIDChanging(long value);
    partial void OnReceiptIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public OtherReceipt()
		{
			this._CashReceipt = default(EntityRef<CashReceipt>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					if (this._CashReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(250)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_OtherReceipt", Storage="_CashReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsForeignKey=true)]
		public CashReceipt CashReceipt
		{
			get
			{
				return this._CashReceipt.Entity;
			}
			set
			{
				CashReceipt previousValue = this._CashReceipt.Entity;
				if (((previousValue != value) 
							|| (this._CashReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashReceipt.Entity = null;
						previousValue.OtherReceipt = null;
					}
					this._CashReceipt.Entity = value;
					if ((value != null))
					{
						value.OtherReceipt = this;
						this._ReceiptID = value.ReceiptID;
					}
					else
					{
						this._ReceiptID = default(long);
					}
					this.SendPropertyChanged("CashReceipt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MiscellaneousIncomeReceipts")]
	public partial class MiscellaneousIncomeReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ReceiptID;
		
		private decimal _Amount;
		
		private string _Remarks;
		
		private EntityRef<CashReceipt> _CashReceipt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiptIDChanging(long value);
    partial void OnReceiptIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public MiscellaneousIncomeReceipt()
		{
			this._CashReceipt = default(EntityRef<CashReceipt>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					if (this._CashReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(250)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_MiscellaneousIncomeReceipt", Storage="_CashReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsForeignKey=true)]
		public CashReceipt CashReceipt
		{
			get
			{
				return this._CashReceipt.Entity;
			}
			set
			{
				CashReceipt previousValue = this._CashReceipt.Entity;
				if (((previousValue != value) 
							|| (this._CashReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashReceipt.Entity = null;
						previousValue.MiscellaneousIncomeReceipt = null;
					}
					this._CashReceipt.Entity = value;
					if ((value != null))
					{
						value.MiscellaneousIncomeReceipt = this;
						this._ReceiptID = value.ReceiptID;
					}
					else
					{
						this._ReceiptID = default(long);
					}
					this.SendPropertyChanged("CashReceipt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OtherDisbursements")]
	public partial class OtherDisbursement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _DisbursementID;
		
		private decimal _Amount;
		
		private string _Remarks;
		
		private EntityRef<CashDisbursement> _CashDisbursement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisbursementIDChanging(long value);
    partial void OnDisbursementIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public OtherDisbursement()
		{
			this._CashDisbursement = default(EntityRef<CashDisbursement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisbursementID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long DisbursementID
		{
			get
			{
				return this._DisbursementID;
			}
			set
			{
				if ((this._DisbursementID != value))
				{
					if (this._CashDisbursement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisbursementIDChanging(value);
					this.SendPropertyChanging();
					this._DisbursementID = value;
					this.SendPropertyChanged("DisbursementID");
					this.OnDisbursementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(250)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_OtherDisbursement", Storage="_CashDisbursement", ThisKey="DisbursementID", OtherKey="DisbursementID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CashDisbursement CashDisbursement
		{
			get
			{
				return this._CashDisbursement.Entity;
			}
			set
			{
				CashDisbursement previousValue = this._CashDisbursement.Entity;
				if (((previousValue != value) 
							|| (this._CashDisbursement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashDisbursement.Entity = null;
						previousValue.OtherDisbursement = null;
					}
					this._CashDisbursement.Entity = value;
					if ((value != null))
					{
						value.OtherDisbursement = this;
						this._DisbursementID = value.DisbursementID;
					}
					else
					{
						this._DisbursementID = default(long);
					}
					this.SendPropertyChanged("CashDisbursement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MiscellaneousIncomeDisbursements")]
	public partial class MiscellaneousIncomeDisbursement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _DisbursementID;
		
		private decimal _Amount;
		
		private string _Remarks;
		
		private EntityRef<CashDisbursement> _CashDisbursement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisbursementIDChanging(long value);
    partial void OnDisbursementIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public MiscellaneousIncomeDisbursement()
		{
			this._CashDisbursement = default(EntityRef<CashDisbursement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisbursementID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long DisbursementID
		{
			get
			{
				return this._DisbursementID;
			}
			set
			{
				if ((this._DisbursementID != value))
				{
					if (this._CashDisbursement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisbursementIDChanging(value);
					this.SendPropertyChanging();
					this._DisbursementID = value;
					this.SendPropertyChanged("DisbursementID");
					this.OnDisbursementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(250)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_MiscellaneousIncomeDisbursement", Storage="_CashDisbursement", ThisKey="DisbursementID", OtherKey="DisbursementID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CashDisbursement CashDisbursement
		{
			get
			{
				return this._CashDisbursement.Entity;
			}
			set
			{
				CashDisbursement previousValue = this._CashDisbursement.Entity;
				if (((previousValue != value) 
							|| (this._CashDisbursement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashDisbursement.Entity = null;
						previousValue.MiscellaneousIncomeDisbursement = null;
					}
					this._CashDisbursement.Entity = value;
					if ((value != null))
					{
						value.MiscellaneousIncomeDisbursement = this;
						this._DisbursementID = value.DisbursementID;
					}
					else
					{
						this._DisbursementID = default(long);
					}
					this.SendPropertyChanged("CashDisbursement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Link.CashDisbursements")]
	public partial class CashDisbursement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _DisbursementID;
		
		private string _CashDisbursementVoucher;
		
		private string _UserID;
		
		private System.DateTime _DisbursementDate;
		
		private System.Nullable<long> _MemberID;
		
		private EntitySet<CapitalShareDisbursement> _CapitalShareDisbursements;
		
		private EntitySet<SavingsDepositDisbursement> _SavingsDepositDisbursements;
		
		private EntityRef<OtherDisbursement> _OtherDisbursement;
		
		private EntityRef<MiscellaneousIncomeDisbursement> _MiscellaneousIncomeDisbursement;
		
		private EntitySet<LoanDisbursement> _LoanDisbursements;
		
		private EntitySet<CapitalShareBuildup> _CapitalShareBuildups;
		
		private EntitySet<CollegeInsurancePlanDisbursement> _CollegeInsurancePlanDisbursements;
		
		private EntitySet<PensionPlanDisbursement> _PensionPlanDisbursements;
		
		private EntitySet<TimeDepositDisbursement> _TimeDepositDisbursements;
		
		private EntitySet<TulunganFundDisbursement> _TulunganFundDisbursements;
		
		private EntitySet<DeathAidFundDisbursement> _DeathAidFundDisbursements;
		
		private EntityRef<User> _User;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisbursementIDChanging(long value);
    partial void OnDisbursementIDChanged();
    partial void OnCashDisbursementVoucherChanging(string value);
    partial void OnCashDisbursementVoucherChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnDisbursementDateChanging(System.DateTime value);
    partial void OnDisbursementDateChanged();
    partial void OnMemberIDChanging(System.Nullable<long> value);
    partial void OnMemberIDChanged();
    #endregion
		
		public CashDisbursement()
		{
			this._CapitalShareDisbursements = new EntitySet<CapitalShareDisbursement>(new Action<CapitalShareDisbursement>(this.attach_CapitalShareDisbursements), new Action<CapitalShareDisbursement>(this.detach_CapitalShareDisbursements));
			this._SavingsDepositDisbursements = new EntitySet<SavingsDepositDisbursement>(new Action<SavingsDepositDisbursement>(this.attach_SavingsDepositDisbursements), new Action<SavingsDepositDisbursement>(this.detach_SavingsDepositDisbursements));
			this._OtherDisbursement = default(EntityRef<OtherDisbursement>);
			this._MiscellaneousIncomeDisbursement = default(EntityRef<MiscellaneousIncomeDisbursement>);
			this._LoanDisbursements = new EntitySet<LoanDisbursement>(new Action<LoanDisbursement>(this.attach_LoanDisbursements), new Action<LoanDisbursement>(this.detach_LoanDisbursements));
			this._CapitalShareBuildups = new EntitySet<CapitalShareBuildup>(new Action<CapitalShareBuildup>(this.attach_CapitalShareBuildups), new Action<CapitalShareBuildup>(this.detach_CapitalShareBuildups));
			this._CollegeInsurancePlanDisbursements = new EntitySet<CollegeInsurancePlanDisbursement>(new Action<CollegeInsurancePlanDisbursement>(this.attach_CollegeInsurancePlanDisbursements), new Action<CollegeInsurancePlanDisbursement>(this.detach_CollegeInsurancePlanDisbursements));
			this._PensionPlanDisbursements = new EntitySet<PensionPlanDisbursement>(new Action<PensionPlanDisbursement>(this.attach_PensionPlanDisbursements), new Action<PensionPlanDisbursement>(this.detach_PensionPlanDisbursements));
			this._TimeDepositDisbursements = new EntitySet<TimeDepositDisbursement>(new Action<TimeDepositDisbursement>(this.attach_TimeDepositDisbursements), new Action<TimeDepositDisbursement>(this.detach_TimeDepositDisbursements));
			this._TulunganFundDisbursements = new EntitySet<TulunganFundDisbursement>(new Action<TulunganFundDisbursement>(this.attach_TulunganFundDisbursements), new Action<TulunganFundDisbursement>(this.detach_TulunganFundDisbursements));
			this._DeathAidFundDisbursements = new EntitySet<DeathAidFundDisbursement>(new Action<DeathAidFundDisbursement>(this.attach_DeathAidFundDisbursements), new Action<DeathAidFundDisbursement>(this.detach_DeathAidFundDisbursements));
			this._User = default(EntityRef<User>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisbursementID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long DisbursementID
		{
			get
			{
				return this._DisbursementID;
			}
			set
			{
				if ((this._DisbursementID != value))
				{
					this.OnDisbursementIDChanging(value);
					this.SendPropertyChanging();
					this._DisbursementID = value;
					this.SendPropertyChanged("DisbursementID");
					this.OnDisbursementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashDisbursementVoucher", DbType="Char(9) NOT NULL", CanBeNull=false)]
		public string CashDisbursementVoucher
		{
			get
			{
				return this._CashDisbursementVoucher;
			}
			set
			{
				if ((this._CashDisbursementVoucher != value))
				{
					this.OnCashDisbursementVoucherChanging(value);
					this.SendPropertyChanging();
					this._CashDisbursementVoucher = value;
					this.SendPropertyChanged("CashDisbursementVoucher");
					this.OnCashDisbursementVoucherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisbursementDate", DbType="DateTime NOT NULL")]
		public System.DateTime DisbursementDate
		{
			get
			{
				return this._DisbursementDate;
			}
			set
			{
				if ((this._DisbursementDate != value))
				{
					this.OnDisbursementDateChanging(value);
					this.SendPropertyChanging();
					this._DisbursementDate = value;
					this.SendPropertyChanged("DisbursementDate");
					this.OnDisbursementDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt")]
		public System.Nullable<long> MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_CapitalShareDisbursement", Storage="_CapitalShareDisbursements", ThisKey="DisbursementID", OtherKey="DisbursementID")]
		public EntitySet<CapitalShareDisbursement> CapitalShareDisbursements
		{
			get
			{
				return this._CapitalShareDisbursements;
			}
			set
			{
				this._CapitalShareDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_SavingsDepositDisbursement", Storage="_SavingsDepositDisbursements", ThisKey="DisbursementID", OtherKey="DisbursementID")]
		public EntitySet<SavingsDepositDisbursement> SavingsDepositDisbursements
		{
			get
			{
				return this._SavingsDepositDisbursements;
			}
			set
			{
				this._SavingsDepositDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_OtherDisbursement", Storage="_OtherDisbursement", ThisKey="DisbursementID", OtherKey="DisbursementID", IsUnique=true, IsForeignKey=false)]
		public OtherDisbursement OtherDisbursement
		{
			get
			{
				return this._OtherDisbursement.Entity;
			}
			set
			{
				OtherDisbursement previousValue = this._OtherDisbursement.Entity;
				if (((previousValue != value) 
							|| (this._OtherDisbursement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OtherDisbursement.Entity = null;
						previousValue.CashDisbursement = null;
					}
					this._OtherDisbursement.Entity = value;
					if ((value != null))
					{
						value.CashDisbursement = this;
					}
					this.SendPropertyChanged("OtherDisbursement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_MiscellaneousIncomeDisbursement", Storage="_MiscellaneousIncomeDisbursement", ThisKey="DisbursementID", OtherKey="DisbursementID", IsUnique=true, IsForeignKey=false)]
		public MiscellaneousIncomeDisbursement MiscellaneousIncomeDisbursement
		{
			get
			{
				return this._MiscellaneousIncomeDisbursement.Entity;
			}
			set
			{
				MiscellaneousIncomeDisbursement previousValue = this._MiscellaneousIncomeDisbursement.Entity;
				if (((previousValue != value) 
							|| (this._MiscellaneousIncomeDisbursement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MiscellaneousIncomeDisbursement.Entity = null;
						previousValue.CashDisbursement = null;
					}
					this._MiscellaneousIncomeDisbursement.Entity = value;
					if ((value != null))
					{
						value.CashDisbursement = this;
					}
					this.SendPropertyChanged("MiscellaneousIncomeDisbursement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_LoanDisbursement", Storage="_LoanDisbursements", ThisKey="DisbursementID", OtherKey="DisbursementID")]
		public EntitySet<LoanDisbursement> LoanDisbursements
		{
			get
			{
				return this._LoanDisbursements;
			}
			set
			{
				this._LoanDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_CapitalShareBuildup", Storage="_CapitalShareBuildups", ThisKey="DisbursementID", OtherKey="DisbursementID")]
		public EntitySet<CapitalShareBuildup> CapitalShareBuildups
		{
			get
			{
				return this._CapitalShareBuildups;
			}
			set
			{
				this._CapitalShareBuildups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_CollegeInsurancePlanDisbursement", Storage="_CollegeInsurancePlanDisbursements", ThisKey="DisbursementID", OtherKey="DisbursementID")]
		public EntitySet<CollegeInsurancePlanDisbursement> CollegeInsurancePlanDisbursements
		{
			get
			{
				return this._CollegeInsurancePlanDisbursements;
			}
			set
			{
				this._CollegeInsurancePlanDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_PensionPlanDisbursement", Storage="_PensionPlanDisbursements", ThisKey="DisbursementID", OtherKey="DisbursementID")]
		public EntitySet<PensionPlanDisbursement> PensionPlanDisbursements
		{
			get
			{
				return this._PensionPlanDisbursements;
			}
			set
			{
				this._PensionPlanDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_TimeDepositDisbursement", Storage="_TimeDepositDisbursements", ThisKey="DisbursementID", OtherKey="DisbursementID")]
		public EntitySet<TimeDepositDisbursement> TimeDepositDisbursements
		{
			get
			{
				return this._TimeDepositDisbursements;
			}
			set
			{
				this._TimeDepositDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_TulunganFundDisbursement", Storage="_TulunganFundDisbursements", ThisKey="DisbursementID", OtherKey="DisbursementID")]
		public EntitySet<TulunganFundDisbursement> TulunganFundDisbursements
		{
			get
			{
				return this._TulunganFundDisbursements;
			}
			set
			{
				this._TulunganFundDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_DeathAidFundDisbursement", Storage="_DeathAidFundDisbursements", ThisKey="DisbursementID", OtherKey="DisbursementID")]
		public EntitySet<DeathAidFundDisbursement> DeathAidFundDisbursements
		{
			get
			{
				return this._DeathAidFundDisbursements;
			}
			set
			{
				this._DeathAidFundDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CashDisbursement", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CashDisbursements.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CashDisbursements.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_CashDisbursement", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.CashDisbursements.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.CashDisbursements.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CapitalShareDisbursements(CapitalShareDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = this;
		}
		
		private void detach_CapitalShareDisbursements(CapitalShareDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = null;
		}
		
		private void attach_SavingsDepositDisbursements(SavingsDepositDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = this;
		}
		
		private void detach_SavingsDepositDisbursements(SavingsDepositDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = null;
		}
		
		private void attach_LoanDisbursements(LoanDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = this;
		}
		
		private void detach_LoanDisbursements(LoanDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = null;
		}
		
		private void attach_CapitalShareBuildups(CapitalShareBuildup entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = this;
		}
		
		private void detach_CapitalShareBuildups(CapitalShareBuildup entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = null;
		}
		
		private void attach_CollegeInsurancePlanDisbursements(CollegeInsurancePlanDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = this;
		}
		
		private void detach_CollegeInsurancePlanDisbursements(CollegeInsurancePlanDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = null;
		}
		
		private void attach_PensionPlanDisbursements(PensionPlanDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = this;
		}
		
		private void detach_PensionPlanDisbursements(PensionPlanDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = null;
		}
		
		private void attach_TimeDepositDisbursements(TimeDepositDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = this;
		}
		
		private void detach_TimeDepositDisbursements(TimeDepositDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = null;
		}
		
		private void attach_TulunganFundDisbursements(TulunganFundDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = this;
		}
		
		private void detach_TulunganFundDisbursements(TulunganFundDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = null;
		}
		
		private void attach_DeathAidFundDisbursements(DeathAidFundDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = this;
		}
		
		private void detach_DeathAidFundDisbursements(DeathAidFundDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CashDisbursement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Link.CashReceipts")]
	public partial class CashReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ReceiptID;
		
		private string _OfficialReceiptNumber;
		
		private string _UserID;
		
		private System.DateTime _ReceiptDate;
		
		private System.Nullable<long> _MemberID;
		
		private EntitySet<CapitalShareReceipt> _CapitalShareReceipts;
		
		private EntitySet<SavingsDepositReceipt> _SavingsDepositReceipts;
		
		private EntityRef<MembershipFeeReceipt> _MembershipFeeReceipt;
		
		private EntityRef<OtherReceipt> _OtherReceipt;
		
		private EntityRef<MiscellaneousIncomeReceipt> _MiscellaneousIncomeReceipt;
		
		private EntitySet<LoanReceipt> _LoanReceipts;
		
		private EntitySet<CollegeInsurancePlanReceipt> _CollegeInsurancePlanReceipts;
		
		private EntitySet<PensionPlanReceipt> _PensionPlanReceipts;
		
		private EntitySet<TimeDepositReceipt> _TimeDepositReceipts;
		
		private EntitySet<TulunganFundReceipt> _TulunganFundReceipts;
		
		private EntitySet<DeathAidFundReceipt> _DeathAidFundReceipts;
		
		private EntitySet<DelinquentFineReceipt> _DelinquentFineReceipts;
		
		private EntitySet<LatePaymentFineReceipt> _LatePaymentFineReceipts;
		
		private EntityRef<User> _User;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiptIDChanging(long value);
    partial void OnReceiptIDChanged();
    partial void OnOfficialReceiptNumberChanging(string value);
    partial void OnOfficialReceiptNumberChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnReceiptDateChanging(System.DateTime value);
    partial void OnReceiptDateChanged();
    partial void OnMemberIDChanging(System.Nullable<long> value);
    partial void OnMemberIDChanged();
    #endregion
		
		public CashReceipt()
		{
			this._CapitalShareReceipts = new EntitySet<CapitalShareReceipt>(new Action<CapitalShareReceipt>(this.attach_CapitalShareReceipts), new Action<CapitalShareReceipt>(this.detach_CapitalShareReceipts));
			this._SavingsDepositReceipts = new EntitySet<SavingsDepositReceipt>(new Action<SavingsDepositReceipt>(this.attach_SavingsDepositReceipts), new Action<SavingsDepositReceipt>(this.detach_SavingsDepositReceipts));
			this._MembershipFeeReceipt = default(EntityRef<MembershipFeeReceipt>);
			this._OtherReceipt = default(EntityRef<OtherReceipt>);
			this._MiscellaneousIncomeReceipt = default(EntityRef<MiscellaneousIncomeReceipt>);
			this._LoanReceipts = new EntitySet<LoanReceipt>(new Action<LoanReceipt>(this.attach_LoanReceipts), new Action<LoanReceipt>(this.detach_LoanReceipts));
			this._CollegeInsurancePlanReceipts = new EntitySet<CollegeInsurancePlanReceipt>(new Action<CollegeInsurancePlanReceipt>(this.attach_CollegeInsurancePlanReceipts), new Action<CollegeInsurancePlanReceipt>(this.detach_CollegeInsurancePlanReceipts));
			this._PensionPlanReceipts = new EntitySet<PensionPlanReceipt>(new Action<PensionPlanReceipt>(this.attach_PensionPlanReceipts), new Action<PensionPlanReceipt>(this.detach_PensionPlanReceipts));
			this._TimeDepositReceipts = new EntitySet<TimeDepositReceipt>(new Action<TimeDepositReceipt>(this.attach_TimeDepositReceipts), new Action<TimeDepositReceipt>(this.detach_TimeDepositReceipts));
			this._TulunganFundReceipts = new EntitySet<TulunganFundReceipt>(new Action<TulunganFundReceipt>(this.attach_TulunganFundReceipts), new Action<TulunganFundReceipt>(this.detach_TulunganFundReceipts));
			this._DeathAidFundReceipts = new EntitySet<DeathAidFundReceipt>(new Action<DeathAidFundReceipt>(this.attach_DeathAidFundReceipts), new Action<DeathAidFundReceipt>(this.detach_DeathAidFundReceipts));
			this._DelinquentFineReceipts = new EntitySet<DelinquentFineReceipt>(new Action<DelinquentFineReceipt>(this.attach_DelinquentFineReceipts), new Action<DelinquentFineReceipt>(this.detach_DelinquentFineReceipts));
			this._LatePaymentFineReceipts = new EntitySet<LatePaymentFineReceipt>(new Action<LatePaymentFineReceipt>(this.attach_LatePaymentFineReceipts), new Action<LatePaymentFineReceipt>(this.detach_LatePaymentFineReceipts));
			this._User = default(EntityRef<User>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficialReceiptNumber", DbType="Char(9) NOT NULL", CanBeNull=false)]
		public string OfficialReceiptNumber
		{
			get
			{
				return this._OfficialReceiptNumber;
			}
			set
			{
				if ((this._OfficialReceiptNumber != value))
				{
					this.OnOfficialReceiptNumberChanging(value);
					this.SendPropertyChanging();
					this._OfficialReceiptNumber = value;
					this.SendPropertyChanged("OfficialReceiptNumber");
					this.OnOfficialReceiptNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptDate", DbType="DateTime NOT NULL")]
		public System.DateTime ReceiptDate
		{
			get
			{
				return this._ReceiptDate;
			}
			set
			{
				if ((this._ReceiptDate != value))
				{
					this.OnReceiptDateChanging(value);
					this.SendPropertyChanging();
					this._ReceiptDate = value;
					this.SendPropertyChanged("ReceiptDate");
					this.OnReceiptDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt")]
		public System.Nullable<long> MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_CapitalShareReceipt", Storage="_CapitalShareReceipts", ThisKey="ReceiptID", OtherKey="ReceiptID")]
		public EntitySet<CapitalShareReceipt> CapitalShareReceipts
		{
			get
			{
				return this._CapitalShareReceipts;
			}
			set
			{
				this._CapitalShareReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_SavingsDepositReceipt", Storage="_SavingsDepositReceipts", ThisKey="ReceiptID", OtherKey="ReceiptID")]
		public EntitySet<SavingsDepositReceipt> SavingsDepositReceipts
		{
			get
			{
				return this._SavingsDepositReceipts;
			}
			set
			{
				this._SavingsDepositReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_MembershipFeeReceipt", Storage="_MembershipFeeReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsUnique=true, IsForeignKey=false)]
		public MembershipFeeReceipt MembershipFeeReceipt
		{
			get
			{
				return this._MembershipFeeReceipt.Entity;
			}
			set
			{
				MembershipFeeReceipt previousValue = this._MembershipFeeReceipt.Entity;
				if (((previousValue != value) 
							|| (this._MembershipFeeReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MembershipFeeReceipt.Entity = null;
						previousValue.CashReceipt = null;
					}
					this._MembershipFeeReceipt.Entity = value;
					if ((value != null))
					{
						value.CashReceipt = this;
					}
					this.SendPropertyChanged("MembershipFeeReceipt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_OtherReceipt", Storage="_OtherReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsUnique=true, IsForeignKey=false)]
		public OtherReceipt OtherReceipt
		{
			get
			{
				return this._OtherReceipt.Entity;
			}
			set
			{
				OtherReceipt previousValue = this._OtherReceipt.Entity;
				if (((previousValue != value) 
							|| (this._OtherReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OtherReceipt.Entity = null;
						previousValue.CashReceipt = null;
					}
					this._OtherReceipt.Entity = value;
					if ((value != null))
					{
						value.CashReceipt = this;
					}
					this.SendPropertyChanged("OtherReceipt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_MiscellaneousIncomeReceipt", Storage="_MiscellaneousIncomeReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsUnique=true, IsForeignKey=false)]
		public MiscellaneousIncomeReceipt MiscellaneousIncomeReceipt
		{
			get
			{
				return this._MiscellaneousIncomeReceipt.Entity;
			}
			set
			{
				MiscellaneousIncomeReceipt previousValue = this._MiscellaneousIncomeReceipt.Entity;
				if (((previousValue != value) 
							|| (this._MiscellaneousIncomeReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MiscellaneousIncomeReceipt.Entity = null;
						previousValue.CashReceipt = null;
					}
					this._MiscellaneousIncomeReceipt.Entity = value;
					if ((value != null))
					{
						value.CashReceipt = this;
					}
					this.SendPropertyChanged("MiscellaneousIncomeReceipt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_LoanReceipt", Storage="_LoanReceipts", ThisKey="ReceiptID", OtherKey="ReceiptID")]
		public EntitySet<LoanReceipt> LoanReceipts
		{
			get
			{
				return this._LoanReceipts;
			}
			set
			{
				this._LoanReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_CollegeInsurancePlanReceipt", Storage="_CollegeInsurancePlanReceipts", ThisKey="ReceiptID", OtherKey="ReceiptID")]
		public EntitySet<CollegeInsurancePlanReceipt> CollegeInsurancePlanReceipts
		{
			get
			{
				return this._CollegeInsurancePlanReceipts;
			}
			set
			{
				this._CollegeInsurancePlanReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_PensionPlanReceipt", Storage="_PensionPlanReceipts", ThisKey="ReceiptID", OtherKey="ReceiptID")]
		public EntitySet<PensionPlanReceipt> PensionPlanReceipts
		{
			get
			{
				return this._PensionPlanReceipts;
			}
			set
			{
				this._PensionPlanReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_TimeDepositReceipt", Storage="_TimeDepositReceipts", ThisKey="ReceiptID", OtherKey="ReceiptID")]
		public EntitySet<TimeDepositReceipt> TimeDepositReceipts
		{
			get
			{
				return this._TimeDepositReceipts;
			}
			set
			{
				this._TimeDepositReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_TulunganFundReceipt", Storage="_TulunganFundReceipts", ThisKey="ReceiptID", OtherKey="ReceiptID")]
		public EntitySet<TulunganFundReceipt> TulunganFundReceipts
		{
			get
			{
				return this._TulunganFundReceipts;
			}
			set
			{
				this._TulunganFundReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_DeathAidFundReceipt", Storage="_DeathAidFundReceipts", ThisKey="ReceiptID", OtherKey="ReceiptID")]
		public EntitySet<DeathAidFundReceipt> DeathAidFundReceipts
		{
			get
			{
				return this._DeathAidFundReceipts;
			}
			set
			{
				this._DeathAidFundReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_DelinquentFineReceipt", Storage="_DelinquentFineReceipts", ThisKey="ReceiptID", OtherKey="ReceiptID")]
		public EntitySet<DelinquentFineReceipt> DelinquentFineReceipts
		{
			get
			{
				return this._DelinquentFineReceipts;
			}
			set
			{
				this._DelinquentFineReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_LatePaymentFineReceipt", Storage="_LatePaymentFineReceipts", ThisKey="ReceiptID", OtherKey="ReceiptID")]
		public EntitySet<LatePaymentFineReceipt> LatePaymentFineReceipts
		{
			get
			{
				return this._LatePaymentFineReceipts;
			}
			set
			{
				this._LatePaymentFineReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CashReceipt", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CashReceipts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CashReceipts.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_CashReceipt", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.CashReceipts.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.CashReceipts.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CapitalShareReceipts(CapitalShareReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = this;
		}
		
		private void detach_CapitalShareReceipts(CapitalShareReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = null;
		}
		
		private void attach_SavingsDepositReceipts(SavingsDepositReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = this;
		}
		
		private void detach_SavingsDepositReceipts(SavingsDepositReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = null;
		}
		
		private void attach_LoanReceipts(LoanReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = this;
		}
		
		private void detach_LoanReceipts(LoanReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = null;
		}
		
		private void attach_CollegeInsurancePlanReceipts(CollegeInsurancePlanReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = this;
		}
		
		private void detach_CollegeInsurancePlanReceipts(CollegeInsurancePlanReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = null;
		}
		
		private void attach_PensionPlanReceipts(PensionPlanReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = this;
		}
		
		private void detach_PensionPlanReceipts(PensionPlanReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = null;
		}
		
		private void attach_TimeDepositReceipts(TimeDepositReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = this;
		}
		
		private void detach_TimeDepositReceipts(TimeDepositReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = null;
		}
		
		private void attach_TulunganFundReceipts(TulunganFundReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = this;
		}
		
		private void detach_TulunganFundReceipts(TulunganFundReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = null;
		}
		
		private void attach_DeathAidFundReceipts(DeathAidFundReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = this;
		}
		
		private void detach_DeathAidFundReceipts(DeathAidFundReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = null;
		}
		
		private void attach_DelinquentFineReceipts(DelinquentFineReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = this;
		}
		
		private void detach_DelinquentFineReceipts(DelinquentFineReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = null;
		}
		
		private void attach_LatePaymentFineReceipts(LatePaymentFineReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = this;
		}
		
		private void detach_LatePaymentFineReceipts(LatePaymentFineReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CashReceipt = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.LoanReceipts")]
	public partial class LoanReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _LoanID;
		
		private long _ReceiptID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CashReceipt> _CashReceipt;
		
		private EntityRef<Loan> _Loan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnLoanIDChanging(long value);
    partial void OnLoanIDChanged();
    partial void OnReceiptIDChanging(long value);
    partial void OnReceiptIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public LoanReceipt()
		{
			this._CashReceipt = default(EntityRef<CashReceipt>);
			this._Loan = default(EntityRef<Loan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanID", DbType="BigInt NOT NULL")]
		public long LoanID
		{
			get
			{
				return this._LoanID;
			}
			set
			{
				if ((this._LoanID != value))
				{
					if (this._Loan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanIDChanging(value);
					this.SendPropertyChanging();
					this._LoanID = value;
					this.SendPropertyChanged("LoanID");
					this.OnLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="BigInt NOT NULL")]
		public long ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					if (this._CashReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_LoanReceipt", Storage="_CashReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsForeignKey=true)]
		public CashReceipt CashReceipt
		{
			get
			{
				return this._CashReceipt.Entity;
			}
			set
			{
				CashReceipt previousValue = this._CashReceipt.Entity;
				if (((previousValue != value) 
							|| (this._CashReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashReceipt.Entity = null;
						previousValue.LoanReceipts.Remove(this);
					}
					this._CashReceipt.Entity = value;
					if ((value != null))
					{
						value.LoanReceipts.Add(this);
						this._ReceiptID = value.ReceiptID;
					}
					else
					{
						this._ReceiptID = default(long);
					}
					this.SendPropertyChanged("CashReceipt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_LoanReceipt", Storage="_Loan", ThisKey="LoanID", OtherKey="LoanID", IsForeignKey=true)]
		public Loan Loan
		{
			get
			{
				return this._Loan.Entity;
			}
			set
			{
				Loan previousValue = this._Loan.Entity;
				if (((previousValue != value) 
							|| (this._Loan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Loan.Entity = null;
						previousValue.LoanReceipts.Remove(this);
					}
					this._Loan.Entity = value;
					if ((value != null))
					{
						value.LoanReceipts.Add(this);
						this._LoanID = value.LoanID;
					}
					else
					{
						this._LoanID = default(long);
					}
					this.SendPropertyChanged("Loan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.LoanDisbursements")]
	public partial class LoanDisbursement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _LoanID;
		
		private long _DisbursementID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CashDisbursement> _CashDisbursement;
		
		private EntityRef<Loan> _Loan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnLoanIDChanging(long value);
    partial void OnLoanIDChanged();
    partial void OnDisbursementIDChanging(long value);
    partial void OnDisbursementIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public LoanDisbursement()
		{
			this._CashDisbursement = default(EntityRef<CashDisbursement>);
			this._Loan = default(EntityRef<Loan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanID", DbType="BigInt NOT NULL")]
		public long LoanID
		{
			get
			{
				return this._LoanID;
			}
			set
			{
				if ((this._LoanID != value))
				{
					if (this._Loan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanIDChanging(value);
					this.SendPropertyChanging();
					this._LoanID = value;
					this.SendPropertyChanged("LoanID");
					this.OnLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisbursementID", DbType="BigInt NOT NULL")]
		public long DisbursementID
		{
			get
			{
				return this._DisbursementID;
			}
			set
			{
				if ((this._DisbursementID != value))
				{
					if (this._CashDisbursement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisbursementIDChanging(value);
					this.SendPropertyChanging();
					this._DisbursementID = value;
					this.SendPropertyChanged("DisbursementID");
					this.OnDisbursementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_LoanDisbursement", Storage="_CashDisbursement", ThisKey="DisbursementID", OtherKey="DisbursementID", IsForeignKey=true)]
		public CashDisbursement CashDisbursement
		{
			get
			{
				return this._CashDisbursement.Entity;
			}
			set
			{
				CashDisbursement previousValue = this._CashDisbursement.Entity;
				if (((previousValue != value) 
							|| (this._CashDisbursement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashDisbursement.Entity = null;
						previousValue.LoanDisbursements.Remove(this);
					}
					this._CashDisbursement.Entity = value;
					if ((value != null))
					{
						value.LoanDisbursements.Add(this);
						this._DisbursementID = value.DisbursementID;
					}
					else
					{
						this._DisbursementID = default(long);
					}
					this.SendPropertyChanged("CashDisbursement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_LoanDisbursement", Storage="_Loan", ThisKey="LoanID", OtherKey="LoanID", IsForeignKey=true)]
		public Loan Loan
		{
			get
			{
				return this._Loan.Entity;
			}
			set
			{
				Loan previousValue = this._Loan.Entity;
				if (((previousValue != value) 
							|| (this._Loan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Loan.Entity = null;
						previousValue.LoanDisbursements.Remove(this);
					}
					this._Loan.Entity = value;
					if ((value != null))
					{
						value.LoanDisbursements.Add(this);
						this._LoanID = value.LoanID;
					}
					else
					{
						this._LoanID = default(long);
					}
					this.SendPropertyChanged("Loan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.QuarterlyInterestComputations")]
	public partial class QuarterlyInterestComputation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _QuarterlyInterestComputationID;
		
		private long _QuarterlyInterestID;
		
		private long _MemberID;
		
		private decimal _LowestAverageMonthlyBalance;
		
		private decimal _Interest;
		
		private EntitySet<AverageMonthlyBalance> _AverageMonthlyBalances;
		
		private EntityRef<QuarterlyInterest> _QuarterlyInterest;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuarterlyInterestComputationIDChanging(long value);
    partial void OnQuarterlyInterestComputationIDChanged();
    partial void OnQuarterlyInterestIDChanging(long value);
    partial void OnQuarterlyInterestIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnLowestAverageMonthlyBalanceChanging(decimal value);
    partial void OnLowestAverageMonthlyBalanceChanged();
    partial void OnInterestChanging(decimal value);
    partial void OnInterestChanged();
    #endregion
		
		public QuarterlyInterestComputation()
		{
			this._AverageMonthlyBalances = new EntitySet<AverageMonthlyBalance>(new Action<AverageMonthlyBalance>(this.attach_AverageMonthlyBalances), new Action<AverageMonthlyBalance>(this.detach_AverageMonthlyBalances));
			this._QuarterlyInterest = default(EntityRef<QuarterlyInterest>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuarterlyInterestComputationID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long QuarterlyInterestComputationID
		{
			get
			{
				return this._QuarterlyInterestComputationID;
			}
			set
			{
				if ((this._QuarterlyInterestComputationID != value))
				{
					this.OnQuarterlyInterestComputationIDChanging(value);
					this.SendPropertyChanging();
					this._QuarterlyInterestComputationID = value;
					this.SendPropertyChanged("QuarterlyInterestComputationID");
					this.OnQuarterlyInterestComputationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuarterlyInterestID", DbType="BigInt NOT NULL")]
		public long QuarterlyInterestID
		{
			get
			{
				return this._QuarterlyInterestID;
			}
			set
			{
				if ((this._QuarterlyInterestID != value))
				{
					if (this._QuarterlyInterest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuarterlyInterestIDChanging(value);
					this.SendPropertyChanging();
					this._QuarterlyInterestID = value;
					this.SendPropertyChanged("QuarterlyInterestID");
					this.OnQuarterlyInterestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowestAverageMonthlyBalance", DbType="Money NOT NULL")]
		public decimal LowestAverageMonthlyBalance
		{
			get
			{
				return this._LowestAverageMonthlyBalance;
			}
			set
			{
				if ((this._LowestAverageMonthlyBalance != value))
				{
					this.OnLowestAverageMonthlyBalanceChanging(value);
					this.SendPropertyChanging();
					this._LowestAverageMonthlyBalance = value;
					this.SendPropertyChanged("LowestAverageMonthlyBalance");
					this.OnLowestAverageMonthlyBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interest", DbType="Money NOT NULL")]
		public decimal Interest
		{
			get
			{
				return this._Interest;
			}
			set
			{
				if ((this._Interest != value))
				{
					this.OnInterestChanging(value);
					this.SendPropertyChanging();
					this._Interest = value;
					this.SendPropertyChanged("Interest");
					this.OnInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuarterlyInterestComputation_AverageMonthlyBalance", Storage="_AverageMonthlyBalances", ThisKey="QuarterlyInterestComputationID", OtherKey="QuarterlyInterestComputationID")]
		public EntitySet<AverageMonthlyBalance> AverageMonthlyBalances
		{
			get
			{
				return this._AverageMonthlyBalances;
			}
			set
			{
				this._AverageMonthlyBalances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuarterlyInterest_QuarterlyInterestComputation", Storage="_QuarterlyInterest", ThisKey="QuarterlyInterestID", OtherKey="QuaterlyInterestID", IsForeignKey=true)]
		public QuarterlyInterest QuarterlyInterest
		{
			get
			{
				return this._QuarterlyInterest.Entity;
			}
			set
			{
				QuarterlyInterest previousValue = this._QuarterlyInterest.Entity;
				if (((previousValue != value) 
							|| (this._QuarterlyInterest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuarterlyInterest.Entity = null;
						previousValue.QuarterlyInterestComputations.Remove(this);
					}
					this._QuarterlyInterest.Entity = value;
					if ((value != null))
					{
						value.QuarterlyInterestComputations.Add(this);
						this._QuarterlyInterestID = value.QuaterlyInterestID;
					}
					else
					{
						this._QuarterlyInterestID = default(long);
					}
					this.SendPropertyChanged("QuarterlyInterest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_QuarterlyInterestComputation", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.QuarterlyInterestComputations.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.QuarterlyInterestComputations.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AverageMonthlyBalances(AverageMonthlyBalance entity)
		{
			this.SendPropertyChanging();
			entity.QuarterlyInterestComputation = this;
		}
		
		private void detach_AverageMonthlyBalances(AverageMonthlyBalance entity)
		{
			this.SendPropertyChanging();
			entity.QuarterlyInterestComputation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.AverageMonthlyBalances")]
	public partial class AverageMonthlyBalance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AverageMonthlyBalanceID;
		
		private long _QuarterlyInterestComputationID;
		
		private System.DateTime _Date;
		
		private decimal _Amount;
		
		private EntityRef<QuarterlyInterestComputation> _QuarterlyInterestComputation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAverageMonthlyBalanceIDChanging(long value);
    partial void OnAverageMonthlyBalanceIDChanged();
    partial void OnQuarterlyInterestComputationIDChanging(long value);
    partial void OnQuarterlyInterestComputationIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    #endregion
		
		public AverageMonthlyBalance()
		{
			this._QuarterlyInterestComputation = default(EntityRef<QuarterlyInterestComputation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageMonthlyBalanceID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AverageMonthlyBalanceID
		{
			get
			{
				return this._AverageMonthlyBalanceID;
			}
			set
			{
				if ((this._AverageMonthlyBalanceID != value))
				{
					this.OnAverageMonthlyBalanceIDChanging(value);
					this.SendPropertyChanging();
					this._AverageMonthlyBalanceID = value;
					this.SendPropertyChanged("AverageMonthlyBalanceID");
					this.OnAverageMonthlyBalanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuarterlyInterestComputationID", DbType="BigInt NOT NULL")]
		public long QuarterlyInterestComputationID
		{
			get
			{
				return this._QuarterlyInterestComputationID;
			}
			set
			{
				if ((this._QuarterlyInterestComputationID != value))
				{
					if (this._QuarterlyInterestComputation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuarterlyInterestComputationIDChanging(value);
					this.SendPropertyChanging();
					this._QuarterlyInterestComputationID = value;
					this.SendPropertyChanged("QuarterlyInterestComputationID");
					this.OnQuarterlyInterestComputationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuarterlyInterestComputation_AverageMonthlyBalance", Storage="_QuarterlyInterestComputation", ThisKey="QuarterlyInterestComputationID", OtherKey="QuarterlyInterestComputationID", IsForeignKey=true)]
		public QuarterlyInterestComputation QuarterlyInterestComputation
		{
			get
			{
				return this._QuarterlyInterestComputation.Entity;
			}
			set
			{
				QuarterlyInterestComputation previousValue = this._QuarterlyInterestComputation.Entity;
				if (((previousValue != value) 
							|| (this._QuarterlyInterestComputation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuarterlyInterestComputation.Entity = null;
						previousValue.AverageMonthlyBalances.Remove(this);
					}
					this._QuarterlyInterestComputation.Entity = value;
					if ((value != null))
					{
						value.AverageMonthlyBalances.Add(this);
						this._QuarterlyInterestComputationID = value.QuarterlyInterestComputationID;
					}
					else
					{
						this._QuarterlyInterestComputationID = default(long);
					}
					this.SendPropertyChanged("QuarterlyInterestComputation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.DividendShareItems")]
	public partial class DividendShareItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _DividendComputationID;
		
		private System.DateTime _Date;
		
		private string _TransactionType;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private decimal _MoneyValue;
		
		private double _NumberOfDaysUnchanged;
		
		private EntityRef<DividendComputation> _DividendComputation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDividendComputationIDChanging(long value);
    partial void OnDividendComputationIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTransactionTypeChanging(string value);
    partial void OnTransactionTypeChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    partial void OnMoneyValueChanging(decimal value);
    partial void OnMoneyValueChanged();
    partial void OnNumberOfDaysUnchangedChanging(double value);
    partial void OnNumberOfDaysUnchangedChanged();
    #endregion
		
		public DividendShareItem()
		{
			this._DividendComputation = default(EntityRef<DividendComputation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DividendComputationID", DbType="BigInt NOT NULL")]
		public long DividendComputationID
		{
			get
			{
				return this._DividendComputationID;
			}
			set
			{
				if ((this._DividendComputationID != value))
				{
					if (this._DividendComputation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDividendComputationIDChanging(value);
					this.SendPropertyChanging();
					this._DividendComputationID = value;
					this.SendPropertyChanged("DividendComputationID");
					this.OnDividendComputationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionType", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string TransactionType
		{
			get
			{
				return this._TransactionType;
			}
			set
			{
				if ((this._TransactionType != value))
				{
					this.OnTransactionTypeChanging(value);
					this.SendPropertyChanging();
					this._TransactionType = value;
					this.SendPropertyChanged("TransactionType");
					this.OnTransactionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyValue", DbType="Money NOT NULL")]
		public decimal MoneyValue
		{
			get
			{
				return this._MoneyValue;
			}
			set
			{
				if ((this._MoneyValue != value))
				{
					this.OnMoneyValueChanging(value);
					this.SendPropertyChanging();
					this._MoneyValue = value;
					this.SendPropertyChanged("MoneyValue");
					this.OnMoneyValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfDaysUnchanged", DbType="Float NOT NULL")]
		public double NumberOfDaysUnchanged
		{
			get
			{
				return this._NumberOfDaysUnchanged;
			}
			set
			{
				if ((this._NumberOfDaysUnchanged != value))
				{
					this.OnNumberOfDaysUnchangedChanging(value);
					this.SendPropertyChanging();
					this._NumberOfDaysUnchanged = value;
					this.SendPropertyChanged("NumberOfDaysUnchanged");
					this.OnNumberOfDaysUnchangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DividendComputation_DividendShareItem", Storage="_DividendComputation", ThisKey="DividendComputationID", OtherKey="DividendComputationID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DividendComputation DividendComputation
		{
			get
			{
				return this._DividendComputation.Entity;
			}
			set
			{
				DividendComputation previousValue = this._DividendComputation.Entity;
				if (((previousValue != value) 
							|| (this._DividendComputation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DividendComputation.Entity = null;
						previousValue.DividendShareItems.Remove(this);
					}
					this._DividendComputation.Entity = value;
					if ((value != null))
					{
						value.DividendShareItems.Add(this);
						this._DividendComputationID = value.DividendComputationID;
					}
					else
					{
						this._DividendComputationID = default(long);
					}
					this.SendPropertyChanged("DividendComputation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.PatronageComputations")]
	public partial class PatronageComputation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PatronageComputationID;
		
		private long _MemberID;
		
		private int _Year;
		
		private decimal _AveragePatronage;
		
		private decimal _PatronageRefund;
		
		private EntitySet<PatronageItem> _PatronageItems;
		
		private EntityRef<YearlyPatronage> _YearlyPatronage;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatronageComputationIDChanging(long value);
    partial void OnPatronageComputationIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnAveragePatronageChanging(decimal value);
    partial void OnAveragePatronageChanged();
    partial void OnPatronageRefundChanging(decimal value);
    partial void OnPatronageRefundChanged();
    #endregion
		
		public PatronageComputation()
		{
			this._PatronageItems = new EntitySet<PatronageItem>(new Action<PatronageItem>(this.attach_PatronageItems), new Action<PatronageItem>(this.detach_PatronageItems));
			this._YearlyPatronage = default(EntityRef<YearlyPatronage>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatronageComputationID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PatronageComputationID
		{
			get
			{
				return this._PatronageComputationID;
			}
			set
			{
				if ((this._PatronageComputationID != value))
				{
					this.OnPatronageComputationIDChanging(value);
					this.SendPropertyChanging();
					this._PatronageComputationID = value;
					this.SendPropertyChanged("PatronageComputationID");
					this.OnPatronageComputationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					if (this._YearlyPatronage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AveragePatronage", DbType="Money NOT NULL")]
		public decimal AveragePatronage
		{
			get
			{
				return this._AveragePatronage;
			}
			set
			{
				if ((this._AveragePatronage != value))
				{
					this.OnAveragePatronageChanging(value);
					this.SendPropertyChanging();
					this._AveragePatronage = value;
					this.SendPropertyChanged("AveragePatronage");
					this.OnAveragePatronageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatronageRefund", DbType="Money NOT NULL")]
		public decimal PatronageRefund
		{
			get
			{
				return this._PatronageRefund;
			}
			set
			{
				if ((this._PatronageRefund != value))
				{
					this.OnPatronageRefundChanging(value);
					this.SendPropertyChanging();
					this._PatronageRefund = value;
					this.SendPropertyChanged("PatronageRefund");
					this.OnPatronageRefundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatronageComputation_PatronageItem", Storage="_PatronageItems", ThisKey="PatronageComputationID", OtherKey="PatronageComputationID")]
		public EntitySet<PatronageItem> PatronageItems
		{
			get
			{
				return this._PatronageItems;
			}
			set
			{
				this._PatronageItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YearlyPatronage_PatronageComputation", Storage="_YearlyPatronage", ThisKey="Year", OtherKey="Year", IsForeignKey=true)]
		public YearlyPatronage YearlyPatronage
		{
			get
			{
				return this._YearlyPatronage.Entity;
			}
			set
			{
				YearlyPatronage previousValue = this._YearlyPatronage.Entity;
				if (((previousValue != value) 
							|| (this._YearlyPatronage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._YearlyPatronage.Entity = null;
						previousValue.PatronageComputations.Remove(this);
					}
					this._YearlyPatronage.Entity = value;
					if ((value != null))
					{
						value.PatronageComputations.Add(this);
						this._Year = value.Year;
					}
					else
					{
						this._Year = default(int);
					}
					this.SendPropertyChanged("YearlyPatronage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_PatronageComputation", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.PatronageComputations.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.PatronageComputations.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatronageItems(PatronageItem entity)
		{
			this.SendPropertyChanging();
			entity.PatronageComputation = this;
		}
		
		private void detach_PatronageItems(PatronageItem entity)
		{
			this.SendPropertyChanging();
			entity.PatronageComputation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.PatronageItems")]
	public partial class PatronageItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _PatronageComputationID;
		
		private string _LoanServiceID;
		
		private System.DateTime _Date;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private decimal _MoneyValue;
		
		private double _NumberOfDaysUnchanged;
		
		private EntityRef<PatronageComputation> _PatronageComputation;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnPatronageComputationIDChanging(long value);
    partial void OnPatronageComputationIDChanged();
    partial void OnLoanServiceIDChanging(string value);
    partial void OnLoanServiceIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    partial void OnMoneyValueChanging(decimal value);
    partial void OnMoneyValueChanged();
    partial void OnNumberOfDaysUnchangedChanging(double value);
    partial void OnNumberOfDaysUnchangedChanged();
    #endregion
		
		public PatronageItem()
		{
			this._PatronageComputation = default(EntityRef<PatronageComputation>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatronageComputationID", DbType="BigInt NOT NULL")]
		public long PatronageComputationID
		{
			get
			{
				return this._PatronageComputationID;
			}
			set
			{
				if ((this._PatronageComputationID != value))
				{
					if (this._PatronageComputation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatronageComputationIDChanging(value);
					this.SendPropertyChanging();
					this._PatronageComputationID = value;
					this.SendPropertyChanged("PatronageComputationID");
					this.OnPatronageComputationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanServiceID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string LoanServiceID
		{
			get
			{
				return this._LoanServiceID;
			}
			set
			{
				if ((this._LoanServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanServiceIDChanging(value);
					this.SendPropertyChanging();
					this._LoanServiceID = value;
					this.SendPropertyChanged("LoanServiceID");
					this.OnLoanServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyValue", DbType="Money NOT NULL")]
		public decimal MoneyValue
		{
			get
			{
				return this._MoneyValue;
			}
			set
			{
				if ((this._MoneyValue != value))
				{
					this.OnMoneyValueChanging(value);
					this.SendPropertyChanging();
					this._MoneyValue = value;
					this.SendPropertyChanged("MoneyValue");
					this.OnMoneyValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfDaysUnchanged", DbType="Float NOT NULL")]
		public double NumberOfDaysUnchanged
		{
			get
			{
				return this._NumberOfDaysUnchanged;
			}
			set
			{
				if ((this._NumberOfDaysUnchanged != value))
				{
					this.OnNumberOfDaysUnchangedChanging(value);
					this.SendPropertyChanging();
					this._NumberOfDaysUnchanged = value;
					this.SendPropertyChanged("NumberOfDaysUnchanged");
					this.OnNumberOfDaysUnchangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatronageComputation_PatronageItem", Storage="_PatronageComputation", ThisKey="PatronageComputationID", OtherKey="PatronageComputationID", IsForeignKey=true)]
		public PatronageComputation PatronageComputation
		{
			get
			{
				return this._PatronageComputation.Entity;
			}
			set
			{
				PatronageComputation previousValue = this._PatronageComputation.Entity;
				if (((previousValue != value) 
							|| (this._PatronageComputation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatronageComputation.Entity = null;
						previousValue.PatronageItems.Remove(this);
					}
					this._PatronageComputation.Entity = value;
					if ((value != null))
					{
						value.PatronageItems.Add(this);
						this._PatronageComputationID = value.PatronageComputationID;
					}
					else
					{
						this._PatronageComputationID = default(long);
					}
					this.SendPropertyChanged("PatronageComputation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_PatronageItem", Storage="_Service", ThisKey="LoanServiceID", OtherKey="ServiceID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.PatronageItems.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.PatronageItems.Add(this);
						this._LoanServiceID = value.ServiceID;
					}
					else
					{
						this._LoanServiceID = default(string);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.CapitalShareDividendAdjustments")]
	public partial class CapitalShareDividendAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CapitalShare> _CapitalShare;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public CapitalShareDividendAdjustment()
		{
			this._CapitalShare = default(EntityRef<CapitalShare>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._CapitalShare.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalShare_CapitalShareDividendAdjustment", Storage="_CapitalShare", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public CapitalShare CapitalShare
		{
			get
			{
				return this._CapitalShare.Entity;
			}
			set
			{
				CapitalShare previousValue = this._CapitalShare.Entity;
				if (((previousValue != value) 
							|| (this._CapitalShare.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CapitalShare.Entity = null;
						previousValue.CapitalShareDividendAdjustments.Remove(this);
					}
					this._CapitalShare.Entity = value;
					if ((value != null))
					{
						value.CapitalShareDividendAdjustments.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("CapitalShare");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_CapitalShareDividendAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.CapitalShareDividendAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.CapitalShareDividendAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.CapitalSharePatronageRefundAdjustments")]
	public partial class CapitalSharePatronageRefundAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CapitalShare> _CapitalShare;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public CapitalSharePatronageRefundAdjustment()
		{
			this._CapitalShare = default(EntityRef<CapitalShare>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._CapitalShare.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalShare_CapitalSharePatronageRefundAdjustment", Storage="_CapitalShare", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public CapitalShare CapitalShare
		{
			get
			{
				return this._CapitalShare.Entity;
			}
			set
			{
				CapitalShare previousValue = this._CapitalShare.Entity;
				if (((previousValue != value) 
							|| (this._CapitalShare.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CapitalShare.Entity = null;
						previousValue.CapitalSharePatronageRefundAdjustments.Remove(this);
					}
					this._CapitalShare.Entity = value;
					if ((value != null))
					{
						value.CapitalSharePatronageRefundAdjustments.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("CapitalShare");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_CapitalSharePatronageRefundAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.CapitalSharePatronageRefundAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.CapitalSharePatronageRefundAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.LoanDividendAdjustment")]
	public partial class LoanDividendAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _LoanID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<Adjustment> _Adjustment;
		
		private EntityRef<Loan> _Loan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnLoanIDChanging(long value);
    partial void OnLoanIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public LoanDividendAdjustment()
		{
			this._Adjustment = default(EntityRef<Adjustment>);
			this._Loan = default(EntityRef<Loan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanID", DbType="BigInt NOT NULL")]
		public long LoanID
		{
			get
			{
				return this._LoanID;
			}
			set
			{
				if ((this._LoanID != value))
				{
					if (this._Loan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanIDChanging(value);
					this.SendPropertyChanging();
					this._LoanID = value;
					this.SendPropertyChanged("LoanID");
					this.OnLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_LoanDividendAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.LoanDividendAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.LoanDividendAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_LoanDividendAdjustment", Storage="_Loan", ThisKey="LoanID", OtherKey="LoanID", IsForeignKey=true)]
		public Loan Loan
		{
			get
			{
				return this._Loan.Entity;
			}
			set
			{
				Loan previousValue = this._Loan.Entity;
				if (((previousValue != value) 
							|| (this._Loan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Loan.Entity = null;
						previousValue.LoanDividendAdjustments.Remove(this);
					}
					this._Loan.Entity = value;
					if ((value != null))
					{
						value.LoanDividendAdjustments.Add(this);
						this._LoanID = value.LoanID;
					}
					else
					{
						this._LoanID = default(long);
					}
					this.SendPropertyChanged("Loan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.SavingsDepositDividendAdjustment")]
	public partial class SavingsDepositDividendAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<SavingsDeposit> _SavingsDeposit;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public SavingsDepositDividendAdjustment()
		{
			this._SavingsDeposit = default(EntityRef<SavingsDeposit>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._SavingsDeposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SavingsDeposit_SavingsDepositDividendAdjustment", Storage="_SavingsDeposit", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public SavingsDeposit SavingsDeposit
		{
			get
			{
				return this._SavingsDeposit.Entity;
			}
			set
			{
				SavingsDeposit previousValue = this._SavingsDeposit.Entity;
				if (((previousValue != value) 
							|| (this._SavingsDeposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SavingsDeposit.Entity = null;
						previousValue.SavingsDepositDividendAdjustments.Remove(this);
					}
					this._SavingsDeposit.Entity = value;
					if ((value != null))
					{
						value.SavingsDepositDividendAdjustments.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("SavingsDeposit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_SavingsDepositDividendAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.SavingsDepositDividendAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.SavingsDepositDividendAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.YearlyDividends")]
	public partial class YearlyDividend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Year;
		
		private int _DividendRatio;
		
		private decimal _TotalAverageShare;
		
		private decimal _TotalDividendForDistribution;
		
		private bool _Posted;
		
		private System.Nullable<long> _AdjustmentID;
		
		private EntitySet<DividendComputation> _DividendComputations;
		
		private EntityRef<NetSurplus> _NetSurplus;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnDividendRatioChanging(int value);
    partial void OnDividendRatioChanged();
    partial void OnTotalAverageShareChanging(decimal value);
    partial void OnTotalAverageShareChanged();
    partial void OnTotalDividendForDistributionChanging(decimal value);
    partial void OnTotalDividendForDistributionChanged();
    partial void OnPostedChanging(bool value);
    partial void OnPostedChanged();
    partial void OnAdjustmentIDChanging(System.Nullable<long> value);
    partial void OnAdjustmentIDChanged();
    #endregion
		
		public YearlyDividend()
		{
			this._DividendComputations = new EntitySet<DividendComputation>(new Action<DividendComputation>(this.attach_DividendComputations), new Action<DividendComputation>(this.detach_DividendComputations));
			this._NetSurplus = default(EntityRef<NetSurplus>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					if (this._NetSurplus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DividendRatio", DbType="Int NOT NULL")]
		public int DividendRatio
		{
			get
			{
				return this._DividendRatio;
			}
			set
			{
				if ((this._DividendRatio != value))
				{
					this.OnDividendRatioChanging(value);
					this.SendPropertyChanging();
					this._DividendRatio = value;
					this.SendPropertyChanged("DividendRatio");
					this.OnDividendRatioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAverageShare", DbType="Money NOT NULL")]
		public decimal TotalAverageShare
		{
			get
			{
				return this._TotalAverageShare;
			}
			set
			{
				if ((this._TotalAverageShare != value))
				{
					this.OnTotalAverageShareChanging(value);
					this.SendPropertyChanging();
					this._TotalAverageShare = value;
					this.SendPropertyChanged("TotalAverageShare");
					this.OnTotalAverageShareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalDividendForDistribution", DbType="Money NOT NULL")]
		public decimal TotalDividendForDistribution
		{
			get
			{
				return this._TotalDividendForDistribution;
			}
			set
			{
				if ((this._TotalDividendForDistribution != value))
				{
					this.OnTotalDividendForDistributionChanging(value);
					this.SendPropertyChanging();
					this._TotalDividendForDistribution = value;
					this.SendPropertyChanged("TotalDividendForDistribution");
					this.OnTotalDividendForDistributionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Posted", DbType="Bit NOT NULL")]
		public bool Posted
		{
			get
			{
				return this._Posted;
			}
			set
			{
				if ((this._Posted != value))
				{
					this.OnPostedChanging(value);
					this.SendPropertyChanging();
					this._Posted = value;
					this.SendPropertyChanged("Posted");
					this.OnPostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt")]
		public System.Nullable<long> AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YearlyDividend_DividendComputation", Storage="_DividendComputations", ThisKey="Year", OtherKey="Year")]
		public EntitySet<DividendComputation> DividendComputations
		{
			get
			{
				return this._DividendComputations;
			}
			set
			{
				this._DividendComputations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NetSurplus_YearlyDividend", Storage="_NetSurplus", ThisKey="Year", OtherKey="Year", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public NetSurplus NetSurplus
		{
			get
			{
				return this._NetSurplus.Entity;
			}
			set
			{
				NetSurplus previousValue = this._NetSurplus.Entity;
				if (((previousValue != value) 
							|| (this._NetSurplus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NetSurplus.Entity = null;
						previousValue.YearlyDividend = null;
					}
					this._NetSurplus.Entity = value;
					if ((value != null))
					{
						value.YearlyDividend = this;
						this._Year = value.Year;
					}
					else
					{
						this._Year = default(int);
					}
					this.SendPropertyChanged("NetSurplus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_YearlyDividend", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.YearlyDividends.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.YearlyDividends.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DividendComputations(DividendComputation entity)
		{
			this.SendPropertyChanging();
			entity.YearlyDividend = this;
		}
		
		private void detach_DividendComputations(DividendComputation entity)
		{
			this.SendPropertyChanging();
			entity.YearlyDividend = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.YearlyPatronages")]
	public partial class YearlyPatronage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Year;
		
		private int _PatronageRatio;
		
		private decimal _TotalAveragePatronage;
		
		private decimal _TotalPatronageForRefund;
		
		private bool _Posted;
		
		private System.Nullable<long> _AdjustmentID;
		
		private EntitySet<PatronageComputation> _PatronageComputations;
		
		private EntityRef<NetSurplus> _NetSurplus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnPatronageRatioChanging(int value);
    partial void OnPatronageRatioChanged();
    partial void OnTotalAveragePatronageChanging(decimal value);
    partial void OnTotalAveragePatronageChanged();
    partial void OnTotalPatronageForRefundChanging(decimal value);
    partial void OnTotalPatronageForRefundChanged();
    partial void OnPostedChanging(bool value);
    partial void OnPostedChanged();
    partial void OnAdjustmentIDChanging(System.Nullable<long> value);
    partial void OnAdjustmentIDChanged();
    #endregion
		
		public YearlyPatronage()
		{
			this._PatronageComputations = new EntitySet<PatronageComputation>(new Action<PatronageComputation>(this.attach_PatronageComputations), new Action<PatronageComputation>(this.detach_PatronageComputations));
			this._NetSurplus = default(EntityRef<NetSurplus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					if (this._NetSurplus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatronageRatio", DbType="Int NOT NULL")]
		public int PatronageRatio
		{
			get
			{
				return this._PatronageRatio;
			}
			set
			{
				if ((this._PatronageRatio != value))
				{
					this.OnPatronageRatioChanging(value);
					this.SendPropertyChanging();
					this._PatronageRatio = value;
					this.SendPropertyChanged("PatronageRatio");
					this.OnPatronageRatioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAveragePatronage", DbType="Money NOT NULL")]
		public decimal TotalAveragePatronage
		{
			get
			{
				return this._TotalAveragePatronage;
			}
			set
			{
				if ((this._TotalAveragePatronage != value))
				{
					this.OnTotalAveragePatronageChanging(value);
					this.SendPropertyChanging();
					this._TotalAveragePatronage = value;
					this.SendPropertyChanged("TotalAveragePatronage");
					this.OnTotalAveragePatronageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPatronageForRefund", DbType="Money NOT NULL")]
		public decimal TotalPatronageForRefund
		{
			get
			{
				return this._TotalPatronageForRefund;
			}
			set
			{
				if ((this._TotalPatronageForRefund != value))
				{
					this.OnTotalPatronageForRefundChanging(value);
					this.SendPropertyChanging();
					this._TotalPatronageForRefund = value;
					this.SendPropertyChanged("TotalPatronageForRefund");
					this.OnTotalPatronageForRefundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Posted", DbType="Bit NOT NULL")]
		public bool Posted
		{
			get
			{
				return this._Posted;
			}
			set
			{
				if ((this._Posted != value))
				{
					this.OnPostedChanging(value);
					this.SendPropertyChanging();
					this._Posted = value;
					this.SendPropertyChanged("Posted");
					this.OnPostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt")]
		public System.Nullable<long> AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YearlyPatronage_PatronageComputation", Storage="_PatronageComputations", ThisKey="Year", OtherKey="Year")]
		public EntitySet<PatronageComputation> PatronageComputations
		{
			get
			{
				return this._PatronageComputations;
			}
			set
			{
				this._PatronageComputations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NetSurplus_YearlyPatronage", Storage="_NetSurplus", ThisKey="Year", OtherKey="Year", IsForeignKey=true)]
		public NetSurplus NetSurplus
		{
			get
			{
				return this._NetSurplus.Entity;
			}
			set
			{
				NetSurplus previousValue = this._NetSurplus.Entity;
				if (((previousValue != value) 
							|| (this._NetSurplus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NetSurplus.Entity = null;
						previousValue.YearlyPatronage = null;
					}
					this._NetSurplus.Entity = value;
					if ((value != null))
					{
						value.YearlyPatronage = this;
						this._Year = value.Year;
					}
					else
					{
						this._Year = default(int);
					}
					this.SendPropertyChanged("NetSurplus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatronageComputations(PatronageComputation entity)
		{
			this.SendPropertyChanging();
			entity.YearlyPatronage = this;
		}
		
		private void detach_PatronageComputations(PatronageComputation entity)
		{
			this.SendPropertyChanging();
			entity.YearlyPatronage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.QuarterlyInterests")]
	public partial class QuarterlyInterest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _QuaterlyInterestID;
		
		private int _Year;
		
		private int _QuarterID;
		
		private decimal _InterestRate;
		
		private bool _Posted;
		
		private System.Nullable<long> _AdjustmentID;
		
		private EntitySet<QuarterlyInterestComputation> _QuarterlyInterestComputations;
		
		private EntityRef<Quarter> _Quarter;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuaterlyInterestIDChanging(long value);
    partial void OnQuaterlyInterestIDChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnQuarterIDChanging(int value);
    partial void OnQuarterIDChanged();
    partial void OnInterestRateChanging(decimal value);
    partial void OnInterestRateChanged();
    partial void OnPostedChanging(bool value);
    partial void OnPostedChanged();
    partial void OnAdjustmentIDChanging(System.Nullable<long> value);
    partial void OnAdjustmentIDChanged();
    #endregion
		
		public QuarterlyInterest()
		{
			this._QuarterlyInterestComputations = new EntitySet<QuarterlyInterestComputation>(new Action<QuarterlyInterestComputation>(this.attach_QuarterlyInterestComputations), new Action<QuarterlyInterestComputation>(this.detach_QuarterlyInterestComputations));
			this._Quarter = default(EntityRef<Quarter>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuaterlyInterestID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long QuaterlyInterestID
		{
			get
			{
				return this._QuaterlyInterestID;
			}
			set
			{
				if ((this._QuaterlyInterestID != value))
				{
					this.OnQuaterlyInterestIDChanging(value);
					this.SendPropertyChanging();
					this._QuaterlyInterestID = value;
					this.SendPropertyChanged("QuaterlyInterestID");
					this.OnQuaterlyInterestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuarterID", DbType="Int NOT NULL")]
		public int QuarterID
		{
			get
			{
				return this._QuarterID;
			}
			set
			{
				if ((this._QuarterID != value))
				{
					if (this._Quarter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuarterIDChanging(value);
					this.SendPropertyChanging();
					this._QuarterID = value;
					this.SendPropertyChanged("QuarterID");
					this.OnQuarterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestRate", DbType="Decimal(4,2) NOT NULL")]
		public decimal InterestRate
		{
			get
			{
				return this._InterestRate;
			}
			set
			{
				if ((this._InterestRate != value))
				{
					this.OnInterestRateChanging(value);
					this.SendPropertyChanging();
					this._InterestRate = value;
					this.SendPropertyChanged("InterestRate");
					this.OnInterestRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Posted", DbType="Bit NOT NULL")]
		public bool Posted
		{
			get
			{
				return this._Posted;
			}
			set
			{
				if ((this._Posted != value))
				{
					this.OnPostedChanging(value);
					this.SendPropertyChanging();
					this._Posted = value;
					this.SendPropertyChanged("Posted");
					this.OnPostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt")]
		public System.Nullable<long> AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuarterlyInterest_QuarterlyInterestComputation", Storage="_QuarterlyInterestComputations", ThisKey="QuaterlyInterestID", OtherKey="QuarterlyInterestID")]
		public EntitySet<QuarterlyInterestComputation> QuarterlyInterestComputations
		{
			get
			{
				return this._QuarterlyInterestComputations;
			}
			set
			{
				this._QuarterlyInterestComputations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quarter_QuarterlyInterest", Storage="_Quarter", ThisKey="QuarterID", OtherKey="QuarterID", IsForeignKey=true)]
		public Quarter Quarter
		{
			get
			{
				return this._Quarter.Entity;
			}
			set
			{
				Quarter previousValue = this._Quarter.Entity;
				if (((previousValue != value) 
							|| (this._Quarter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quarter.Entity = null;
						previousValue.QuarterlyInterests.Remove(this);
					}
					this._Quarter.Entity = value;
					if ((value != null))
					{
						value.QuarterlyInterests.Add(this);
						this._QuarterID = value.QuarterID;
					}
					else
					{
						this._QuarterID = default(int);
					}
					this.SendPropertyChanged("Quarter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_QuarterlyInterest", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.QuarterlyInterests.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.QuarterlyInterests.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuarterlyInterestComputations(QuarterlyInterestComputation entity)
		{
			this.SendPropertyChanging();
			entity.QuarterlyInterest = this;
		}
		
		private void detach_QuarterlyInterestComputations(QuarterlyInterestComputation entity)
		{
			this.SendPropertyChanging();
			entity.QuarterlyInterest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.CapitalShareInterestRebateAdjustments")]
	public partial class CapitalShareInterestRebateAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CapitalShare> _CapitalShare;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public CapitalShareInterestRebateAdjustment()
		{
			this._CapitalShare = default(EntityRef<CapitalShare>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._CapitalShare.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalShare_CapitalShareInterestRebateAdjustment", Storage="_CapitalShare", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public CapitalShare CapitalShare
		{
			get
			{
				return this._CapitalShare.Entity;
			}
			set
			{
				CapitalShare previousValue = this._CapitalShare.Entity;
				if (((previousValue != value) 
							|| (this._CapitalShare.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CapitalShare.Entity = null;
						previousValue.CapitalShareInterestRebateAdjustments.Remove(this);
					}
					this._CapitalShare.Entity = value;
					if ((value != null))
					{
						value.CapitalShareInterestRebateAdjustments.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("CapitalShare");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_CapitalShareInterestRebateAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.CapitalShareInterestRebateAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.CapitalShareInterestRebateAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialFunds.DeathAidFundTypes")]
	public partial class DeathAidFundType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private char _Id;
		
		private string _Name;
		
		private decimal _PerMemberAid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(char value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPerMemberAidChanging(decimal value);
    partial void OnPerMemberAidChanged();
    #endregion
		
		public DeathAidFundType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Char(1) NOT NULL", IsPrimaryKey=true)]
		public char Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerMemberAid", DbType="Money NOT NULL")]
		public decimal PerMemberAid
		{
			get
			{
				return this._PerMemberAid;
			}
			set
			{
				if ((this._PerMemberAid != value))
				{
					this.OnPerMemberAidChanging(value);
					this.SendPropertyChanging();
					this._PerMemberAid = value;
					this.SendPropertyChanged("PerMemberAid");
					this.OnPerMemberAidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialFunds.DeathAidFundSettings")]
	public partial class DeathAidFundSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private decimal _PerMemberYearlyContribution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPerMemberYearlyContributionChanging(decimal value);
    partial void OnPerMemberYearlyContributionChanged();
    #endregion
		
		public DeathAidFundSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerMemberYearlyContribution", DbType="Money NOT NULL")]
		public decimal PerMemberYearlyContribution
		{
			get
			{
				return this._PerMemberYearlyContribution;
			}
			set
			{
				if ((this._PerMemberYearlyContribution != value))
				{
					this.OnPerMemberYearlyContributionChanging(value);
					this.SendPropertyChanging();
					this._PerMemberYearlyContribution = value;
					this.SendPropertyChanged("PerMemberYearlyContribution");
					this.OnPerMemberYearlyContributionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialFunds.TulunganFundSettings")]
	public partial class TulunganFundSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private decimal _PerMemberYearlyContribution;
		
		private decimal _ReuiredMinimumShare;
		
		private decimal _AwardForShareBelowFifteenThousand;
		
		private decimal _AwardForShareFifteenThousandAndAbove;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPerMemberYearlyContributionChanging(decimal value);
    partial void OnPerMemberYearlyContributionChanged();
    partial void OnReuiredMinimumShareChanging(decimal value);
    partial void OnReuiredMinimumShareChanged();
    partial void OnAwardForShareBelowFifteenThousandChanging(decimal value);
    partial void OnAwardForShareBelowFifteenThousandChanged();
    partial void OnAwardForShareFifteenThousandAndAboveChanging(decimal value);
    partial void OnAwardForShareFifteenThousandAndAboveChanged();
    #endregion
		
		public TulunganFundSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerMemberYearlyContribution", DbType="Money NOT NULL")]
		public decimal PerMemberYearlyContribution
		{
			get
			{
				return this._PerMemberYearlyContribution;
			}
			set
			{
				if ((this._PerMemberYearlyContribution != value))
				{
					this.OnPerMemberYearlyContributionChanging(value);
					this.SendPropertyChanging();
					this._PerMemberYearlyContribution = value;
					this.SendPropertyChanged("PerMemberYearlyContribution");
					this.OnPerMemberYearlyContributionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReuiredMinimumShare", DbType="Money NOT NULL")]
		public decimal ReuiredMinimumShare
		{
			get
			{
				return this._ReuiredMinimumShare;
			}
			set
			{
				if ((this._ReuiredMinimumShare != value))
				{
					this.OnReuiredMinimumShareChanging(value);
					this.SendPropertyChanging();
					this._ReuiredMinimumShare = value;
					this.SendPropertyChanged("ReuiredMinimumShare");
					this.OnReuiredMinimumShareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwardForShareBelowFifteenThousand", DbType="Money NOT NULL")]
		public decimal AwardForShareBelowFifteenThousand
		{
			get
			{
				return this._AwardForShareBelowFifteenThousand;
			}
			set
			{
				if ((this._AwardForShareBelowFifteenThousand != value))
				{
					this.OnAwardForShareBelowFifteenThousandChanging(value);
					this.SendPropertyChanging();
					this._AwardForShareBelowFifteenThousand = value;
					this.SendPropertyChanged("AwardForShareBelowFifteenThousand");
					this.OnAwardForShareBelowFifteenThousandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwardForShareFifteenThousandAndAbove", DbType="Money NOT NULL")]
		public decimal AwardForShareFifteenThousandAndAbove
		{
			get
			{
				return this._AwardForShareFifteenThousandAndAbove;
			}
			set
			{
				if ((this._AwardForShareFifteenThousandAndAbove != value))
				{
					this.OnAwardForShareFifteenThousandAndAboveChanging(value);
					this.SendPropertyChanging();
					this._AwardForShareFifteenThousandAndAbove = value;
					this.SendPropertyChanged("AwardForShareFifteenThousandAndAbove");
					this.OnAwardForShareFifteenThousandAndAboveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Plans.CollegeInsurancePlanSettings")]
	public partial class CollegeInsurancePlanSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Terms;
		
		private int _AgingPeriod;
		
		private decimal _PaymentCompletionAmount;
		
		private decimal _AwardAmount;
		
		private decimal _AmortizationDaily;
		
		private decimal _AmortizationWeekly;
		
		private decimal _AmortizationSemiMonthly;
		
		private decimal _AmortizationMonthly;
		
		private decimal _AmortizationYearly;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTermsChanging(int value);
    partial void OnTermsChanged();
    partial void OnAgingPeriodChanging(int value);
    partial void OnAgingPeriodChanged();
    partial void OnPaymentCompletionAmountChanging(decimal value);
    partial void OnPaymentCompletionAmountChanged();
    partial void OnAwardAmountChanging(decimal value);
    partial void OnAwardAmountChanged();
    partial void OnAmortizationDailyChanging(decimal value);
    partial void OnAmortizationDailyChanged();
    partial void OnAmortizationWeeklyChanging(decimal value);
    partial void OnAmortizationWeeklyChanged();
    partial void OnAmortizationSemiMonthlyChanging(decimal value);
    partial void OnAmortizationSemiMonthlyChanged();
    partial void OnAmortizationMonthlyChanging(decimal value);
    partial void OnAmortizationMonthlyChanged();
    partial void OnAmortizationYearlyChanging(decimal value);
    partial void OnAmortizationYearlyChanged();
    #endregion
		
		public CollegeInsurancePlanSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Terms", DbType="Int NOT NULL")]
		public int Terms
		{
			get
			{
				return this._Terms;
			}
			set
			{
				if ((this._Terms != value))
				{
					this.OnTermsChanging(value);
					this.SendPropertyChanging();
					this._Terms = value;
					this.SendPropertyChanged("Terms");
					this.OnTermsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgingPeriod", DbType="Int NOT NULL")]
		public int AgingPeriod
		{
			get
			{
				return this._AgingPeriod;
			}
			set
			{
				if ((this._AgingPeriod != value))
				{
					this.OnAgingPeriodChanging(value);
					this.SendPropertyChanging();
					this._AgingPeriod = value;
					this.SendPropertyChanged("AgingPeriod");
					this.OnAgingPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentCompletionAmount", DbType="Money NOT NULL")]
		public decimal PaymentCompletionAmount
		{
			get
			{
				return this._PaymentCompletionAmount;
			}
			set
			{
				if ((this._PaymentCompletionAmount != value))
				{
					this.OnPaymentCompletionAmountChanging(value);
					this.SendPropertyChanging();
					this._PaymentCompletionAmount = value;
					this.SendPropertyChanged("PaymentCompletionAmount");
					this.OnPaymentCompletionAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwardAmount", DbType="Money NOT NULL")]
		public decimal AwardAmount
		{
			get
			{
				return this._AwardAmount;
			}
			set
			{
				if ((this._AwardAmount != value))
				{
					this.OnAwardAmountChanging(value);
					this.SendPropertyChanging();
					this._AwardAmount = value;
					this.SendPropertyChanged("AwardAmount");
					this.OnAwardAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationDaily", DbType="Money NOT NULL")]
		public decimal AmortizationDaily
		{
			get
			{
				return this._AmortizationDaily;
			}
			set
			{
				if ((this._AmortizationDaily != value))
				{
					this.OnAmortizationDailyChanging(value);
					this.SendPropertyChanging();
					this._AmortizationDaily = value;
					this.SendPropertyChanged("AmortizationDaily");
					this.OnAmortizationDailyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationWeekly", DbType="Money NOT NULL")]
		public decimal AmortizationWeekly
		{
			get
			{
				return this._AmortizationWeekly;
			}
			set
			{
				if ((this._AmortizationWeekly != value))
				{
					this.OnAmortizationWeeklyChanging(value);
					this.SendPropertyChanging();
					this._AmortizationWeekly = value;
					this.SendPropertyChanged("AmortizationWeekly");
					this.OnAmortizationWeeklyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationSemiMonthly", DbType="Money NOT NULL")]
		public decimal AmortizationSemiMonthly
		{
			get
			{
				return this._AmortizationSemiMonthly;
			}
			set
			{
				if ((this._AmortizationSemiMonthly != value))
				{
					this.OnAmortizationSemiMonthlyChanging(value);
					this.SendPropertyChanging();
					this._AmortizationSemiMonthly = value;
					this.SendPropertyChanged("AmortizationSemiMonthly");
					this.OnAmortizationSemiMonthlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationMonthly", DbType="Money NOT NULL")]
		public decimal AmortizationMonthly
		{
			get
			{
				return this._AmortizationMonthly;
			}
			set
			{
				if ((this._AmortizationMonthly != value))
				{
					this.OnAmortizationMonthlyChanging(value);
					this.SendPropertyChanging();
					this._AmortizationMonthly = value;
					this.SendPropertyChanged("AmortizationMonthly");
					this.OnAmortizationMonthlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationYearly", DbType="Money NOT NULL")]
		public decimal AmortizationYearly
		{
			get
			{
				return this._AmortizationYearly;
			}
			set
			{
				if ((this._AmortizationYearly != value))
				{
					this.OnAmortizationYearlyChanging(value);
					this.SendPropertyChanging();
					this._AmortizationYearly = value;
					this.SendPropertyChanged("AmortizationYearly");
					this.OnAmortizationYearlyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Lookup.PaymentModes")]
	public partial class PaymentMode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PaymentModeID;
		
		private string _PaymentModeName;
		
		private int _Days;
		
		private int _GracePeriod;
		
		private int _LoanPaymentsPerMonth;
		
		private int _CIPContributionsPerMonth;
		
		private int _PensionPlanContributionsPerMonth;
		
		private EntitySet<LoanInterestRate> _LoanInterestRates;
		
		private EntitySet<ServicePaymentMode> _ServicePaymentModes;
		
		private EntitySet<CollegeInsurancePlan> _CollegeInsurancePlans;
		
		private EntitySet<PensionPlan> _PensionPlans;
		
		private EntitySet<Loan> _Loans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentModeIDChanging(string value);
    partial void OnPaymentModeIDChanged();
    partial void OnPaymentModeNameChanging(string value);
    partial void OnPaymentModeNameChanged();
    partial void OnDaysChanging(int value);
    partial void OnDaysChanged();
    partial void OnGracePeriodChanging(int value);
    partial void OnGracePeriodChanged();
    partial void OnLoanPaymentsPerMonthChanging(int value);
    partial void OnLoanPaymentsPerMonthChanged();
    partial void OnCIPContributionsPerMonthChanging(int value);
    partial void OnCIPContributionsPerMonthChanged();
    partial void OnPensionPlanContributionsPerMonthChanging(int value);
    partial void OnPensionPlanContributionsPerMonthChanged();
    #endregion
		
		public PaymentMode()
		{
			this._LoanInterestRates = new EntitySet<LoanInterestRate>(new Action<LoanInterestRate>(this.attach_LoanInterestRates), new Action<LoanInterestRate>(this.detach_LoanInterestRates));
			this._ServicePaymentModes = new EntitySet<ServicePaymentMode>(new Action<ServicePaymentMode>(this.attach_ServicePaymentModes), new Action<ServicePaymentMode>(this.detach_ServicePaymentModes));
			this._CollegeInsurancePlans = new EntitySet<CollegeInsurancePlan>(new Action<CollegeInsurancePlan>(this.attach_CollegeInsurancePlans), new Action<CollegeInsurancePlan>(this.detach_CollegeInsurancePlans));
			this._PensionPlans = new EntitySet<PensionPlan>(new Action<PensionPlan>(this.attach_PensionPlans), new Action<PensionPlan>(this.detach_PensionPlans));
			this._Loans = new EntitySet<Loan>(new Action<Loan>(this.attach_Loans), new Action<Loan>(this.detach_Loans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentModeID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PaymentModeID
		{
			get
			{
				return this._PaymentModeID;
			}
			set
			{
				if ((this._PaymentModeID != value))
				{
					this.OnPaymentModeIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentModeID = value;
					this.SendPropertyChanged("PaymentModeID");
					this.OnPaymentModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentModeName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PaymentModeName
		{
			get
			{
				return this._PaymentModeName;
			}
			set
			{
				if ((this._PaymentModeName != value))
				{
					this.OnPaymentModeNameChanging(value);
					this.SendPropertyChanging();
					this._PaymentModeName = value;
					this.SendPropertyChanged("PaymentModeName");
					this.OnPaymentModeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Days", DbType="Int NOT NULL")]
		public int Days
		{
			get
			{
				return this._Days;
			}
			set
			{
				if ((this._Days != value))
				{
					this.OnDaysChanging(value);
					this.SendPropertyChanging();
					this._Days = value;
					this.SendPropertyChanged("Days");
					this.OnDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GracePeriod", DbType="Int NOT NULL")]
		public int GracePeriod
		{
			get
			{
				return this._GracePeriod;
			}
			set
			{
				if ((this._GracePeriod != value))
				{
					this.OnGracePeriodChanging(value);
					this.SendPropertyChanging();
					this._GracePeriod = value;
					this.SendPropertyChanged("GracePeriod");
					this.OnGracePeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanPaymentsPerMonth", DbType="Int NOT NULL")]
		public int LoanPaymentsPerMonth
		{
			get
			{
				return this._LoanPaymentsPerMonth;
			}
			set
			{
				if ((this._LoanPaymentsPerMonth != value))
				{
					this.OnLoanPaymentsPerMonthChanging(value);
					this.SendPropertyChanging();
					this._LoanPaymentsPerMonth = value;
					this.SendPropertyChanged("LoanPaymentsPerMonth");
					this.OnLoanPaymentsPerMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CIPContributionsPerMonth", DbType="Int NOT NULL")]
		public int CIPContributionsPerMonth
		{
			get
			{
				return this._CIPContributionsPerMonth;
			}
			set
			{
				if ((this._CIPContributionsPerMonth != value))
				{
					this.OnCIPContributionsPerMonthChanging(value);
					this.SendPropertyChanging();
					this._CIPContributionsPerMonth = value;
					this.SendPropertyChanged("CIPContributionsPerMonth");
					this.OnCIPContributionsPerMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PensionPlanContributionsPerMonth", DbType="Int NOT NULL")]
		public int PensionPlanContributionsPerMonth
		{
			get
			{
				return this._PensionPlanContributionsPerMonth;
			}
			set
			{
				if ((this._PensionPlanContributionsPerMonth != value))
				{
					this.OnPensionPlanContributionsPerMonthChanging(value);
					this.SendPropertyChanging();
					this._PensionPlanContributionsPerMonth = value;
					this.SendPropertyChanged("PensionPlanContributionsPerMonth");
					this.OnPensionPlanContributionsPerMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMode_LoanInterestRate", Storage="_LoanInterestRates", ThisKey="PaymentModeID", OtherKey="PaymentModeID")]
		public EntitySet<LoanInterestRate> LoanInterestRates
		{
			get
			{
				return this._LoanInterestRates;
			}
			set
			{
				this._LoanInterestRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMode_ServicePaymentMode", Storage="_ServicePaymentModes", ThisKey="PaymentModeID", OtherKey="PaymentModeID")]
		public EntitySet<ServicePaymentMode> ServicePaymentModes
		{
			get
			{
				return this._ServicePaymentModes;
			}
			set
			{
				this._ServicePaymentModes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMode_CollegeInsurancePlan", Storage="_CollegeInsurancePlans", ThisKey="PaymentModeID", OtherKey="PaymentModeID")]
		public EntitySet<CollegeInsurancePlan> CollegeInsurancePlans
		{
			get
			{
				return this._CollegeInsurancePlans;
			}
			set
			{
				this._CollegeInsurancePlans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMode_PensionPlan", Storage="_PensionPlans", ThisKey="PaymentModeID", OtherKey="PaymentModeID")]
		public EntitySet<PensionPlan> PensionPlans
		{
			get
			{
				return this._PensionPlans;
			}
			set
			{
				this._PensionPlans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMode_Loan", Storage="_Loans", ThisKey="PaymentModeID", OtherKey="PaymentModeID")]
		public EntitySet<Loan> Loans
		{
			get
			{
				return this._Loans;
			}
			set
			{
				this._Loans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LoanInterestRates(LoanInterestRate entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMode = this;
		}
		
		private void detach_LoanInterestRates(LoanInterestRate entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMode = null;
		}
		
		private void attach_ServicePaymentModes(ServicePaymentMode entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMode = this;
		}
		
		private void detach_ServicePaymentModes(ServicePaymentMode entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMode = null;
		}
		
		private void attach_CollegeInsurancePlans(CollegeInsurancePlan entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMode = this;
		}
		
		private void detach_CollegeInsurancePlans(CollegeInsurancePlan entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMode = null;
		}
		
		private void attach_PensionPlans(PensionPlan entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMode = this;
		}
		
		private void detach_PensionPlans(PensionPlan entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMode = null;
		}
		
		private void attach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMode = this;
		}
		
		private void detach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Link.ServicePaymentModes")]
	public partial class ServicePaymentMode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ServiceID;
		
		private string _PaymentModeID;
		
		private EntityRef<PaymentMode> _PaymentMode;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceIDChanging(string value);
    partial void OnServiceIDChanged();
    partial void OnPaymentModeIDChanging(string value);
    partial void OnPaymentModeIDChanged();
    #endregion
		
		public ServicePaymentMode()
		{
			this._PaymentMode = default(EntityRef<PaymentMode>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentModeID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PaymentModeID
		{
			get
			{
				return this._PaymentModeID;
			}
			set
			{
				if ((this._PaymentModeID != value))
				{
					if (this._PaymentMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentModeIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentModeID = value;
					this.SendPropertyChanged("PaymentModeID");
					this.OnPaymentModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMode_ServicePaymentMode", Storage="_PaymentMode", ThisKey="PaymentModeID", OtherKey="PaymentModeID", IsForeignKey=true)]
		public PaymentMode PaymentMode
		{
			get
			{
				return this._PaymentMode.Entity;
			}
			set
			{
				PaymentMode previousValue = this._PaymentMode.Entity;
				if (((previousValue != value) 
							|| (this._PaymentMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentMode.Entity = null;
						previousValue.ServicePaymentModes.Remove(this);
					}
					this._PaymentMode.Entity = value;
					if ((value != null))
					{
						value.ServicePaymentModes.Add(this);
						this._PaymentModeID = value.PaymentModeID;
					}
					else
					{
						this._PaymentModeID = default(string);
					}
					this.SendPropertyChanged("PaymentMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServicePaymentMode", Storage="_Service", ThisKey="ServiceID", OtherKey="ServiceID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ServicePaymentModes.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ServicePaymentModes.Add(this);
						this._ServiceID = value.ServiceID;
					}
					else
					{
						this._ServiceID = default(string);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Lookup.Services")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ServiceID;
		
		private string _ServiceCategoryID;
		
		private string _ServiceName;
		
		private EntitySet<AvailedService> _AvailedServices;
		
		private EntitySet<MembershipCategoryService> _MembershipCategoryServices;
		
		private EntitySet<PatronageItem> _PatronageItems;
		
		private EntitySet<ServicePaymentMode> _ServicePaymentModes;
		
		private EntitySet<DividendComputation> _DividendComputations;
		
		private EntitySet<Loan> _Loans;
		
		private EntityRef<ServiceCategory> _ServiceCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceIDChanging(string value);
    partial void OnServiceIDChanged();
    partial void OnServiceCategoryIDChanging(string value);
    partial void OnServiceCategoryIDChanged();
    partial void OnServiceNameChanging(string value);
    partial void OnServiceNameChanged();
    #endregion
		
		public Service()
		{
			this._AvailedServices = new EntitySet<AvailedService>(new Action<AvailedService>(this.attach_AvailedServices), new Action<AvailedService>(this.detach_AvailedServices));
			this._MembershipCategoryServices = new EntitySet<MembershipCategoryService>(new Action<MembershipCategoryService>(this.attach_MembershipCategoryServices), new Action<MembershipCategoryService>(this.detach_MembershipCategoryServices));
			this._PatronageItems = new EntitySet<PatronageItem>(new Action<PatronageItem>(this.attach_PatronageItems), new Action<PatronageItem>(this.detach_PatronageItems));
			this._ServicePaymentModes = new EntitySet<ServicePaymentMode>(new Action<ServicePaymentMode>(this.attach_ServicePaymentModes), new Action<ServicePaymentMode>(this.detach_ServicePaymentModes));
			this._DividendComputations = new EntitySet<DividendComputation>(new Action<DividendComputation>(this.attach_DividendComputations), new Action<DividendComputation>(this.detach_DividendComputations));
			this._Loans = new EntitySet<Loan>(new Action<Loan>(this.attach_Loans), new Action<Loan>(this.detach_Loans));
			this._ServiceCategory = default(EntityRef<ServiceCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceCategoryID", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string ServiceCategoryID
		{
			get
			{
				return this._ServiceCategoryID;
			}
			set
			{
				if ((this._ServiceCategoryID != value))
				{
					if (this._ServiceCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceCategoryID = value;
					this.SendPropertyChanged("ServiceCategoryID");
					this.OnServiceCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this.OnServiceNameChanging(value);
					this.SendPropertyChanging();
					this._ServiceName = value;
					this.SendPropertyChanged("ServiceName");
					this.OnServiceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_AvailedService", Storage="_AvailedServices", ThisKey="ServiceID", OtherKey="ServiceID")]
		public EntitySet<AvailedService> AvailedServices
		{
			get
			{
				return this._AvailedServices;
			}
			set
			{
				this._AvailedServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_MembershipCategoryService", Storage="_MembershipCategoryServices", ThisKey="ServiceID", OtherKey="ServiceID")]
		public EntitySet<MembershipCategoryService> MembershipCategoryServices
		{
			get
			{
				return this._MembershipCategoryServices;
			}
			set
			{
				this._MembershipCategoryServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_PatronageItem", Storage="_PatronageItems", ThisKey="ServiceID", OtherKey="LoanServiceID")]
		public EntitySet<PatronageItem> PatronageItems
		{
			get
			{
				return this._PatronageItems;
			}
			set
			{
				this._PatronageItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServicePaymentMode", Storage="_ServicePaymentModes", ThisKey="ServiceID", OtherKey="ServiceID")]
		public EntitySet<ServicePaymentMode> ServicePaymentModes
		{
			get
			{
				return this._ServicePaymentModes;
			}
			set
			{
				this._ServicePaymentModes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_DividendComputation", Storage="_DividendComputations", ThisKey="ServiceID", OtherKey="DepositoryServiceID")]
		public EntitySet<DividendComputation> DividendComputations
		{
			get
			{
				return this._DividendComputations;
			}
			set
			{
				this._DividendComputations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Loan", Storage="_Loans", ThisKey="ServiceID", OtherKey="LoanServiceID")]
		public EntitySet<Loan> Loans
		{
			get
			{
				return this._Loans;
			}
			set
			{
				this._Loans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceCategory_Service", Storage="_ServiceCategory", ThisKey="ServiceCategoryID", OtherKey="ServiceCategoryID", IsForeignKey=true)]
		public ServiceCategory ServiceCategory
		{
			get
			{
				return this._ServiceCategory.Entity;
			}
			set
			{
				ServiceCategory previousValue = this._ServiceCategory.Entity;
				if (((previousValue != value) 
							|| (this._ServiceCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceCategory.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._ServiceCategory.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._ServiceCategoryID = value.ServiceCategoryID;
					}
					else
					{
						this._ServiceCategoryID = default(string);
					}
					this.SendPropertyChanged("ServiceCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AvailedServices(AvailedService entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_AvailedServices(AvailedService entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_MembershipCategoryServices(MembershipCategoryService entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_MembershipCategoryServices(MembershipCategoryService entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_PatronageItems(PatronageItem entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_PatronageItems(PatronageItem entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_ServicePaymentModes(ServicePaymentMode entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ServicePaymentModes(ServicePaymentMode entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_DividendComputations(DividendComputation entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_DividendComputations(DividendComputation entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Plans.PensionPlanSettings")]
	public partial class PensionPlanSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Terms;
		
		private int _AgingPeriod;
		
		private decimal _PaymentCompletionAmount;
		
		private decimal _AmortizationDaily;
		
		private decimal _AmortizationWeekly;
		
		private decimal _AmortizationSemiMonthly;
		
		private decimal _AmortizationMonthly;
		
		private decimal _AmortizationYearly;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTermsChanging(int value);
    partial void OnTermsChanged();
    partial void OnAgingPeriodChanging(int value);
    partial void OnAgingPeriodChanged();
    partial void OnPaymentCompletionAmountChanging(decimal value);
    partial void OnPaymentCompletionAmountChanged();
    partial void OnAmortizationDailyChanging(decimal value);
    partial void OnAmortizationDailyChanged();
    partial void OnAmortizationWeeklyChanging(decimal value);
    partial void OnAmortizationWeeklyChanged();
    partial void OnAmortizationSemiMonthlyChanging(decimal value);
    partial void OnAmortizationSemiMonthlyChanged();
    partial void OnAmortizationMonthlyChanging(decimal value);
    partial void OnAmortizationMonthlyChanged();
    partial void OnAmortizationYearlyChanging(decimal value);
    partial void OnAmortizationYearlyChanged();
    #endregion
		
		public PensionPlanSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Terms", DbType="Int NOT NULL")]
		public int Terms
		{
			get
			{
				return this._Terms;
			}
			set
			{
				if ((this._Terms != value))
				{
					this.OnTermsChanging(value);
					this.SendPropertyChanging();
					this._Terms = value;
					this.SendPropertyChanged("Terms");
					this.OnTermsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgingPeriod", DbType="Int NOT NULL")]
		public int AgingPeriod
		{
			get
			{
				return this._AgingPeriod;
			}
			set
			{
				if ((this._AgingPeriod != value))
				{
					this.OnAgingPeriodChanging(value);
					this.SendPropertyChanging();
					this._AgingPeriod = value;
					this.SendPropertyChanged("AgingPeriod");
					this.OnAgingPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentCompletionAmount", DbType="Money NOT NULL")]
		public decimal PaymentCompletionAmount
		{
			get
			{
				return this._PaymentCompletionAmount;
			}
			set
			{
				if ((this._PaymentCompletionAmount != value))
				{
					this.OnPaymentCompletionAmountChanging(value);
					this.SendPropertyChanging();
					this._PaymentCompletionAmount = value;
					this.SendPropertyChanged("PaymentCompletionAmount");
					this.OnPaymentCompletionAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationDaily", DbType="Money NOT NULL")]
		public decimal AmortizationDaily
		{
			get
			{
				return this._AmortizationDaily;
			}
			set
			{
				if ((this._AmortizationDaily != value))
				{
					this.OnAmortizationDailyChanging(value);
					this.SendPropertyChanging();
					this._AmortizationDaily = value;
					this.SendPropertyChanged("AmortizationDaily");
					this.OnAmortizationDailyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationWeekly", DbType="Money NOT NULL")]
		public decimal AmortizationWeekly
		{
			get
			{
				return this._AmortizationWeekly;
			}
			set
			{
				if ((this._AmortizationWeekly != value))
				{
					this.OnAmortizationWeeklyChanging(value);
					this.SendPropertyChanging();
					this._AmortizationWeekly = value;
					this.SendPropertyChanged("AmortizationWeekly");
					this.OnAmortizationWeeklyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationSemiMonthly", DbType="Money NOT NULL")]
		public decimal AmortizationSemiMonthly
		{
			get
			{
				return this._AmortizationSemiMonthly;
			}
			set
			{
				if ((this._AmortizationSemiMonthly != value))
				{
					this.OnAmortizationSemiMonthlyChanging(value);
					this.SendPropertyChanging();
					this._AmortizationSemiMonthly = value;
					this.SendPropertyChanged("AmortizationSemiMonthly");
					this.OnAmortizationSemiMonthlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationMonthly", DbType="Money NOT NULL")]
		public decimal AmortizationMonthly
		{
			get
			{
				return this._AmortizationMonthly;
			}
			set
			{
				if ((this._AmortizationMonthly != value))
				{
					this.OnAmortizationMonthlyChanging(value);
					this.SendPropertyChanging();
					this._AmortizationMonthly = value;
					this.SendPropertyChanged("AmortizationMonthly");
					this.OnAmortizationMonthlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationYearly", DbType="Money NOT NULL")]
		public decimal AmortizationYearly
		{
			get
			{
				return this._AmortizationYearly;
			}
			set
			{
				if ((this._AmortizationYearly != value))
				{
					this.OnAmortizationYearlyChanging(value);
					this.SendPropertyChanging();
					this._AmortizationYearly = value;
					this.SendPropertyChanged("AmortizationYearly");
					this.OnAmortizationYearlyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.CapitalShareBuildups")]
	public partial class CapitalShareBuildup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _DisbursementID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CapitalShare> _CapitalShare;
		
		private EntityRef<CashDisbursement> _CashDisbursement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnDisbursementIDChanging(long value);
    partial void OnDisbursementIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public CapitalShareBuildup()
		{
			this._CapitalShare = default(EntityRef<CapitalShare>);
			this._CashDisbursement = default(EntityRef<CashDisbursement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._CapitalShare.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisbursementID", DbType="BigInt NOT NULL")]
		public long DisbursementID
		{
			get
			{
				return this._DisbursementID;
			}
			set
			{
				if ((this._DisbursementID != value))
				{
					if (this._CashDisbursement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisbursementIDChanging(value);
					this.SendPropertyChanging();
					this._DisbursementID = value;
					this.SendPropertyChanged("DisbursementID");
					this.OnDisbursementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalShare_CapitalShareBuildup", Storage="_CapitalShare", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public CapitalShare CapitalShare
		{
			get
			{
				return this._CapitalShare.Entity;
			}
			set
			{
				CapitalShare previousValue = this._CapitalShare.Entity;
				if (((previousValue != value) 
							|| (this._CapitalShare.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CapitalShare.Entity = null;
						previousValue.CapitalShareBuildups.Remove(this);
					}
					this._CapitalShare.Entity = value;
					if ((value != null))
					{
						value.CapitalShareBuildups.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("CapitalShare");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_CapitalShareBuildup", Storage="_CashDisbursement", ThisKey="DisbursementID", OtherKey="DisbursementID", IsForeignKey=true)]
		public CashDisbursement CashDisbursement
		{
			get
			{
				return this._CashDisbursement.Entity;
			}
			set
			{
				CashDisbursement previousValue = this._CashDisbursement.Entity;
				if (((previousValue != value) 
							|| (this._CashDisbursement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashDisbursement.Entity = null;
						previousValue.CapitalShareBuildups.Remove(this);
					}
					this._CashDisbursement.Entity = value;
					if ((value != null))
					{
						value.CapitalShareBuildups.Add(this);
						this._DisbursementID = value.DisbursementID;
					}
					else
					{
						this._DisbursementID = default(long);
					}
					this.SendPropertyChanged("CashDisbursement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.LoanSettings")]
	public partial class LoanSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LoanSettingID;
		
		private decimal _RenewablePaidPercentage;
		
		private decimal _RegularLoanMaxPrecentage;
		
		private int _RebateExemptedTerms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanSettingIDChanging(int value);
    partial void OnLoanSettingIDChanged();
    partial void OnRenewablePaidPercentageChanging(decimal value);
    partial void OnRenewablePaidPercentageChanged();
    partial void OnRegularLoanMaxPrecentageChanging(decimal value);
    partial void OnRegularLoanMaxPrecentageChanged();
    partial void OnRebateExemptedTermsChanging(int value);
    partial void OnRebateExemptedTermsChanged();
    #endregion
		
		public LoanSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanSettingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LoanSettingID
		{
			get
			{
				return this._LoanSettingID;
			}
			set
			{
				if ((this._LoanSettingID != value))
				{
					this.OnLoanSettingIDChanging(value);
					this.SendPropertyChanging();
					this._LoanSettingID = value;
					this.SendPropertyChanged("LoanSettingID");
					this.OnLoanSettingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RenewablePaidPercentage", DbType="Decimal(5,2) NOT NULL")]
		public decimal RenewablePaidPercentage
		{
			get
			{
				return this._RenewablePaidPercentage;
			}
			set
			{
				if ((this._RenewablePaidPercentage != value))
				{
					this.OnRenewablePaidPercentageChanging(value);
					this.SendPropertyChanging();
					this._RenewablePaidPercentage = value;
					this.SendPropertyChanged("RenewablePaidPercentage");
					this.OnRenewablePaidPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegularLoanMaxPrecentage", DbType="Decimal(5,2) NOT NULL")]
		public decimal RegularLoanMaxPrecentage
		{
			get
			{
				return this._RegularLoanMaxPrecentage;
			}
			set
			{
				if ((this._RegularLoanMaxPrecentage != value))
				{
					this.OnRegularLoanMaxPrecentageChanging(value);
					this.SendPropertyChanging();
					this._RegularLoanMaxPrecentage = value;
					this.SendPropertyChanged("RegularLoanMaxPrecentage");
					this.OnRegularLoanMaxPrecentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RebateExemptedTerms", DbType="Int NOT NULL")]
		public int RebateExemptedTerms
		{
			get
			{
				return this._RebateExemptedTerms;
			}
			set
			{
				if ((this._RebateExemptedTerms != value))
				{
					this.OnRebateExemptedTermsChanging(value);
					this.SendPropertyChanging();
					this._RebateExemptedTerms = value;
					this.SendPropertyChanged("RebateExemptedTerms");
					this.OnRebateExemptedTermsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.LoanAdjustments")]
	public partial class LoanAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _LoanID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<Adjustment> _Adjustment;
		
		private EntityRef<Loan> _Loan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnLoanIDChanging(long value);
    partial void OnLoanIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public LoanAdjustment()
		{
			this._Adjustment = default(EntityRef<Adjustment>);
			this._Loan = default(EntityRef<Loan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanID", DbType="BigInt NOT NULL")]
		public long LoanID
		{
			get
			{
				return this._LoanID;
			}
			set
			{
				if ((this._LoanID != value))
				{
					if (this._Loan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanIDChanging(value);
					this.SendPropertyChanging();
					this._LoanID = value;
					this.SendPropertyChanged("LoanID");
					this.OnLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_LoanAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.LoanAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.LoanAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_LoanAdjustment", Storage="_Loan", ThisKey="LoanID", OtherKey="LoanID", IsForeignKey=true)]
		public Loan Loan
		{
			get
			{
				return this._Loan.Entity;
			}
			set
			{
				Loan previousValue = this._Loan.Entity;
				if (((previousValue != value) 
							|| (this._Loan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Loan.Entity = null;
						previousValue.LoanAdjustments.Remove(this);
					}
					this._Loan.Entity = value;
					if ((value != null))
					{
						value.LoanAdjustments.Add(this);
						this._LoanID = value.LoanID;
					}
					else
					{
						this._LoanID = default(long);
					}
					this.SendPropertyChanged("Loan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Plans.CollegeInsurancePlans")]
	public partial class CollegeInsurancePlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CollegeInsurancePlanID;
		
		private long _MemberID;
		
		private string _UserLastName;
		
		private string _UserFirstName;
		
		private string _UserMiddleName;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _Address;
		
		private System.Nullable<int> _RelationID;
		
		private System.DateTime _ApplicationDate;
		
		private string _PaymentModeID;
		
		private int _Terms;
		
		private int _AgingPeriod;
		
		private System.Nullable<System.DateTime> _MaturityDate;
		
		private decimal _Amortization;
		
		private System.Nullable<System.DateTime> _PaymentCompletionDate;
		
		private decimal _PaymentCompletionAmount;
		
		private decimal _AwardAmount;
		
		private bool _Consumed;
		
		private System.Nullable<System.DateTime> _ConsummationDate;
		
		private decimal _CurrentBalance;
		
		private EntitySet<CollegeInsurancePlanAdjustment> _CollegeInsurancePlanAdjustments;
		
		private EntitySet<CollegeInsurancePlanDisbursement> _CollegeInsurancePlanDisbursements;
		
		private EntitySet<CollegeInsurancePlanReceipt> _CollegeInsurancePlanReceipts;
		
		private EntityRef<PaymentMode> _PaymentMode;
		
		private EntityRef<Relation> _Relation;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollegeInsurancePlanIDChanging(long value);
    partial void OnCollegeInsurancePlanIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnUserLastNameChanging(string value);
    partial void OnUserLastNameChanged();
    partial void OnUserFirstNameChanging(string value);
    partial void OnUserFirstNameChanged();
    partial void OnUserMiddleNameChanging(string value);
    partial void OnUserMiddleNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnRelationIDChanging(System.Nullable<int> value);
    partial void OnRelationIDChanged();
    partial void OnApplicationDateChanging(System.DateTime value);
    partial void OnApplicationDateChanged();
    partial void OnPaymentModeIDChanging(string value);
    partial void OnPaymentModeIDChanged();
    partial void OnTermsChanging(int value);
    partial void OnTermsChanged();
    partial void OnAgingPeriodChanging(int value);
    partial void OnAgingPeriodChanged();
    partial void OnMaturityDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMaturityDateChanged();
    partial void OnAmortizationChanging(decimal value);
    partial void OnAmortizationChanged();
    partial void OnPaymentCompletionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentCompletionDateChanged();
    partial void OnPaymentCompletionAmountChanging(decimal value);
    partial void OnPaymentCompletionAmountChanged();
    partial void OnAwardAmountChanging(decimal value);
    partial void OnAwardAmountChanged();
    partial void OnConsumedChanging(bool value);
    partial void OnConsumedChanged();
    partial void OnConsummationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnConsummationDateChanged();
    partial void OnCurrentBalanceChanging(decimal value);
    partial void OnCurrentBalanceChanged();
    #endregion
		
		public CollegeInsurancePlan()
		{
			this._CollegeInsurancePlanAdjustments = new EntitySet<CollegeInsurancePlanAdjustment>(new Action<CollegeInsurancePlanAdjustment>(this.attach_CollegeInsurancePlanAdjustments), new Action<CollegeInsurancePlanAdjustment>(this.detach_CollegeInsurancePlanAdjustments));
			this._CollegeInsurancePlanDisbursements = new EntitySet<CollegeInsurancePlanDisbursement>(new Action<CollegeInsurancePlanDisbursement>(this.attach_CollegeInsurancePlanDisbursements), new Action<CollegeInsurancePlanDisbursement>(this.detach_CollegeInsurancePlanDisbursements));
			this._CollegeInsurancePlanReceipts = new EntitySet<CollegeInsurancePlanReceipt>(new Action<CollegeInsurancePlanReceipt>(this.attach_CollegeInsurancePlanReceipts), new Action<CollegeInsurancePlanReceipt>(this.detach_CollegeInsurancePlanReceipts));
			this._PaymentMode = default(EntityRef<PaymentMode>);
			this._Relation = default(EntityRef<Relation>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollegeInsurancePlanID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long CollegeInsurancePlanID
		{
			get
			{
				return this._CollegeInsurancePlanID;
			}
			set
			{
				if ((this._CollegeInsurancePlanID != value))
				{
					this.OnCollegeInsurancePlanIDChanging(value);
					this.SendPropertyChanging();
					this._CollegeInsurancePlanID = value;
					this.SendPropertyChanged("CollegeInsurancePlanID");
					this.OnCollegeInsurancePlanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserLastName
		{
			get
			{
				return this._UserLastName;
			}
			set
			{
				if ((this._UserLastName != value))
				{
					this.OnUserLastNameChanging(value);
					this.SendPropertyChanging();
					this._UserLastName = value;
					this.SendPropertyChanged("UserLastName");
					this.OnUserLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserFirstName
		{
			get
			{
				return this._UserFirstName;
			}
			set
			{
				if ((this._UserFirstName != value))
				{
					this.OnUserFirstNameChanging(value);
					this.SendPropertyChanging();
					this._UserFirstName = value;
					this.SendPropertyChanged("UserFirstName");
					this.OnUserFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserMiddleName", DbType="VarChar(50)")]
		public string UserMiddleName
		{
			get
			{
				return this._UserMiddleName;
			}
			set
			{
				if ((this._UserMiddleName != value))
				{
					this.OnUserMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._UserMiddleName = value;
					this.SendPropertyChanged("UserMiddleName");
					this.OnUserMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(80)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationID", DbType="Int")]
		public System.Nullable<int> RelationID
		{
			get
			{
				return this._RelationID;
			}
			set
			{
				if ((this._RelationID != value))
				{
					if (this._Relation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationIDChanging(value);
					this.SendPropertyChanging();
					this._RelationID = value;
					this.SendPropertyChanged("RelationID");
					this.OnRelationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ApplicationDate
		{
			get
			{
				return this._ApplicationDate;
			}
			set
			{
				if ((this._ApplicationDate != value))
				{
					this.OnApplicationDateChanging(value);
					this.SendPropertyChanging();
					this._ApplicationDate = value;
					this.SendPropertyChanged("ApplicationDate");
					this.OnApplicationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentModeID", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string PaymentModeID
		{
			get
			{
				return this._PaymentModeID;
			}
			set
			{
				if ((this._PaymentModeID != value))
				{
					if (this._PaymentMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentModeIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentModeID = value;
					this.SendPropertyChanged("PaymentModeID");
					this.OnPaymentModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Terms", DbType="Int NOT NULL")]
		public int Terms
		{
			get
			{
				return this._Terms;
			}
			set
			{
				if ((this._Terms != value))
				{
					this.OnTermsChanging(value);
					this.SendPropertyChanging();
					this._Terms = value;
					this.SendPropertyChanged("Terms");
					this.OnTermsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgingPeriod", DbType="Int NOT NULL")]
		public int AgingPeriod
		{
			get
			{
				return this._AgingPeriod;
			}
			set
			{
				if ((this._AgingPeriod != value))
				{
					this.OnAgingPeriodChanging(value);
					this.SendPropertyChanging();
					this._AgingPeriod = value;
					this.SendPropertyChanged("AgingPeriod");
					this.OnAgingPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaturityDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> MaturityDate
		{
			get
			{
				return this._MaturityDate;
			}
			set
			{
				if ((this._MaturityDate != value))
				{
					this.OnMaturityDateChanging(value);
					this.SendPropertyChanging();
					this._MaturityDate = value;
					this.SendPropertyChanged("MaturityDate");
					this.OnMaturityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amortization", DbType="Money NOT NULL")]
		public decimal Amortization
		{
			get
			{
				return this._Amortization;
			}
			set
			{
				if ((this._Amortization != value))
				{
					this.OnAmortizationChanging(value);
					this.SendPropertyChanging();
					this._Amortization = value;
					this.SendPropertyChanged("Amortization");
					this.OnAmortizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentCompletionDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> PaymentCompletionDate
		{
			get
			{
				return this._PaymentCompletionDate;
			}
			set
			{
				if ((this._PaymentCompletionDate != value))
				{
					this.OnPaymentCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentCompletionDate = value;
					this.SendPropertyChanged("PaymentCompletionDate");
					this.OnPaymentCompletionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentCompletionAmount", DbType="Money NOT NULL")]
		public decimal PaymentCompletionAmount
		{
			get
			{
				return this._PaymentCompletionAmount;
			}
			set
			{
				if ((this._PaymentCompletionAmount != value))
				{
					this.OnPaymentCompletionAmountChanging(value);
					this.SendPropertyChanging();
					this._PaymentCompletionAmount = value;
					this.SendPropertyChanged("PaymentCompletionAmount");
					this.OnPaymentCompletionAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwardAmount", DbType="Money NOT NULL")]
		public decimal AwardAmount
		{
			get
			{
				return this._AwardAmount;
			}
			set
			{
				if ((this._AwardAmount != value))
				{
					this.OnAwardAmountChanging(value);
					this.SendPropertyChanging();
					this._AwardAmount = value;
					this.SendPropertyChanged("AwardAmount");
					this.OnAwardAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Consumed", DbType="Bit NOT NULL")]
		public bool Consumed
		{
			get
			{
				return this._Consumed;
			}
			set
			{
				if ((this._Consumed != value))
				{
					this.OnConsumedChanging(value);
					this.SendPropertyChanging();
					this._Consumed = value;
					this.SendPropertyChanged("Consumed");
					this.OnConsumedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsummationDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ConsummationDate
		{
			get
			{
				return this._ConsummationDate;
			}
			set
			{
				if ((this._ConsummationDate != value))
				{
					this.OnConsummationDateChanging(value);
					this.SendPropertyChanging();
					this._ConsummationDate = value;
					this.SendPropertyChanged("ConsummationDate");
					this.OnConsummationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentBalance", DbType="Money NOT NULL")]
		public decimal CurrentBalance
		{
			get
			{
				return this._CurrentBalance;
			}
			set
			{
				if ((this._CurrentBalance != value))
				{
					this.OnCurrentBalanceChanging(value);
					this.SendPropertyChanging();
					this._CurrentBalance = value;
					this.SendPropertyChanged("CurrentBalance");
					this.OnCurrentBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CollegeInsurancePlan_CollegeInsurancePlanAdjustment", Storage="_CollegeInsurancePlanAdjustments", ThisKey="CollegeInsurancePlanID", OtherKey="CollegeInsurancePlanID")]
		public EntitySet<CollegeInsurancePlanAdjustment> CollegeInsurancePlanAdjustments
		{
			get
			{
				return this._CollegeInsurancePlanAdjustments;
			}
			set
			{
				this._CollegeInsurancePlanAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CollegeInsurancePlan_CollegeInsurancePlanDisbursement", Storage="_CollegeInsurancePlanDisbursements", ThisKey="CollegeInsurancePlanID", OtherKey="CollegeInsurancePlanID")]
		public EntitySet<CollegeInsurancePlanDisbursement> CollegeInsurancePlanDisbursements
		{
			get
			{
				return this._CollegeInsurancePlanDisbursements;
			}
			set
			{
				this._CollegeInsurancePlanDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CollegeInsurancePlan_CollegeInsurancePlanReceipt", Storage="_CollegeInsurancePlanReceipts", ThisKey="CollegeInsurancePlanID", OtherKey="CollegeInsurancePlanID")]
		public EntitySet<CollegeInsurancePlanReceipt> CollegeInsurancePlanReceipts
		{
			get
			{
				return this._CollegeInsurancePlanReceipts;
			}
			set
			{
				this._CollegeInsurancePlanReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMode_CollegeInsurancePlan", Storage="_PaymentMode", ThisKey="PaymentModeID", OtherKey="PaymentModeID", IsForeignKey=true)]
		public PaymentMode PaymentMode
		{
			get
			{
				return this._PaymentMode.Entity;
			}
			set
			{
				PaymentMode previousValue = this._PaymentMode.Entity;
				if (((previousValue != value) 
							|| (this._PaymentMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentMode.Entity = null;
						previousValue.CollegeInsurancePlans.Remove(this);
					}
					this._PaymentMode.Entity = value;
					if ((value != null))
					{
						value.CollegeInsurancePlans.Add(this);
						this._PaymentModeID = value.PaymentModeID;
					}
					else
					{
						this._PaymentModeID = default(string);
					}
					this.SendPropertyChanged("PaymentMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Relation_CollegeInsurancePlan", Storage="_Relation", ThisKey="RelationID", OtherKey="RelationID", IsForeignKey=true)]
		public Relation Relation
		{
			get
			{
				return this._Relation.Entity;
			}
			set
			{
				Relation previousValue = this._Relation.Entity;
				if (((previousValue != value) 
							|| (this._Relation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Relation.Entity = null;
						previousValue.CollegeInsurancePlans.Remove(this);
					}
					this._Relation.Entity = value;
					if ((value != null))
					{
						value.CollegeInsurancePlans.Add(this);
						this._RelationID = value.RelationID;
					}
					else
					{
						this._RelationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Relation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_CollegeInsurancePlan", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.CollegeInsurancePlans.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.CollegeInsurancePlans.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollegeInsurancePlanAdjustments(CollegeInsurancePlanAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.CollegeInsurancePlan = this;
		}
		
		private void detach_CollegeInsurancePlanAdjustments(CollegeInsurancePlanAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.CollegeInsurancePlan = null;
		}
		
		private void attach_CollegeInsurancePlanDisbursements(CollegeInsurancePlanDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CollegeInsurancePlan = this;
		}
		
		private void detach_CollegeInsurancePlanDisbursements(CollegeInsurancePlanDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.CollegeInsurancePlan = null;
		}
		
		private void attach_CollegeInsurancePlanReceipts(CollegeInsurancePlanReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CollegeInsurancePlan = this;
		}
		
		private void detach_CollegeInsurancePlanReceipts(CollegeInsurancePlanReceipt entity)
		{
			this.SendPropertyChanging();
			entity.CollegeInsurancePlan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Plans.CollegeInsurancePlanAdjustments")]
	public partial class CollegeInsurancePlanAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _CollegeInsurancePlanID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CollegeInsurancePlan> _CollegeInsurancePlan;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCollegeInsurancePlanIDChanging(long value);
    partial void OnCollegeInsurancePlanIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public CollegeInsurancePlanAdjustment()
		{
			this._CollegeInsurancePlan = default(EntityRef<CollegeInsurancePlan>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollegeInsurancePlanID", DbType="BigInt NOT NULL")]
		public long CollegeInsurancePlanID
		{
			get
			{
				return this._CollegeInsurancePlanID;
			}
			set
			{
				if ((this._CollegeInsurancePlanID != value))
				{
					if (this._CollegeInsurancePlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollegeInsurancePlanIDChanging(value);
					this.SendPropertyChanging();
					this._CollegeInsurancePlanID = value;
					this.SendPropertyChanged("CollegeInsurancePlanID");
					this.OnCollegeInsurancePlanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CollegeInsurancePlan_CollegeInsurancePlanAdjustment", Storage="_CollegeInsurancePlan", ThisKey="CollegeInsurancePlanID", OtherKey="CollegeInsurancePlanID", IsForeignKey=true)]
		public CollegeInsurancePlan CollegeInsurancePlan
		{
			get
			{
				return this._CollegeInsurancePlan.Entity;
			}
			set
			{
				CollegeInsurancePlan previousValue = this._CollegeInsurancePlan.Entity;
				if (((previousValue != value) 
							|| (this._CollegeInsurancePlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CollegeInsurancePlan.Entity = null;
						previousValue.CollegeInsurancePlanAdjustments.Remove(this);
					}
					this._CollegeInsurancePlan.Entity = value;
					if ((value != null))
					{
						value.CollegeInsurancePlanAdjustments.Add(this);
						this._CollegeInsurancePlanID = value.CollegeInsurancePlanID;
					}
					else
					{
						this._CollegeInsurancePlanID = default(long);
					}
					this.SendPropertyChanged("CollegeInsurancePlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_CollegeInsurancePlanAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.CollegeInsurancePlanAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.CollegeInsurancePlanAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Plans.CollegeInsurancePlanDisbursements")]
	public partial class CollegeInsurancePlanDisbursement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _CollegeInsurancePlanID;
		
		private long _DisbursementID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CashDisbursement> _CashDisbursement;
		
		private EntityRef<CollegeInsurancePlan> _CollegeInsurancePlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCollegeInsurancePlanIDChanging(long value);
    partial void OnCollegeInsurancePlanIDChanged();
    partial void OnDisbursementIDChanging(long value);
    partial void OnDisbursementIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public CollegeInsurancePlanDisbursement()
		{
			this._CashDisbursement = default(EntityRef<CashDisbursement>);
			this._CollegeInsurancePlan = default(EntityRef<CollegeInsurancePlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollegeInsurancePlanID", DbType="BigInt NOT NULL")]
		public long CollegeInsurancePlanID
		{
			get
			{
				return this._CollegeInsurancePlanID;
			}
			set
			{
				if ((this._CollegeInsurancePlanID != value))
				{
					if (this._CollegeInsurancePlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollegeInsurancePlanIDChanging(value);
					this.SendPropertyChanging();
					this._CollegeInsurancePlanID = value;
					this.SendPropertyChanged("CollegeInsurancePlanID");
					this.OnCollegeInsurancePlanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisbursementID", DbType="BigInt NOT NULL")]
		public long DisbursementID
		{
			get
			{
				return this._DisbursementID;
			}
			set
			{
				if ((this._DisbursementID != value))
				{
					if (this._CashDisbursement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisbursementIDChanging(value);
					this.SendPropertyChanging();
					this._DisbursementID = value;
					this.SendPropertyChanged("DisbursementID");
					this.OnDisbursementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_CollegeInsurancePlanDisbursement", Storage="_CashDisbursement", ThisKey="DisbursementID", OtherKey="DisbursementID", IsForeignKey=true)]
		public CashDisbursement CashDisbursement
		{
			get
			{
				return this._CashDisbursement.Entity;
			}
			set
			{
				CashDisbursement previousValue = this._CashDisbursement.Entity;
				if (((previousValue != value) 
							|| (this._CashDisbursement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashDisbursement.Entity = null;
						previousValue.CollegeInsurancePlanDisbursements.Remove(this);
					}
					this._CashDisbursement.Entity = value;
					if ((value != null))
					{
						value.CollegeInsurancePlanDisbursements.Add(this);
						this._DisbursementID = value.DisbursementID;
					}
					else
					{
						this._DisbursementID = default(long);
					}
					this.SendPropertyChanged("CashDisbursement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CollegeInsurancePlan_CollegeInsurancePlanDisbursement", Storage="_CollegeInsurancePlan", ThisKey="CollegeInsurancePlanID", OtherKey="CollegeInsurancePlanID", IsForeignKey=true)]
		public CollegeInsurancePlan CollegeInsurancePlan
		{
			get
			{
				return this._CollegeInsurancePlan.Entity;
			}
			set
			{
				CollegeInsurancePlan previousValue = this._CollegeInsurancePlan.Entity;
				if (((previousValue != value) 
							|| (this._CollegeInsurancePlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CollegeInsurancePlan.Entity = null;
						previousValue.CollegeInsurancePlanDisbursements.Remove(this);
					}
					this._CollegeInsurancePlan.Entity = value;
					if ((value != null))
					{
						value.CollegeInsurancePlanDisbursements.Add(this);
						this._CollegeInsurancePlanID = value.CollegeInsurancePlanID;
					}
					else
					{
						this._CollegeInsurancePlanID = default(long);
					}
					this.SendPropertyChanged("CollegeInsurancePlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Plans.CollegeInsurancePlanReceipts")]
	public partial class CollegeInsurancePlanReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _CollegeInsurancePlanID;
		
		private long _ReceiptID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CashReceipt> _CashReceipt;
		
		private EntityRef<CollegeInsurancePlan> _CollegeInsurancePlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCollegeInsurancePlanIDChanging(long value);
    partial void OnCollegeInsurancePlanIDChanged();
    partial void OnReceiptIDChanging(long value);
    partial void OnReceiptIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public CollegeInsurancePlanReceipt()
		{
			this._CashReceipt = default(EntityRef<CashReceipt>);
			this._CollegeInsurancePlan = default(EntityRef<CollegeInsurancePlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollegeInsurancePlanID", DbType="BigInt NOT NULL")]
		public long CollegeInsurancePlanID
		{
			get
			{
				return this._CollegeInsurancePlanID;
			}
			set
			{
				if ((this._CollegeInsurancePlanID != value))
				{
					if (this._CollegeInsurancePlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollegeInsurancePlanIDChanging(value);
					this.SendPropertyChanging();
					this._CollegeInsurancePlanID = value;
					this.SendPropertyChanged("CollegeInsurancePlanID");
					this.OnCollegeInsurancePlanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="BigInt NOT NULL")]
		public long ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					if (this._CashReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_CollegeInsurancePlanReceipt", Storage="_CashReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsForeignKey=true)]
		public CashReceipt CashReceipt
		{
			get
			{
				return this._CashReceipt.Entity;
			}
			set
			{
				CashReceipt previousValue = this._CashReceipt.Entity;
				if (((previousValue != value) 
							|| (this._CashReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashReceipt.Entity = null;
						previousValue.CollegeInsurancePlanReceipts.Remove(this);
					}
					this._CashReceipt.Entity = value;
					if ((value != null))
					{
						value.CollegeInsurancePlanReceipts.Add(this);
						this._ReceiptID = value.ReceiptID;
					}
					else
					{
						this._ReceiptID = default(long);
					}
					this.SendPropertyChanged("CashReceipt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CollegeInsurancePlan_CollegeInsurancePlanReceipt", Storage="_CollegeInsurancePlan", ThisKey="CollegeInsurancePlanID", OtherKey="CollegeInsurancePlanID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CollegeInsurancePlan CollegeInsurancePlan
		{
			get
			{
				return this._CollegeInsurancePlan.Entity;
			}
			set
			{
				CollegeInsurancePlan previousValue = this._CollegeInsurancePlan.Entity;
				if (((previousValue != value) 
							|| (this._CollegeInsurancePlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CollegeInsurancePlan.Entity = null;
						previousValue.CollegeInsurancePlanReceipts.Remove(this);
					}
					this._CollegeInsurancePlan.Entity = value;
					if ((value != null))
					{
						value.CollegeInsurancePlanReceipts.Add(this);
						this._CollegeInsurancePlanID = value.CollegeInsurancePlanID;
					}
					else
					{
						this._CollegeInsurancePlanID = default(long);
					}
					this.SendPropertyChanged("CollegeInsurancePlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Plans.PensionPlanAdjustments")]
	public partial class PensionPlanAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<PensionPlan> _PensionPlan;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public PensionPlanAdjustment()
		{
			this._PensionPlan = default(EntityRef<PensionPlan>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._PensionPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PensionPlan_PensionPlanAdjustment", Storage="_PensionPlan", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public PensionPlan PensionPlan
		{
			get
			{
				return this._PensionPlan.Entity;
			}
			set
			{
				PensionPlan previousValue = this._PensionPlan.Entity;
				if (((previousValue != value) 
							|| (this._PensionPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PensionPlan.Entity = null;
						previousValue.PensionPlanAdjustments.Remove(this);
					}
					this._PensionPlan.Entity = value;
					if ((value != null))
					{
						value.PensionPlanAdjustments.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("PensionPlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_PensionPlanAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.PensionPlanAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.PensionPlanAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Plans.PensionPlanDisbursements")]
	public partial class PensionPlanDisbursement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _DisbursementID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CashDisbursement> _CashDisbursement;
		
		private EntityRef<PensionPlan> _PensionPlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnDisbursementIDChanging(long value);
    partial void OnDisbursementIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public PensionPlanDisbursement()
		{
			this._CashDisbursement = default(EntityRef<CashDisbursement>);
			this._PensionPlan = default(EntityRef<PensionPlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._PensionPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisbursementID", DbType="BigInt NOT NULL")]
		public long DisbursementID
		{
			get
			{
				return this._DisbursementID;
			}
			set
			{
				if ((this._DisbursementID != value))
				{
					if (this._CashDisbursement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisbursementIDChanging(value);
					this.SendPropertyChanging();
					this._DisbursementID = value;
					this.SendPropertyChanged("DisbursementID");
					this.OnDisbursementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_PensionPlanDisbursement", Storage="_CashDisbursement", ThisKey="DisbursementID", OtherKey="DisbursementID", IsForeignKey=true)]
		public CashDisbursement CashDisbursement
		{
			get
			{
				return this._CashDisbursement.Entity;
			}
			set
			{
				CashDisbursement previousValue = this._CashDisbursement.Entity;
				if (((previousValue != value) 
							|| (this._CashDisbursement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashDisbursement.Entity = null;
						previousValue.PensionPlanDisbursements.Remove(this);
					}
					this._CashDisbursement.Entity = value;
					if ((value != null))
					{
						value.PensionPlanDisbursements.Add(this);
						this._DisbursementID = value.DisbursementID;
					}
					else
					{
						this._DisbursementID = default(long);
					}
					this.SendPropertyChanged("CashDisbursement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PensionPlan_PensionPlanDisbursement", Storage="_PensionPlan", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public PensionPlan PensionPlan
		{
			get
			{
				return this._PensionPlan.Entity;
			}
			set
			{
				PensionPlan previousValue = this._PensionPlan.Entity;
				if (((previousValue != value) 
							|| (this._PensionPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PensionPlan.Entity = null;
						previousValue.PensionPlanDisbursements.Remove(this);
					}
					this._PensionPlan.Entity = value;
					if ((value != null))
					{
						value.PensionPlanDisbursements.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("PensionPlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Plans.PensionPlanInterestAdjustments")]
	public partial class PensionPlanInterestAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<PensionPlan> _PensionPlan;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public PensionPlanInterestAdjustment()
		{
			this._PensionPlan = default(EntityRef<PensionPlan>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._PensionPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PensionPlan_PensionPlanInterestAdjustment", Storage="_PensionPlan", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public PensionPlan PensionPlan
		{
			get
			{
				return this._PensionPlan.Entity;
			}
			set
			{
				PensionPlan previousValue = this._PensionPlan.Entity;
				if (((previousValue != value) 
							|| (this._PensionPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PensionPlan.Entity = null;
						previousValue.PensionPlanInterestAdjustments.Remove(this);
					}
					this._PensionPlan.Entity = value;
					if ((value != null))
					{
						value.PensionPlanInterestAdjustments.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("PensionPlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_PensionPlanInterestAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.PensionPlanInterestAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.PensionPlanInterestAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Plans.PensionPlanReceipts")]
	public partial class PensionPlanReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _ReceiptID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CashReceipt> _CashReceipt;
		
		private EntityRef<PensionPlan> _PensionPlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnReceiptIDChanging(long value);
    partial void OnReceiptIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public PensionPlanReceipt()
		{
			this._CashReceipt = default(EntityRef<CashReceipt>);
			this._PensionPlan = default(EntityRef<PensionPlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._PensionPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="BigInt NOT NULL")]
		public long ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					if (this._CashReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_PensionPlanReceipt", Storage="_CashReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsForeignKey=true)]
		public CashReceipt CashReceipt
		{
			get
			{
				return this._CashReceipt.Entity;
			}
			set
			{
				CashReceipt previousValue = this._CashReceipt.Entity;
				if (((previousValue != value) 
							|| (this._CashReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashReceipt.Entity = null;
						previousValue.PensionPlanReceipts.Remove(this);
					}
					this._CashReceipt.Entity = value;
					if ((value != null))
					{
						value.PensionPlanReceipts.Add(this);
						this._ReceiptID = value.ReceiptID;
					}
					else
					{
						this._ReceiptID = default(long);
					}
					this.SendPropertyChanged("CashReceipt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PensionPlan_PensionPlanReceipt", Storage="_PensionPlan", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public PensionPlan PensionPlan
		{
			get
			{
				return this._PensionPlan.Entity;
			}
			set
			{
				PensionPlan previousValue = this._PensionPlan.Entity;
				if (((previousValue != value) 
							|| (this._PensionPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PensionPlan.Entity = null;
						previousValue.PensionPlanReceipts.Remove(this);
					}
					this._PensionPlan.Entity = value;
					if ((value != null))
					{
						value.PensionPlanReceipts.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("PensionPlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Plans.PensionPlans")]
	public partial class PensionPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MemberID;
		
		private System.DateTime _ApplicationDate;
		
		private string _PaymentModeID;
		
		private int _Terms;
		
		private int _AgingPeriod;
		
		private System.Nullable<System.DateTime> _MaturityDate;
		
		private decimal _Amortization;
		
		private System.Nullable<System.DateTime> _PaymentCompletionDate;
		
		private decimal _PaymentCompletionAmount;
		
		private System.Nullable<decimal> _AwardAmount;
		
		private System.Nullable<decimal> _MonthlyPension;
		
		private System.Nullable<int> _AvailOptionID;
		
		private bool _Consumed;
		
		private System.Nullable<System.DateTime> _ConsummationDate;
		
		private decimal _CurrentBalance;
		
		private EntitySet<PensionPlanAdjustment> _PensionPlanAdjustments;
		
		private EntitySet<PensionPlanDisbursement> _PensionPlanDisbursements;
		
		private EntitySet<PensionPlanInterestAdjustment> _PensionPlanInterestAdjustments;
		
		private EntitySet<PensionPlanReceipt> _PensionPlanReceipts;
		
		private EntityRef<PaymentMode> _PaymentMode;
		
		private EntityRef<PensionPlanAvailOption> _PensionPlanAvailOption;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnApplicationDateChanging(System.DateTime value);
    partial void OnApplicationDateChanged();
    partial void OnPaymentModeIDChanging(string value);
    partial void OnPaymentModeIDChanged();
    partial void OnTermsChanging(int value);
    partial void OnTermsChanged();
    partial void OnAgingPeriodChanging(int value);
    partial void OnAgingPeriodChanged();
    partial void OnMaturityDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMaturityDateChanged();
    partial void OnAmortizationChanging(decimal value);
    partial void OnAmortizationChanged();
    partial void OnPaymentCompletionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentCompletionDateChanged();
    partial void OnPaymentCompletionAmountChanging(decimal value);
    partial void OnPaymentCompletionAmountChanged();
    partial void OnAwardAmountChanging(System.Nullable<decimal> value);
    partial void OnAwardAmountChanged();
    partial void OnMonthlyPensionChanging(System.Nullable<decimal> value);
    partial void OnMonthlyPensionChanged();
    partial void OnAvailOptionIDChanging(System.Nullable<int> value);
    partial void OnAvailOptionIDChanged();
    partial void OnConsumedChanging(bool value);
    partial void OnConsumedChanged();
    partial void OnConsummationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnConsummationDateChanged();
    partial void OnCurrentBalanceChanging(decimal value);
    partial void OnCurrentBalanceChanged();
    #endregion
		
		public PensionPlan()
		{
			this._PensionPlanAdjustments = new EntitySet<PensionPlanAdjustment>(new Action<PensionPlanAdjustment>(this.attach_PensionPlanAdjustments), new Action<PensionPlanAdjustment>(this.detach_PensionPlanAdjustments));
			this._PensionPlanDisbursements = new EntitySet<PensionPlanDisbursement>(new Action<PensionPlanDisbursement>(this.attach_PensionPlanDisbursements), new Action<PensionPlanDisbursement>(this.detach_PensionPlanDisbursements));
			this._PensionPlanInterestAdjustments = new EntitySet<PensionPlanInterestAdjustment>(new Action<PensionPlanInterestAdjustment>(this.attach_PensionPlanInterestAdjustments), new Action<PensionPlanInterestAdjustment>(this.detach_PensionPlanInterestAdjustments));
			this._PensionPlanReceipts = new EntitySet<PensionPlanReceipt>(new Action<PensionPlanReceipt>(this.attach_PensionPlanReceipts), new Action<PensionPlanReceipt>(this.detach_PensionPlanReceipts));
			this._PaymentMode = default(EntityRef<PaymentMode>);
			this._PensionPlanAvailOption = default(EntityRef<PensionPlanAvailOption>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ApplicationDate
		{
			get
			{
				return this._ApplicationDate;
			}
			set
			{
				if ((this._ApplicationDate != value))
				{
					this.OnApplicationDateChanging(value);
					this.SendPropertyChanging();
					this._ApplicationDate = value;
					this.SendPropertyChanged("ApplicationDate");
					this.OnApplicationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentModeID", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string PaymentModeID
		{
			get
			{
				return this._PaymentModeID;
			}
			set
			{
				if ((this._PaymentModeID != value))
				{
					if (this._PaymentMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentModeIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentModeID = value;
					this.SendPropertyChanged("PaymentModeID");
					this.OnPaymentModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Terms", DbType="Int NOT NULL")]
		public int Terms
		{
			get
			{
				return this._Terms;
			}
			set
			{
				if ((this._Terms != value))
				{
					this.OnTermsChanging(value);
					this.SendPropertyChanging();
					this._Terms = value;
					this.SendPropertyChanged("Terms");
					this.OnTermsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgingPeriod", DbType="Int NOT NULL")]
		public int AgingPeriod
		{
			get
			{
				return this._AgingPeriod;
			}
			set
			{
				if ((this._AgingPeriod != value))
				{
					this.OnAgingPeriodChanging(value);
					this.SendPropertyChanging();
					this._AgingPeriod = value;
					this.SendPropertyChanged("AgingPeriod");
					this.OnAgingPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaturityDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> MaturityDate
		{
			get
			{
				return this._MaturityDate;
			}
			set
			{
				if ((this._MaturityDate != value))
				{
					this.OnMaturityDateChanging(value);
					this.SendPropertyChanging();
					this._MaturityDate = value;
					this.SendPropertyChanged("MaturityDate");
					this.OnMaturityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amortization", DbType="Money NOT NULL")]
		public decimal Amortization
		{
			get
			{
				return this._Amortization;
			}
			set
			{
				if ((this._Amortization != value))
				{
					this.OnAmortizationChanging(value);
					this.SendPropertyChanging();
					this._Amortization = value;
					this.SendPropertyChanged("Amortization");
					this.OnAmortizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentCompletionDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> PaymentCompletionDate
		{
			get
			{
				return this._PaymentCompletionDate;
			}
			set
			{
				if ((this._PaymentCompletionDate != value))
				{
					this.OnPaymentCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentCompletionDate = value;
					this.SendPropertyChanged("PaymentCompletionDate");
					this.OnPaymentCompletionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentCompletionAmount", DbType="Money NOT NULL")]
		public decimal PaymentCompletionAmount
		{
			get
			{
				return this._PaymentCompletionAmount;
			}
			set
			{
				if ((this._PaymentCompletionAmount != value))
				{
					this.OnPaymentCompletionAmountChanging(value);
					this.SendPropertyChanging();
					this._PaymentCompletionAmount = value;
					this.SendPropertyChanged("PaymentCompletionAmount");
					this.OnPaymentCompletionAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwardAmount", DbType="Money")]
		public System.Nullable<decimal> AwardAmount
		{
			get
			{
				return this._AwardAmount;
			}
			set
			{
				if ((this._AwardAmount != value))
				{
					this.OnAwardAmountChanging(value);
					this.SendPropertyChanging();
					this._AwardAmount = value;
					this.SendPropertyChanged("AwardAmount");
					this.OnAwardAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthlyPension", DbType="Money")]
		public System.Nullable<decimal> MonthlyPension
		{
			get
			{
				return this._MonthlyPension;
			}
			set
			{
				if ((this._MonthlyPension != value))
				{
					this.OnMonthlyPensionChanging(value);
					this.SendPropertyChanging();
					this._MonthlyPension = value;
					this.SendPropertyChanged("MonthlyPension");
					this.OnMonthlyPensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailOptionID", DbType="Int")]
		public System.Nullable<int> AvailOptionID
		{
			get
			{
				return this._AvailOptionID;
			}
			set
			{
				if ((this._AvailOptionID != value))
				{
					if (this._PensionPlanAvailOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAvailOptionIDChanging(value);
					this.SendPropertyChanging();
					this._AvailOptionID = value;
					this.SendPropertyChanged("AvailOptionID");
					this.OnAvailOptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Consumed", DbType="Bit NOT NULL")]
		public bool Consumed
		{
			get
			{
				return this._Consumed;
			}
			set
			{
				if ((this._Consumed != value))
				{
					this.OnConsumedChanging(value);
					this.SendPropertyChanging();
					this._Consumed = value;
					this.SendPropertyChanged("Consumed");
					this.OnConsumedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsummationDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ConsummationDate
		{
			get
			{
				return this._ConsummationDate;
			}
			set
			{
				if ((this._ConsummationDate != value))
				{
					this.OnConsummationDateChanging(value);
					this.SendPropertyChanging();
					this._ConsummationDate = value;
					this.SendPropertyChanged("ConsummationDate");
					this.OnConsummationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentBalance", DbType="Money NOT NULL")]
		public decimal CurrentBalance
		{
			get
			{
				return this._CurrentBalance;
			}
			set
			{
				if ((this._CurrentBalance != value))
				{
					this.OnCurrentBalanceChanging(value);
					this.SendPropertyChanging();
					this._CurrentBalance = value;
					this.SendPropertyChanged("CurrentBalance");
					this.OnCurrentBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PensionPlan_PensionPlanAdjustment", Storage="_PensionPlanAdjustments", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<PensionPlanAdjustment> PensionPlanAdjustments
		{
			get
			{
				return this._PensionPlanAdjustments;
			}
			set
			{
				this._PensionPlanAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PensionPlan_PensionPlanDisbursement", Storage="_PensionPlanDisbursements", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<PensionPlanDisbursement> PensionPlanDisbursements
		{
			get
			{
				return this._PensionPlanDisbursements;
			}
			set
			{
				this._PensionPlanDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PensionPlan_PensionPlanInterestAdjustment", Storage="_PensionPlanInterestAdjustments", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<PensionPlanInterestAdjustment> PensionPlanInterestAdjustments
		{
			get
			{
				return this._PensionPlanInterestAdjustments;
			}
			set
			{
				this._PensionPlanInterestAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PensionPlan_PensionPlanReceipt", Storage="_PensionPlanReceipts", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<PensionPlanReceipt> PensionPlanReceipts
		{
			get
			{
				return this._PensionPlanReceipts;
			}
			set
			{
				this._PensionPlanReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMode_PensionPlan", Storage="_PaymentMode", ThisKey="PaymentModeID", OtherKey="PaymentModeID", IsForeignKey=true)]
		public PaymentMode PaymentMode
		{
			get
			{
				return this._PaymentMode.Entity;
			}
			set
			{
				PaymentMode previousValue = this._PaymentMode.Entity;
				if (((previousValue != value) 
							|| (this._PaymentMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentMode.Entity = null;
						previousValue.PensionPlans.Remove(this);
					}
					this._PaymentMode.Entity = value;
					if ((value != null))
					{
						value.PensionPlans.Add(this);
						this._PaymentModeID = value.PaymentModeID;
					}
					else
					{
						this._PaymentModeID = default(string);
					}
					this.SendPropertyChanged("PaymentMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PensionPlanAvailOption_PensionPlan", Storage="_PensionPlanAvailOption", ThisKey="AvailOptionID", OtherKey="AvailOptionID", IsForeignKey=true)]
		public PensionPlanAvailOption PensionPlanAvailOption
		{
			get
			{
				return this._PensionPlanAvailOption.Entity;
			}
			set
			{
				PensionPlanAvailOption previousValue = this._PensionPlanAvailOption.Entity;
				if (((previousValue != value) 
							|| (this._PensionPlanAvailOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PensionPlanAvailOption.Entity = null;
						previousValue.PensionPlans.Remove(this);
					}
					this._PensionPlanAvailOption.Entity = value;
					if ((value != null))
					{
						value.PensionPlans.Add(this);
						this._AvailOptionID = value.AvailOptionID;
					}
					else
					{
						this._AvailOptionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PensionPlanAvailOption");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_PensionPlan", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.PensionPlan = null;
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.PensionPlan = this;
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PensionPlanAdjustments(PensionPlanAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.PensionPlan = this;
		}
		
		private void detach_PensionPlanAdjustments(PensionPlanAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.PensionPlan = null;
		}
		
		private void attach_PensionPlanDisbursements(PensionPlanDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.PensionPlan = this;
		}
		
		private void detach_PensionPlanDisbursements(PensionPlanDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.PensionPlan = null;
		}
		
		private void attach_PensionPlanInterestAdjustments(PensionPlanInterestAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.PensionPlan = this;
		}
		
		private void detach_PensionPlanInterestAdjustments(PensionPlanInterestAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.PensionPlan = null;
		}
		
		private void attach_PensionPlanReceipts(PensionPlanReceipt entity)
		{
			this.SendPropertyChanging();
			entity.PensionPlan = this;
		}
		
		private void detach_PensionPlanReceipts(PensionPlanReceipt entity)
		{
			this.SendPropertyChanging();
			entity.PensionPlan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.CapitalShareAdjustments")]
	public partial class CapitalShareAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CapitalShare> _CapitalShare;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public CapitalShareAdjustment()
		{
			this._CapitalShare = default(EntityRef<CapitalShare>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._CapitalShare.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapitalShare_CapitalShareAdjustment", Storage="_CapitalShare", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public CapitalShare CapitalShare
		{
			get
			{
				return this._CapitalShare.Entity;
			}
			set
			{
				CapitalShare previousValue = this._CapitalShare.Entity;
				if (((previousValue != value) 
							|| (this._CapitalShare.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CapitalShare.Entity = null;
						previousValue.CapitalShareAdjustments.Remove(this);
					}
					this._CapitalShare.Entity = value;
					if ((value != null))
					{
						value.CapitalShareAdjustments.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("CapitalShare");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_CapitalShareAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.CapitalShareAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.CapitalShareAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.SavingsDepositAdjustments")]
	public partial class SavingsDepositAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<SavingsDeposit> _SavingsDeposit;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public SavingsDepositAdjustment()
		{
			this._SavingsDeposit = default(EntityRef<SavingsDeposit>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._SavingsDeposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SavingsDeposit_SavingsDepositAdjustment", Storage="_SavingsDeposit", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public SavingsDeposit SavingsDeposit
		{
			get
			{
				return this._SavingsDeposit.Entity;
			}
			set
			{
				SavingsDeposit previousValue = this._SavingsDeposit.Entity;
				if (((previousValue != value) 
							|| (this._SavingsDeposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SavingsDeposit.Entity = null;
						previousValue.SavingsDepositAdjustments.Remove(this);
					}
					this._SavingsDeposit.Entity = value;
					if ((value != null))
					{
						value.SavingsDepositAdjustments.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("SavingsDeposit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_SavingsDepositAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.SavingsDepositAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.SavingsDepositAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.TimeDeposits")]
	public partial class TimeDeposit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TimeDepositID;
		
		private long _MemberID;
		
		private System.DateTime _DepositDate;
		
		private decimal _TimeDepositAmount;
		
		private decimal _InterestRate;
		
		private System.Nullable<decimal> _Interest;
		
		private int _Terms;
		
		private System.DateTime _MaturityDate;
		
		private bool _Consumed;
		
		private System.Nullable<System.DateTime> _ConsummationDate;
		
		private decimal _CurrentBalance;
		
		private EntitySet<TimeDepositAdjustment> _TimeDepositAdjustments;
		
		private EntitySet<TimeDepositDisbursement> _TimeDepositDisbursements;
		
		private EntitySet<TimeDepositReceipt> _TimeDepositReceipts;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeDepositIDChanging(long value);
    partial void OnTimeDepositIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnDepositDateChanging(System.DateTime value);
    partial void OnDepositDateChanged();
    partial void OnTimeDepositAmountChanging(decimal value);
    partial void OnTimeDepositAmountChanged();
    partial void OnInterestRateChanging(decimal value);
    partial void OnInterestRateChanged();
    partial void OnInterestChanging(System.Nullable<decimal> value);
    partial void OnInterestChanged();
    partial void OnTermsChanging(int value);
    partial void OnTermsChanged();
    partial void OnMaturityDateChanging(System.DateTime value);
    partial void OnMaturityDateChanged();
    partial void OnConsumedChanging(bool value);
    partial void OnConsumedChanged();
    partial void OnConsummationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnConsummationDateChanged();
    partial void OnCurrentBalanceChanging(decimal value);
    partial void OnCurrentBalanceChanged();
    #endregion
		
		public TimeDeposit()
		{
			this._TimeDepositAdjustments = new EntitySet<TimeDepositAdjustment>(new Action<TimeDepositAdjustment>(this.attach_TimeDepositAdjustments), new Action<TimeDepositAdjustment>(this.detach_TimeDepositAdjustments));
			this._TimeDepositDisbursements = new EntitySet<TimeDepositDisbursement>(new Action<TimeDepositDisbursement>(this.attach_TimeDepositDisbursements), new Action<TimeDepositDisbursement>(this.detach_TimeDepositDisbursements));
			this._TimeDepositReceipts = new EntitySet<TimeDepositReceipt>(new Action<TimeDepositReceipt>(this.attach_TimeDepositReceipts), new Action<TimeDepositReceipt>(this.detach_TimeDepositReceipts));
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeDepositID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TimeDepositID
		{
			get
			{
				return this._TimeDepositID;
			}
			set
			{
				if ((this._TimeDepositID != value))
				{
					this.OnTimeDepositIDChanging(value);
					this.SendPropertyChanging();
					this._TimeDepositID = value;
					this.SendPropertyChanged("TimeDepositID");
					this.OnTimeDepositIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepositDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DepositDate
		{
			get
			{
				return this._DepositDate;
			}
			set
			{
				if ((this._DepositDate != value))
				{
					this.OnDepositDateChanging(value);
					this.SendPropertyChanging();
					this._DepositDate = value;
					this.SendPropertyChanged("DepositDate");
					this.OnDepositDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeDepositAmount", DbType="Money NOT NULL")]
		public decimal TimeDepositAmount
		{
			get
			{
				return this._TimeDepositAmount;
			}
			set
			{
				if ((this._TimeDepositAmount != value))
				{
					this.OnTimeDepositAmountChanging(value);
					this.SendPropertyChanging();
					this._TimeDepositAmount = value;
					this.SendPropertyChanged("TimeDepositAmount");
					this.OnTimeDepositAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestRate", DbType="Decimal(4,2) NOT NULL")]
		public decimal InterestRate
		{
			get
			{
				return this._InterestRate;
			}
			set
			{
				if ((this._InterestRate != value))
				{
					this.OnInterestRateChanging(value);
					this.SendPropertyChanging();
					this._InterestRate = value;
					this.SendPropertyChanged("InterestRate");
					this.OnInterestRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interest", DbType="Money")]
		public System.Nullable<decimal> Interest
		{
			get
			{
				return this._Interest;
			}
			set
			{
				if ((this._Interest != value))
				{
					this.OnInterestChanging(value);
					this.SendPropertyChanging();
					this._Interest = value;
					this.SendPropertyChanged("Interest");
					this.OnInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Terms", DbType="Int NOT NULL")]
		public int Terms
		{
			get
			{
				return this._Terms;
			}
			set
			{
				if ((this._Terms != value))
				{
					this.OnTermsChanging(value);
					this.SendPropertyChanging();
					this._Terms = value;
					this.SendPropertyChanged("Terms");
					this.OnTermsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaturityDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime MaturityDate
		{
			get
			{
				return this._MaturityDate;
			}
			set
			{
				if ((this._MaturityDate != value))
				{
					this.OnMaturityDateChanging(value);
					this.SendPropertyChanging();
					this._MaturityDate = value;
					this.SendPropertyChanged("MaturityDate");
					this.OnMaturityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Consumed", DbType="Bit NOT NULL")]
		public bool Consumed
		{
			get
			{
				return this._Consumed;
			}
			set
			{
				if ((this._Consumed != value))
				{
					this.OnConsumedChanging(value);
					this.SendPropertyChanging();
					this._Consumed = value;
					this.SendPropertyChanged("Consumed");
					this.OnConsumedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsummationDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ConsummationDate
		{
			get
			{
				return this._ConsummationDate;
			}
			set
			{
				if ((this._ConsummationDate != value))
				{
					this.OnConsummationDateChanging(value);
					this.SendPropertyChanging();
					this._ConsummationDate = value;
					this.SendPropertyChanged("ConsummationDate");
					this.OnConsummationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentBalance", DbType="Money NOT NULL")]
		public decimal CurrentBalance
		{
			get
			{
				return this._CurrentBalance;
			}
			set
			{
				if ((this._CurrentBalance != value))
				{
					this.OnCurrentBalanceChanging(value);
					this.SendPropertyChanging();
					this._CurrentBalance = value;
					this.SendPropertyChanged("CurrentBalance");
					this.OnCurrentBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeDeposit_TimeDepositAdjustment", Storage="_TimeDepositAdjustments", ThisKey="TimeDepositID", OtherKey="TimeDepositID")]
		public EntitySet<TimeDepositAdjustment> TimeDepositAdjustments
		{
			get
			{
				return this._TimeDepositAdjustments;
			}
			set
			{
				this._TimeDepositAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeDeposit_TimeDepositDisbursement", Storage="_TimeDepositDisbursements", ThisKey="TimeDepositID", OtherKey="TimeDepositID")]
		public EntitySet<TimeDepositDisbursement> TimeDepositDisbursements
		{
			get
			{
				return this._TimeDepositDisbursements;
			}
			set
			{
				this._TimeDepositDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeDeposit_TimeDepositReceipt", Storage="_TimeDepositReceipts", ThisKey="TimeDepositID", OtherKey="TimeDepositID")]
		public EntitySet<TimeDepositReceipt> TimeDepositReceipts
		{
			get
			{
				return this._TimeDepositReceipts;
			}
			set
			{
				this._TimeDepositReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_TimeDeposit", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.TimeDeposits.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.TimeDeposits.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TimeDepositAdjustments(TimeDepositAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.TimeDeposit = this;
		}
		
		private void detach_TimeDepositAdjustments(TimeDepositAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.TimeDeposit = null;
		}
		
		private void attach_TimeDepositDisbursements(TimeDepositDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.TimeDeposit = this;
		}
		
		private void detach_TimeDepositDisbursements(TimeDepositDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.TimeDeposit = null;
		}
		
		private void attach_TimeDepositReceipts(TimeDepositReceipt entity)
		{
			this.SendPropertyChanging();
			entity.TimeDeposit = this;
		}
		
		private void detach_TimeDepositReceipts(TimeDepositReceipt entity)
		{
			this.SendPropertyChanging();
			entity.TimeDeposit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.TimeDepositAdjustments")]
	public partial class TimeDepositAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _TimeDepositID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<TimeDeposit> _TimeDeposit;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTimeDepositIDChanging(long value);
    partial void OnTimeDepositIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public TimeDepositAdjustment()
		{
			this._TimeDeposit = default(EntityRef<TimeDeposit>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeDepositID", DbType="BigInt NOT NULL")]
		public long TimeDepositID
		{
			get
			{
				return this._TimeDepositID;
			}
			set
			{
				if ((this._TimeDepositID != value))
				{
					if (this._TimeDeposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeDepositIDChanging(value);
					this.SendPropertyChanging();
					this._TimeDepositID = value;
					this.SendPropertyChanged("TimeDepositID");
					this.OnTimeDepositIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeDeposit_TimeDepositAdjustment", Storage="_TimeDeposit", ThisKey="TimeDepositID", OtherKey="TimeDepositID", IsForeignKey=true)]
		public TimeDeposit TimeDeposit
		{
			get
			{
				return this._TimeDeposit.Entity;
			}
			set
			{
				TimeDeposit previousValue = this._TimeDeposit.Entity;
				if (((previousValue != value) 
							|| (this._TimeDeposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeDeposit.Entity = null;
						previousValue.TimeDepositAdjustments.Remove(this);
					}
					this._TimeDeposit.Entity = value;
					if ((value != null))
					{
						value.TimeDepositAdjustments.Add(this);
						this._TimeDepositID = value.TimeDepositID;
					}
					else
					{
						this._TimeDepositID = default(long);
					}
					this.SendPropertyChanged("TimeDeposit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_TimeDepositAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.TimeDepositAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.TimeDepositAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.TimeDepositDisbursements")]
	public partial class TimeDepositDisbursement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _TimeDepositID;
		
		private long _DisbursementID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CashDisbursement> _CashDisbursement;
		
		private EntityRef<TimeDeposit> _TimeDeposit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTimeDepositIDChanging(long value);
    partial void OnTimeDepositIDChanged();
    partial void OnDisbursementIDChanging(long value);
    partial void OnDisbursementIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public TimeDepositDisbursement()
		{
			this._CashDisbursement = default(EntityRef<CashDisbursement>);
			this._TimeDeposit = default(EntityRef<TimeDeposit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeDepositID", DbType="BigInt NOT NULL")]
		public long TimeDepositID
		{
			get
			{
				return this._TimeDepositID;
			}
			set
			{
				if ((this._TimeDepositID != value))
				{
					if (this._TimeDeposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeDepositIDChanging(value);
					this.SendPropertyChanging();
					this._TimeDepositID = value;
					this.SendPropertyChanged("TimeDepositID");
					this.OnTimeDepositIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisbursementID", DbType="BigInt NOT NULL")]
		public long DisbursementID
		{
			get
			{
				return this._DisbursementID;
			}
			set
			{
				if ((this._DisbursementID != value))
				{
					if (this._CashDisbursement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisbursementIDChanging(value);
					this.SendPropertyChanging();
					this._DisbursementID = value;
					this.SendPropertyChanged("DisbursementID");
					this.OnDisbursementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_TimeDepositDisbursement", Storage="_CashDisbursement", ThisKey="DisbursementID", OtherKey="DisbursementID", IsForeignKey=true)]
		public CashDisbursement CashDisbursement
		{
			get
			{
				return this._CashDisbursement.Entity;
			}
			set
			{
				CashDisbursement previousValue = this._CashDisbursement.Entity;
				if (((previousValue != value) 
							|| (this._CashDisbursement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashDisbursement.Entity = null;
						previousValue.TimeDepositDisbursements.Remove(this);
					}
					this._CashDisbursement.Entity = value;
					if ((value != null))
					{
						value.TimeDepositDisbursements.Add(this);
						this._DisbursementID = value.DisbursementID;
					}
					else
					{
						this._DisbursementID = default(long);
					}
					this.SendPropertyChanged("CashDisbursement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeDeposit_TimeDepositDisbursement", Storage="_TimeDeposit", ThisKey="TimeDepositID", OtherKey="TimeDepositID", IsForeignKey=true)]
		public TimeDeposit TimeDeposit
		{
			get
			{
				return this._TimeDeposit.Entity;
			}
			set
			{
				TimeDeposit previousValue = this._TimeDeposit.Entity;
				if (((previousValue != value) 
							|| (this._TimeDeposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeDeposit.Entity = null;
						previousValue.TimeDepositDisbursements.Remove(this);
					}
					this._TimeDeposit.Entity = value;
					if ((value != null))
					{
						value.TimeDepositDisbursements.Add(this);
						this._TimeDepositID = value.TimeDepositID;
					}
					else
					{
						this._TimeDepositID = default(long);
					}
					this.SendPropertyChanged("TimeDeposit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.TimeDepositReceipts")]
	public partial class TimeDepositReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _TimeDepositID;
		
		private long _ReceiptID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CashReceipt> _CashReceipt;
		
		private EntityRef<TimeDeposit> _TimeDeposit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTimeDepositIDChanging(long value);
    partial void OnTimeDepositIDChanged();
    partial void OnReceiptIDChanging(long value);
    partial void OnReceiptIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public TimeDepositReceipt()
		{
			this._CashReceipt = default(EntityRef<CashReceipt>);
			this._TimeDeposit = default(EntityRef<TimeDeposit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeDepositID", DbType="BigInt NOT NULL")]
		public long TimeDepositID
		{
			get
			{
				return this._TimeDepositID;
			}
			set
			{
				if ((this._TimeDepositID != value))
				{
					if (this._TimeDeposit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeDepositIDChanging(value);
					this.SendPropertyChanging();
					this._TimeDepositID = value;
					this.SendPropertyChanged("TimeDepositID");
					this.OnTimeDepositIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="BigInt NOT NULL")]
		public long ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					if (this._CashReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_TimeDepositReceipt", Storage="_CashReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsForeignKey=true)]
		public CashReceipt CashReceipt
		{
			get
			{
				return this._CashReceipt.Entity;
			}
			set
			{
				CashReceipt previousValue = this._CashReceipt.Entity;
				if (((previousValue != value) 
							|| (this._CashReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashReceipt.Entity = null;
						previousValue.TimeDepositReceipts.Remove(this);
					}
					this._CashReceipt.Entity = value;
					if ((value != null))
					{
						value.TimeDepositReceipts.Add(this);
						this._ReceiptID = value.ReceiptID;
					}
					else
					{
						this._ReceiptID = default(long);
					}
					this.SendPropertyChanged("CashReceipt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeDeposit_TimeDepositReceipt", Storage="_TimeDeposit", ThisKey="TimeDepositID", OtherKey="TimeDepositID", IsForeignKey=true)]
		public TimeDeposit TimeDeposit
		{
			get
			{
				return this._TimeDeposit.Entity;
			}
			set
			{
				TimeDeposit previousValue = this._TimeDeposit.Entity;
				if (((previousValue != value) 
							|| (this._TimeDeposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeDeposit.Entity = null;
						previousValue.TimeDepositReceipts.Remove(this);
					}
					this._TimeDeposit.Entity = value;
					if ((value != null))
					{
						value.TimeDepositReceipts.Add(this);
						this._TimeDepositID = value.TimeDepositID;
					}
					else
					{
						this._TimeDepositID = default(long);
					}
					this.SendPropertyChanged("TimeDeposit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialFunds.TulunganFunds")]
	public partial class TulunganFund : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MemberID;
		
		private decimal _CurrentBalance;
		
		private EntitySet<TulunganFundReceipt> _TulunganFundReceipts;
		
		private EntitySet<TulunganFundDisbursement> _TulunganFundDisbursements;
		
		private EntitySet<TulunganFundAdjustment> _TulunganFundAdjustments;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnCurrentBalanceChanging(decimal value);
    partial void OnCurrentBalanceChanged();
    #endregion
		
		public TulunganFund()
		{
			this._TulunganFundReceipts = new EntitySet<TulunganFundReceipt>(new Action<TulunganFundReceipt>(this.attach_TulunganFundReceipts), new Action<TulunganFundReceipt>(this.detach_TulunganFundReceipts));
			this._TulunganFundDisbursements = new EntitySet<TulunganFundDisbursement>(new Action<TulunganFundDisbursement>(this.attach_TulunganFundDisbursements), new Action<TulunganFundDisbursement>(this.detach_TulunganFundDisbursements));
			this._TulunganFundAdjustments = new EntitySet<TulunganFundAdjustment>(new Action<TulunganFundAdjustment>(this.attach_TulunganFundAdjustments), new Action<TulunganFundAdjustment>(this.detach_TulunganFundAdjustments));
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentBalance", DbType="Money NOT NULL")]
		public decimal CurrentBalance
		{
			get
			{
				return this._CurrentBalance;
			}
			set
			{
				if ((this._CurrentBalance != value))
				{
					this.OnCurrentBalanceChanging(value);
					this.SendPropertyChanging();
					this._CurrentBalance = value;
					this.SendPropertyChanged("CurrentBalance");
					this.OnCurrentBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TulunganFund_TulunganFundReceipt", Storage="_TulunganFundReceipts", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<TulunganFundReceipt> TulunganFundReceipts
		{
			get
			{
				return this._TulunganFundReceipts;
			}
			set
			{
				this._TulunganFundReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TulunganFund_TulunganFundDisbursement", Storage="_TulunganFundDisbursements", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<TulunganFundDisbursement> TulunganFundDisbursements
		{
			get
			{
				return this._TulunganFundDisbursements;
			}
			set
			{
				this._TulunganFundDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TulunganFund_TulunganFundAdjustment", Storage="_TulunganFundAdjustments", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<TulunganFundAdjustment> TulunganFundAdjustments
		{
			get
			{
				return this._TulunganFundAdjustments;
			}
			set
			{
				this._TulunganFundAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_TulunganFund", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.TulunganFund = null;
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.TulunganFund = this;
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TulunganFundReceipts(TulunganFundReceipt entity)
		{
			this.SendPropertyChanging();
			entity.TulunganFund = this;
		}
		
		private void detach_TulunganFundReceipts(TulunganFundReceipt entity)
		{
			this.SendPropertyChanging();
			entity.TulunganFund = null;
		}
		
		private void attach_TulunganFundDisbursements(TulunganFundDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.TulunganFund = this;
		}
		
		private void detach_TulunganFundDisbursements(TulunganFundDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.TulunganFund = null;
		}
		
		private void attach_TulunganFundAdjustments(TulunganFundAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.TulunganFund = this;
		}
		
		private void detach_TulunganFundAdjustments(TulunganFundAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.TulunganFund = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialFunds.TulunganFundReceipts")]
	public partial class TulunganFundReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _ReceiptID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CashReceipt> _CashReceipt;
		
		private EntityRef<TulunganFund> _TulunganFund;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnReceiptIDChanging(long value);
    partial void OnReceiptIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public TulunganFundReceipt()
		{
			this._CashReceipt = default(EntityRef<CashReceipt>);
			this._TulunganFund = default(EntityRef<TulunganFund>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._TulunganFund.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="BigInt NOT NULL")]
		public long ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					if (this._CashReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_TulunganFundReceipt", Storage="_CashReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsForeignKey=true)]
		public CashReceipt CashReceipt
		{
			get
			{
				return this._CashReceipt.Entity;
			}
			set
			{
				CashReceipt previousValue = this._CashReceipt.Entity;
				if (((previousValue != value) 
							|| (this._CashReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashReceipt.Entity = null;
						previousValue.TulunganFundReceipts.Remove(this);
					}
					this._CashReceipt.Entity = value;
					if ((value != null))
					{
						value.TulunganFundReceipts.Add(this);
						this._ReceiptID = value.ReceiptID;
					}
					else
					{
						this._ReceiptID = default(long);
					}
					this.SendPropertyChanged("CashReceipt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TulunganFund_TulunganFundReceipt", Storage="_TulunganFund", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public TulunganFund TulunganFund
		{
			get
			{
				return this._TulunganFund.Entity;
			}
			set
			{
				TulunganFund previousValue = this._TulunganFund.Entity;
				if (((previousValue != value) 
							|| (this._TulunganFund.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TulunganFund.Entity = null;
						previousValue.TulunganFundReceipts.Remove(this);
					}
					this._TulunganFund.Entity = value;
					if ((value != null))
					{
						value.TulunganFundReceipts.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("TulunganFund");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialFunds.TulunganFundDisbursements")]
	public partial class TulunganFundDisbursement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _DisbursementID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CashDisbursement> _CashDisbursement;
		
		private EntityRef<TulunganFund> _TulunganFund;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnDisbursementIDChanging(long value);
    partial void OnDisbursementIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public TulunganFundDisbursement()
		{
			this._CashDisbursement = default(EntityRef<CashDisbursement>);
			this._TulunganFund = default(EntityRef<TulunganFund>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._TulunganFund.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisbursementID", DbType="BigInt NOT NULL")]
		public long DisbursementID
		{
			get
			{
				return this._DisbursementID;
			}
			set
			{
				if ((this._DisbursementID != value))
				{
					if (this._CashDisbursement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisbursementIDChanging(value);
					this.SendPropertyChanging();
					this._DisbursementID = value;
					this.SendPropertyChanged("DisbursementID");
					this.OnDisbursementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_TulunganFundDisbursement", Storage="_CashDisbursement", ThisKey="DisbursementID", OtherKey="DisbursementID", IsForeignKey=true)]
		public CashDisbursement CashDisbursement
		{
			get
			{
				return this._CashDisbursement.Entity;
			}
			set
			{
				CashDisbursement previousValue = this._CashDisbursement.Entity;
				if (((previousValue != value) 
							|| (this._CashDisbursement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashDisbursement.Entity = null;
						previousValue.TulunganFundDisbursements.Remove(this);
					}
					this._CashDisbursement.Entity = value;
					if ((value != null))
					{
						value.TulunganFundDisbursements.Add(this);
						this._DisbursementID = value.DisbursementID;
					}
					else
					{
						this._DisbursementID = default(long);
					}
					this.SendPropertyChanged("CashDisbursement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TulunganFund_TulunganFundDisbursement", Storage="_TulunganFund", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public TulunganFund TulunganFund
		{
			get
			{
				return this._TulunganFund.Entity;
			}
			set
			{
				TulunganFund previousValue = this._TulunganFund.Entity;
				if (((previousValue != value) 
							|| (this._TulunganFund.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TulunganFund.Entity = null;
						previousValue.TulunganFundDisbursements.Remove(this);
					}
					this._TulunganFund.Entity = value;
					if ((value != null))
					{
						value.TulunganFundDisbursements.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("TulunganFund");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialFunds.TulunganFundAdjustments")]
	public partial class TulunganFundAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<TulunganFund> _TulunganFund;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public TulunganFundAdjustment()
		{
			this._TulunganFund = default(EntityRef<TulunganFund>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._TulunganFund.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TulunganFund_TulunganFundAdjustment", Storage="_TulunganFund", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public TulunganFund TulunganFund
		{
			get
			{
				return this._TulunganFund.Entity;
			}
			set
			{
				TulunganFund previousValue = this._TulunganFund.Entity;
				if (((previousValue != value) 
							|| (this._TulunganFund.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TulunganFund.Entity = null;
						previousValue.TulunganFundAdjustments.Remove(this);
					}
					this._TulunganFund.Entity = value;
					if ((value != null))
					{
						value.TulunganFundAdjustments.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("TulunganFund");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_TulunganFundAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.TulunganFundAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.TulunganFundAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialFunds.DeathAidFunds")]
	public partial class DeathAidFund : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MemberID;
		
		private decimal _CurrentBalance;
		
		private EntitySet<DeathAidFundDisbursement> _DeathAidFundDisbursements;
		
		private EntitySet<DeathAidFundReceipt> _DeathAidFundReceipts;
		
		private EntitySet<DeathAidFundAdjustment> _DeathAidFundAdjustments;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnCurrentBalanceChanging(decimal value);
    partial void OnCurrentBalanceChanged();
    #endregion
		
		public DeathAidFund()
		{
			this._DeathAidFundDisbursements = new EntitySet<DeathAidFundDisbursement>(new Action<DeathAidFundDisbursement>(this.attach_DeathAidFundDisbursements), new Action<DeathAidFundDisbursement>(this.detach_DeathAidFundDisbursements));
			this._DeathAidFundReceipts = new EntitySet<DeathAidFundReceipt>(new Action<DeathAidFundReceipt>(this.attach_DeathAidFundReceipts), new Action<DeathAidFundReceipt>(this.detach_DeathAidFundReceipts));
			this._DeathAidFundAdjustments = new EntitySet<DeathAidFundAdjustment>(new Action<DeathAidFundAdjustment>(this.attach_DeathAidFundAdjustments), new Action<DeathAidFundAdjustment>(this.detach_DeathAidFundAdjustments));
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentBalance", DbType="Money NOT NULL")]
		public decimal CurrentBalance
		{
			get
			{
				return this._CurrentBalance;
			}
			set
			{
				if ((this._CurrentBalance != value))
				{
					this.OnCurrentBalanceChanging(value);
					this.SendPropertyChanging();
					this._CurrentBalance = value;
					this.SendPropertyChanged("CurrentBalance");
					this.OnCurrentBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeathAidFund_DeathAidFundDisbursement", Storage="_DeathAidFundDisbursements", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<DeathAidFundDisbursement> DeathAidFundDisbursements
		{
			get
			{
				return this._DeathAidFundDisbursements;
			}
			set
			{
				this._DeathAidFundDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeathAidFund_DeathAidFundReceipt", Storage="_DeathAidFundReceipts", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<DeathAidFundReceipt> DeathAidFundReceipts
		{
			get
			{
				return this._DeathAidFundReceipts;
			}
			set
			{
				this._DeathAidFundReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeathAidFund_DeathAidFundAdjustment", Storage="_DeathAidFundAdjustments", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<DeathAidFundAdjustment> DeathAidFundAdjustments
		{
			get
			{
				return this._DeathAidFundAdjustments;
			}
			set
			{
				this._DeathAidFundAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_DeathAidFund", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.DeathAidFund = null;
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.DeathAidFund = this;
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeathAidFundDisbursements(DeathAidFundDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.DeathAidFund = this;
		}
		
		private void detach_DeathAidFundDisbursements(DeathAidFundDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.DeathAidFund = null;
		}
		
		private void attach_DeathAidFundReceipts(DeathAidFundReceipt entity)
		{
			this.SendPropertyChanging();
			entity.DeathAidFund = this;
		}
		
		private void detach_DeathAidFundReceipts(DeathAidFundReceipt entity)
		{
			this.SendPropertyChanging();
			entity.DeathAidFund = null;
		}
		
		private void attach_DeathAidFundAdjustments(DeathAidFundAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.DeathAidFund = this;
		}
		
		private void detach_DeathAidFundAdjustments(DeathAidFundAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.DeathAidFund = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialFunds.DeathAidFundDisbursements")]
	public partial class DeathAidFundDisbursement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _DisbursementID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CashDisbursement> _CashDisbursement;
		
		private EntityRef<DeathAidFund> _DeathAidFund;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnDisbursementIDChanging(long value);
    partial void OnDisbursementIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public DeathAidFundDisbursement()
		{
			this._CashDisbursement = default(EntityRef<CashDisbursement>);
			this._DeathAidFund = default(EntityRef<DeathAidFund>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._DeathAidFund.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisbursementID", DbType="BigInt NOT NULL")]
		public long DisbursementID
		{
			get
			{
				return this._DisbursementID;
			}
			set
			{
				if ((this._DisbursementID != value))
				{
					if (this._CashDisbursement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisbursementIDChanging(value);
					this.SendPropertyChanging();
					this._DisbursementID = value;
					this.SendPropertyChanged("DisbursementID");
					this.OnDisbursementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashDisbursement_DeathAidFundDisbursement", Storage="_CashDisbursement", ThisKey="DisbursementID", OtherKey="DisbursementID", IsForeignKey=true)]
		public CashDisbursement CashDisbursement
		{
			get
			{
				return this._CashDisbursement.Entity;
			}
			set
			{
				CashDisbursement previousValue = this._CashDisbursement.Entity;
				if (((previousValue != value) 
							|| (this._CashDisbursement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashDisbursement.Entity = null;
						previousValue.DeathAidFundDisbursements.Remove(this);
					}
					this._CashDisbursement.Entity = value;
					if ((value != null))
					{
						value.DeathAidFundDisbursements.Add(this);
						this._DisbursementID = value.DisbursementID;
					}
					else
					{
						this._DisbursementID = default(long);
					}
					this.SendPropertyChanged("CashDisbursement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeathAidFund_DeathAidFundDisbursement", Storage="_DeathAidFund", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public DeathAidFund DeathAidFund
		{
			get
			{
				return this._DeathAidFund.Entity;
			}
			set
			{
				DeathAidFund previousValue = this._DeathAidFund.Entity;
				if (((previousValue != value) 
							|| (this._DeathAidFund.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeathAidFund.Entity = null;
						previousValue.DeathAidFundDisbursements.Remove(this);
					}
					this._DeathAidFund.Entity = value;
					if ((value != null))
					{
						value.DeathAidFundDisbursements.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("DeathAidFund");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialFunds.DeathAidFundReceipts")]
	public partial class DeathAidFundReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _ReceiptID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<CashReceipt> _CashReceipt;
		
		private EntityRef<DeathAidFund> _DeathAidFund;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnReceiptIDChanging(long value);
    partial void OnReceiptIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public DeathAidFundReceipt()
		{
			this._CashReceipt = default(EntityRef<CashReceipt>);
			this._DeathAidFund = default(EntityRef<DeathAidFund>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._DeathAidFund.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="BigInt NOT NULL")]
		public long ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					if (this._CashReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_DeathAidFundReceipt", Storage="_CashReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsForeignKey=true)]
		public CashReceipt CashReceipt
		{
			get
			{
				return this._CashReceipt.Entity;
			}
			set
			{
				CashReceipt previousValue = this._CashReceipt.Entity;
				if (((previousValue != value) 
							|| (this._CashReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashReceipt.Entity = null;
						previousValue.DeathAidFundReceipts.Remove(this);
					}
					this._CashReceipt.Entity = value;
					if ((value != null))
					{
						value.DeathAidFundReceipts.Add(this);
						this._ReceiptID = value.ReceiptID;
					}
					else
					{
						this._ReceiptID = default(long);
					}
					this.SendPropertyChanged("CashReceipt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeathAidFund_DeathAidFundReceipt", Storage="_DeathAidFund", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public DeathAidFund DeathAidFund
		{
			get
			{
				return this._DeathAidFund.Entity;
			}
			set
			{
				DeathAidFund previousValue = this._DeathAidFund.Entity;
				if (((previousValue != value) 
							|| (this._DeathAidFund.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeathAidFund.Entity = null;
						previousValue.DeathAidFundReceipts.Remove(this);
					}
					this._DeathAidFund.Entity = value;
					if ((value != null))
					{
						value.DeathAidFundReceipts.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("DeathAidFund");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialFunds.DeathAidFundAdjustments")]
	public partial class DeathAidFundAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MemberID;
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private decimal _Balance;
		
		private EntityRef<DeathAidFund> _DeathAidFund;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public DeathAidFundAdjustment()
		{
			this._DeathAidFund = default(EntityRef<DeathAidFund>);
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._DeathAidFund.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL")]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeathAidFund_DeathAidFundAdjustment", Storage="_DeathAidFund", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public DeathAidFund DeathAidFund
		{
			get
			{
				return this._DeathAidFund.Entity;
			}
			set
			{
				DeathAidFund previousValue = this._DeathAidFund.Entity;
				if (((previousValue != value) 
							|| (this._DeathAidFund.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeathAidFund.Entity = null;
						previousValue.DeathAidFundAdjustments.Remove(this);
					}
					this._DeathAidFund.Entity = value;
					if ((value != null))
					{
						value.DeathAidFundAdjustments.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("DeathAidFund");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_DeathAidFundAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.DeathAidFundAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.DeathAidFundAdjustments.Add(this);
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Link.Adjustments")]
	public partial class Adjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AdjustmentID;
		
		private string _AdjustmentJournalVoucher;
		
		private string _UserID;
		
		private System.DateTime _AdjustmentDate;
		
		private System.Nullable<long> _MemberID;
		
		private EntitySet<SavingsDepositInterestAdjustment> _SavingsDepositInterestAdjustments;
		
		private EntitySet<CapitalShareDividendAdjustment> _CapitalShareDividendAdjustments;
		
		private EntitySet<CapitalSharePatronageRefundAdjustment> _CapitalSharePatronageRefundAdjustments;
		
		private EntitySet<LoanDividendAdjustment> _LoanDividendAdjustments;
		
		private EntitySet<SavingsDepositDividendAdjustment> _SavingsDepositDividendAdjustments;
		
		private EntitySet<YearlyDividend> _YearlyDividends;
		
		private EntitySet<QuarterlyInterest> _QuarterlyInterests;
		
		private EntitySet<CapitalShareInterestRebateAdjustment> _CapitalShareInterestRebateAdjustments;
		
		private EntitySet<LoanAdjustment> _LoanAdjustments;
		
		private EntitySet<CollegeInsurancePlanAdjustment> _CollegeInsurancePlanAdjustments;
		
		private EntitySet<PensionPlanAdjustment> _PensionPlanAdjustments;
		
		private EntitySet<PensionPlanInterestAdjustment> _PensionPlanInterestAdjustments;
		
		private EntitySet<CapitalShareAdjustment> _CapitalShareAdjustments;
		
		private EntitySet<SavingsDepositAdjustment> _SavingsDepositAdjustments;
		
		private EntitySet<TimeDepositAdjustment> _TimeDepositAdjustments;
		
		private EntitySet<TulunganFundAdjustment> _TulunganFundAdjustments;
		
		private EntitySet<DeathAidFundAdjustment> _DeathAidFundAdjustments;
		
		private EntityRef<MiscellaneousIncomeAdjustment> _MiscellaneousIncomeAdjustment;
		
		private EntityRef<OtherAdjustment> _OtherAdjustment;
		
		private EntityRef<User> _User;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAdjustmentJournalVoucherChanging(string value);
    partial void OnAdjustmentJournalVoucherChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnAdjustmentDateChanging(System.DateTime value);
    partial void OnAdjustmentDateChanged();
    partial void OnMemberIDChanging(System.Nullable<long> value);
    partial void OnMemberIDChanged();
    #endregion
		
		public Adjustment()
		{
			this._SavingsDepositInterestAdjustments = new EntitySet<SavingsDepositInterestAdjustment>(new Action<SavingsDepositInterestAdjustment>(this.attach_SavingsDepositInterestAdjustments), new Action<SavingsDepositInterestAdjustment>(this.detach_SavingsDepositInterestAdjustments));
			this._CapitalShareDividendAdjustments = new EntitySet<CapitalShareDividendAdjustment>(new Action<CapitalShareDividendAdjustment>(this.attach_CapitalShareDividendAdjustments), new Action<CapitalShareDividendAdjustment>(this.detach_CapitalShareDividendAdjustments));
			this._CapitalSharePatronageRefundAdjustments = new EntitySet<CapitalSharePatronageRefundAdjustment>(new Action<CapitalSharePatronageRefundAdjustment>(this.attach_CapitalSharePatronageRefundAdjustments), new Action<CapitalSharePatronageRefundAdjustment>(this.detach_CapitalSharePatronageRefundAdjustments));
			this._LoanDividendAdjustments = new EntitySet<LoanDividendAdjustment>(new Action<LoanDividendAdjustment>(this.attach_LoanDividendAdjustments), new Action<LoanDividendAdjustment>(this.detach_LoanDividendAdjustments));
			this._SavingsDepositDividendAdjustments = new EntitySet<SavingsDepositDividendAdjustment>(new Action<SavingsDepositDividendAdjustment>(this.attach_SavingsDepositDividendAdjustments), new Action<SavingsDepositDividendAdjustment>(this.detach_SavingsDepositDividendAdjustments));
			this._YearlyDividends = new EntitySet<YearlyDividend>(new Action<YearlyDividend>(this.attach_YearlyDividends), new Action<YearlyDividend>(this.detach_YearlyDividends));
			this._QuarterlyInterests = new EntitySet<QuarterlyInterest>(new Action<QuarterlyInterest>(this.attach_QuarterlyInterests), new Action<QuarterlyInterest>(this.detach_QuarterlyInterests));
			this._CapitalShareInterestRebateAdjustments = new EntitySet<CapitalShareInterestRebateAdjustment>(new Action<CapitalShareInterestRebateAdjustment>(this.attach_CapitalShareInterestRebateAdjustments), new Action<CapitalShareInterestRebateAdjustment>(this.detach_CapitalShareInterestRebateAdjustments));
			this._LoanAdjustments = new EntitySet<LoanAdjustment>(new Action<LoanAdjustment>(this.attach_LoanAdjustments), new Action<LoanAdjustment>(this.detach_LoanAdjustments));
			this._CollegeInsurancePlanAdjustments = new EntitySet<CollegeInsurancePlanAdjustment>(new Action<CollegeInsurancePlanAdjustment>(this.attach_CollegeInsurancePlanAdjustments), new Action<CollegeInsurancePlanAdjustment>(this.detach_CollegeInsurancePlanAdjustments));
			this._PensionPlanAdjustments = new EntitySet<PensionPlanAdjustment>(new Action<PensionPlanAdjustment>(this.attach_PensionPlanAdjustments), new Action<PensionPlanAdjustment>(this.detach_PensionPlanAdjustments));
			this._PensionPlanInterestAdjustments = new EntitySet<PensionPlanInterestAdjustment>(new Action<PensionPlanInterestAdjustment>(this.attach_PensionPlanInterestAdjustments), new Action<PensionPlanInterestAdjustment>(this.detach_PensionPlanInterestAdjustments));
			this._CapitalShareAdjustments = new EntitySet<CapitalShareAdjustment>(new Action<CapitalShareAdjustment>(this.attach_CapitalShareAdjustments), new Action<CapitalShareAdjustment>(this.detach_CapitalShareAdjustments));
			this._SavingsDepositAdjustments = new EntitySet<SavingsDepositAdjustment>(new Action<SavingsDepositAdjustment>(this.attach_SavingsDepositAdjustments), new Action<SavingsDepositAdjustment>(this.detach_SavingsDepositAdjustments));
			this._TimeDepositAdjustments = new EntitySet<TimeDepositAdjustment>(new Action<TimeDepositAdjustment>(this.attach_TimeDepositAdjustments), new Action<TimeDepositAdjustment>(this.detach_TimeDepositAdjustments));
			this._TulunganFundAdjustments = new EntitySet<TulunganFundAdjustment>(new Action<TulunganFundAdjustment>(this.attach_TulunganFundAdjustments), new Action<TulunganFundAdjustment>(this.detach_TulunganFundAdjustments));
			this._DeathAidFundAdjustments = new EntitySet<DeathAidFundAdjustment>(new Action<DeathAidFundAdjustment>(this.attach_DeathAidFundAdjustments), new Action<DeathAidFundAdjustment>(this.detach_DeathAidFundAdjustments));
			this._MiscellaneousIncomeAdjustment = default(EntityRef<MiscellaneousIncomeAdjustment>);
			this._OtherAdjustment = default(EntityRef<OtherAdjustment>);
			this._User = default(EntityRef<User>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentJournalVoucher", DbType="Char(9) NOT NULL", CanBeNull=false)]
		public string AdjustmentJournalVoucher
		{
			get
			{
				return this._AdjustmentJournalVoucher;
			}
			set
			{
				if ((this._AdjustmentJournalVoucher != value))
				{
					this.OnAdjustmentJournalVoucherChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentJournalVoucher = value;
					this.SendPropertyChanged("AdjustmentJournalVoucher");
					this.OnAdjustmentJournalVoucherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentDate", DbType="DateTime NOT NULL")]
		public System.DateTime AdjustmentDate
		{
			get
			{
				return this._AdjustmentDate;
			}
			set
			{
				if ((this._AdjustmentDate != value))
				{
					this.OnAdjustmentDateChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentDate = value;
					this.SendPropertyChanged("AdjustmentDate");
					this.OnAdjustmentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt")]
		public System.Nullable<long> MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_SavingsDepositInterestAdjustment", Storage="_SavingsDepositInterestAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<SavingsDepositInterestAdjustment> SavingsDepositInterestAdjustments
		{
			get
			{
				return this._SavingsDepositInterestAdjustments;
			}
			set
			{
				this._SavingsDepositInterestAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_CapitalShareDividendAdjustment", Storage="_CapitalShareDividendAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<CapitalShareDividendAdjustment> CapitalShareDividendAdjustments
		{
			get
			{
				return this._CapitalShareDividendAdjustments;
			}
			set
			{
				this._CapitalShareDividendAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_CapitalSharePatronageRefundAdjustment", Storage="_CapitalSharePatronageRefundAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<CapitalSharePatronageRefundAdjustment> CapitalSharePatronageRefundAdjustments
		{
			get
			{
				return this._CapitalSharePatronageRefundAdjustments;
			}
			set
			{
				this._CapitalSharePatronageRefundAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_LoanDividendAdjustment", Storage="_LoanDividendAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<LoanDividendAdjustment> LoanDividendAdjustments
		{
			get
			{
				return this._LoanDividendAdjustments;
			}
			set
			{
				this._LoanDividendAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_SavingsDepositDividendAdjustment", Storage="_SavingsDepositDividendAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<SavingsDepositDividendAdjustment> SavingsDepositDividendAdjustments
		{
			get
			{
				return this._SavingsDepositDividendAdjustments;
			}
			set
			{
				this._SavingsDepositDividendAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_YearlyDividend", Storage="_YearlyDividends", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<YearlyDividend> YearlyDividends
		{
			get
			{
				return this._YearlyDividends;
			}
			set
			{
				this._YearlyDividends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_QuarterlyInterest", Storage="_QuarterlyInterests", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<QuarterlyInterest> QuarterlyInterests
		{
			get
			{
				return this._QuarterlyInterests;
			}
			set
			{
				this._QuarterlyInterests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_CapitalShareInterestRebateAdjustment", Storage="_CapitalShareInterestRebateAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<CapitalShareInterestRebateAdjustment> CapitalShareInterestRebateAdjustments
		{
			get
			{
				return this._CapitalShareInterestRebateAdjustments;
			}
			set
			{
				this._CapitalShareInterestRebateAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_LoanAdjustment", Storage="_LoanAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<LoanAdjustment> LoanAdjustments
		{
			get
			{
				return this._LoanAdjustments;
			}
			set
			{
				this._LoanAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_CollegeInsurancePlanAdjustment", Storage="_CollegeInsurancePlanAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<CollegeInsurancePlanAdjustment> CollegeInsurancePlanAdjustments
		{
			get
			{
				return this._CollegeInsurancePlanAdjustments;
			}
			set
			{
				this._CollegeInsurancePlanAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_PensionPlanAdjustment", Storage="_PensionPlanAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<PensionPlanAdjustment> PensionPlanAdjustments
		{
			get
			{
				return this._PensionPlanAdjustments;
			}
			set
			{
				this._PensionPlanAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_PensionPlanInterestAdjustment", Storage="_PensionPlanInterestAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<PensionPlanInterestAdjustment> PensionPlanInterestAdjustments
		{
			get
			{
				return this._PensionPlanInterestAdjustments;
			}
			set
			{
				this._PensionPlanInterestAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_CapitalShareAdjustment", Storage="_CapitalShareAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<CapitalShareAdjustment> CapitalShareAdjustments
		{
			get
			{
				return this._CapitalShareAdjustments;
			}
			set
			{
				this._CapitalShareAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_SavingsDepositAdjustment", Storage="_SavingsDepositAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<SavingsDepositAdjustment> SavingsDepositAdjustments
		{
			get
			{
				return this._SavingsDepositAdjustments;
			}
			set
			{
				this._SavingsDepositAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_TimeDepositAdjustment", Storage="_TimeDepositAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<TimeDepositAdjustment> TimeDepositAdjustments
		{
			get
			{
				return this._TimeDepositAdjustments;
			}
			set
			{
				this._TimeDepositAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_TulunganFundAdjustment", Storage="_TulunganFundAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<TulunganFundAdjustment> TulunganFundAdjustments
		{
			get
			{
				return this._TulunganFundAdjustments;
			}
			set
			{
				this._TulunganFundAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_DeathAidFundAdjustment", Storage="_DeathAidFundAdjustments", ThisKey="AdjustmentID", OtherKey="AdjustmentID")]
		public EntitySet<DeathAidFundAdjustment> DeathAidFundAdjustments
		{
			get
			{
				return this._DeathAidFundAdjustments;
			}
			set
			{
				this._DeathAidFundAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_MiscellaneousIncomeAdjustment", Storage="_MiscellaneousIncomeAdjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsUnique=true, IsForeignKey=false)]
		public MiscellaneousIncomeAdjustment MiscellaneousIncomeAdjustment
		{
			get
			{
				return this._MiscellaneousIncomeAdjustment.Entity;
			}
			set
			{
				MiscellaneousIncomeAdjustment previousValue = this._MiscellaneousIncomeAdjustment.Entity;
				if (((previousValue != value) 
							|| (this._MiscellaneousIncomeAdjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MiscellaneousIncomeAdjustment.Entity = null;
						previousValue.Adjustment = null;
					}
					this._MiscellaneousIncomeAdjustment.Entity = value;
					if ((value != null))
					{
						value.Adjustment = this;
					}
					this.SendPropertyChanged("MiscellaneousIncomeAdjustment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_OtherAdjustment", Storage="_OtherAdjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsUnique=true, IsForeignKey=false)]
		public OtherAdjustment OtherAdjustment
		{
			get
			{
				return this._OtherAdjustment.Entity;
			}
			set
			{
				OtherAdjustment previousValue = this._OtherAdjustment.Entity;
				if (((previousValue != value) 
							|| (this._OtherAdjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OtherAdjustment.Entity = null;
						previousValue.Adjustment = null;
					}
					this._OtherAdjustment.Entity = value;
					if ((value != null))
					{
						value.Adjustment = this;
					}
					this.SendPropertyChanged("OtherAdjustment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Adjustment", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Adjustments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Adjustments.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Adjustment", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Adjustments.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Adjustments.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SavingsDepositInterestAdjustments(SavingsDepositInterestAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_SavingsDepositInterestAdjustments(SavingsDepositInterestAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_CapitalShareDividendAdjustments(CapitalShareDividendAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_CapitalShareDividendAdjustments(CapitalShareDividendAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_CapitalSharePatronageRefundAdjustments(CapitalSharePatronageRefundAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_CapitalSharePatronageRefundAdjustments(CapitalSharePatronageRefundAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_LoanDividendAdjustments(LoanDividendAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_LoanDividendAdjustments(LoanDividendAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_SavingsDepositDividendAdjustments(SavingsDepositDividendAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_SavingsDepositDividendAdjustments(SavingsDepositDividendAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_YearlyDividends(YearlyDividend entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_YearlyDividends(YearlyDividend entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_QuarterlyInterests(QuarterlyInterest entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_QuarterlyInterests(QuarterlyInterest entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_CapitalShareInterestRebateAdjustments(CapitalShareInterestRebateAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_CapitalShareInterestRebateAdjustments(CapitalShareInterestRebateAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_LoanAdjustments(LoanAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_LoanAdjustments(LoanAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_CollegeInsurancePlanAdjustments(CollegeInsurancePlanAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_CollegeInsurancePlanAdjustments(CollegeInsurancePlanAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_PensionPlanAdjustments(PensionPlanAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_PensionPlanAdjustments(PensionPlanAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_PensionPlanInterestAdjustments(PensionPlanInterestAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_PensionPlanInterestAdjustments(PensionPlanInterestAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_CapitalShareAdjustments(CapitalShareAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_CapitalShareAdjustments(CapitalShareAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_SavingsDepositAdjustments(SavingsDepositAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_SavingsDepositAdjustments(SavingsDepositAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_TimeDepositAdjustments(TimeDepositAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_TimeDepositAdjustments(TimeDepositAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_TulunganFundAdjustments(TulunganFundAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_TulunganFundAdjustments(TulunganFundAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_DeathAidFundAdjustments(DeathAidFundAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_DeathAidFundAdjustments(DeathAidFundAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MiscellaneousIncomeAdjustments")]
	public partial class MiscellaneousIncomeAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private string _Remarks;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public MiscellaneousIncomeAdjustment()
		{
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(250)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_MiscellaneousIncomeAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.MiscellaneousIncomeAdjustment = null;
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.MiscellaneousIncomeAdjustment = this;
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OtherAdjustments")]
	public partial class OtherAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AdjustmentID;
		
		private decimal _Amount;
		
		private string _Remarks;
		
		private EntityRef<Adjustment> _Adjustment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdjustmentIDChanging(long value);
    partial void OnAdjustmentIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public OtherAdjustment()
		{
			this._Adjustment = default(EntityRef<Adjustment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long AdjustmentID
		{
			get
			{
				return this._AdjustmentID;
			}
			set
			{
				if ((this._AdjustmentID != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIDChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentID = value;
					this.SendPropertyChanged("AdjustmentID");
					this.OnAdjustmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(250)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_OtherAdjustment", Storage="_Adjustment", ThisKey="AdjustmentID", OtherKey="AdjustmentID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.OtherAdjustment = null;
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.OtherAdjustment = this;
						this._AdjustmentID = value.AdjustmentID;
					}
					else
					{
						this._AdjustmentID = default(long);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Savings.DividendComputations")]
	public partial class DividendComputation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _DividendComputationID;
		
		private long _MemberID;
		
		private int _Year;
		
		private string _DepositoryServiceID;
		
		private decimal _AverageShare;
		
		private decimal _Dividend;
		
		private System.Nullable<bool> _Creditable;
		
		private EntitySet<DividendShareItem> _DividendShareItems;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<YearlyDividend> _YearlyDividend;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDividendComputationIDChanging(long value);
    partial void OnDividendComputationIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnDepositoryServiceIDChanging(string value);
    partial void OnDepositoryServiceIDChanged();
    partial void OnAverageShareChanging(decimal value);
    partial void OnAverageShareChanged();
    partial void OnDividendChanging(decimal value);
    partial void OnDividendChanged();
    partial void OnCreditableChanging(System.Nullable<bool> value);
    partial void OnCreditableChanged();
    #endregion
		
		public DividendComputation()
		{
			this._DividendShareItems = new EntitySet<DividendShareItem>(new Action<DividendShareItem>(this.attach_DividendShareItems), new Action<DividendShareItem>(this.detach_DividendShareItems));
			this._Service = default(EntityRef<Service>);
			this._YearlyDividend = default(EntityRef<YearlyDividend>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DividendComputationID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long DividendComputationID
		{
			get
			{
				return this._DividendComputationID;
			}
			set
			{
				if ((this._DividendComputationID != value))
				{
					this.OnDividendComputationIDChanging(value);
					this.SendPropertyChanging();
					this._DividendComputationID = value;
					this.SendPropertyChanged("DividendComputationID");
					this.OnDividendComputationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					if (this._YearlyDividend.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepositoryServiceID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string DepositoryServiceID
		{
			get
			{
				return this._DepositoryServiceID;
			}
			set
			{
				if ((this._DepositoryServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepositoryServiceIDChanging(value);
					this.SendPropertyChanging();
					this._DepositoryServiceID = value;
					this.SendPropertyChanged("DepositoryServiceID");
					this.OnDepositoryServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageShare", DbType="Money NOT NULL")]
		public decimal AverageShare
		{
			get
			{
				return this._AverageShare;
			}
			set
			{
				if ((this._AverageShare != value))
				{
					this.OnAverageShareChanging(value);
					this.SendPropertyChanging();
					this._AverageShare = value;
					this.SendPropertyChanged("AverageShare");
					this.OnAverageShareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dividend", DbType="Money NOT NULL")]
		public decimal Dividend
		{
			get
			{
				return this._Dividend;
			}
			set
			{
				if ((this._Dividend != value))
				{
					this.OnDividendChanging(value);
					this.SendPropertyChanging();
					this._Dividend = value;
					this.SendPropertyChanged("Dividend");
					this.OnDividendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Creditable", DbType="Bit")]
		public System.Nullable<bool> Creditable
		{
			get
			{
				return this._Creditable;
			}
			set
			{
				if ((this._Creditable != value))
				{
					this.OnCreditableChanging(value);
					this.SendPropertyChanging();
					this._Creditable = value;
					this.SendPropertyChanged("Creditable");
					this.OnCreditableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DividendComputation_DividendShareItem", Storage="_DividendShareItems", ThisKey="DividendComputationID", OtherKey="DividendComputationID")]
		public EntitySet<DividendShareItem> DividendShareItems
		{
			get
			{
				return this._DividendShareItems;
			}
			set
			{
				this._DividendShareItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_DividendComputation", Storage="_Service", ThisKey="DepositoryServiceID", OtherKey="ServiceID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.DividendComputations.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.DividendComputations.Add(this);
						this._DepositoryServiceID = value.ServiceID;
					}
					else
					{
						this._DepositoryServiceID = default(string);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YearlyDividend_DividendComputation", Storage="_YearlyDividend", ThisKey="Year", OtherKey="Year", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public YearlyDividend YearlyDividend
		{
			get
			{
				return this._YearlyDividend.Entity;
			}
			set
			{
				YearlyDividend previousValue = this._YearlyDividend.Entity;
				if (((previousValue != value) 
							|| (this._YearlyDividend.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._YearlyDividend.Entity = null;
						previousValue.DividendComputations.Remove(this);
					}
					this._YearlyDividend.Entity = value;
					if ((value != null))
					{
						value.DividendComputations.Add(this);
						this._Year = value.Year;
					}
					else
					{
						this._Year = default(int);
					}
					this.SendPropertyChanged("YearlyDividend");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_DividendComputation", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.DividendComputations.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.DividendComputations.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DividendShareItems(DividendShareItem entity)
		{
			this.SendPropertyChanging();
			entity.DividendComputation = this;
		}
		
		private void detach_DividendShareItems(DividendShareItem entity)
		{
			this.SendPropertyChanging();
			entity.DividendComputation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Application")]
	public partial class Application
	{
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _ExpirationDate;
		
		private string _OrganizationName;
		
		private string _Address;
		
		private string _TelephoneNumber;
		
		private string _Manager;
		
		public Application()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this._ExpirationDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationName", DbType="NVarChar(250)")]
		public string OrganizationName
		{
			get
			{
				return this._OrganizationName;
			}
			set
			{
				if ((this._OrganizationName != value))
				{
					this._OrganizationName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(350)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelephoneNumber", DbType="NVarChar(50)")]
		public string TelephoneNumber
		{
			get
			{
				return this._TelephoneNumber;
			}
			set
			{
				if ((this._TelephoneNumber != value))
				{
					this._TelephoneNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager", DbType="NVarChar(150)")]
		public string Manager
		{
			get
			{
				return this._Manager;
			}
			set
			{
				if ((this._Manager != value))
				{
					this._Manager = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Member.EducationalAttainments")]
	public partial class EducationalAttainment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MemberID;
		
		private int _LineNumber;
		
		private string _Level;
		
		private string _School;
		
		private string _Year;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnLineNumberChanging(int value);
    partial void OnLineNumberChanged();
    partial void OnLevelChanging(string value);
    partial void OnLevelChanged();
    partial void OnSchoolChanging(string value);
    partial void OnSchoolChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    #endregion
		
		public EducationalAttainment()
		{
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LineNumber
		{
			get
			{
				return this._LineNumber;
			}
			set
			{
				if ((this._LineNumber != value))
				{
					this.OnLineNumberChanging(value);
					this.SendPropertyChanging();
					this._LineNumber = value;
					this.SendPropertyChanged("LineNumber");
					this.OnLineNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="VarChar(100)")]
		public string Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_School", DbType="VarChar(250)")]
		public string School
		{
			get
			{
				return this._School;
			}
			set
			{
				if ((this._School != value))
				{
					this.OnSchoolChanging(value);
					this.SendPropertyChanging();
					this._School = value;
					this.SendPropertyChanged("School");
					this.OnSchoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="VarChar(50)")]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_EducationalAttainment", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.EducationalAttainments.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.EducationalAttainments.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[User].Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RoleID;
		
		private string _Name;
		
		private EntitySet<UsersRole> _UsersRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(string value);
    partial void OnRoleIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._UsersRoles = new EntitySet<UsersRole>(new Action<UsersRole>(this.attach_UsersRoles), new Action<UsersRole>(this.detach_UsersRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UsersRole", Storage="_UsersRoles", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<UsersRole> UsersRoles
		{
			get
			{
				return this._UsersRoles;
			}
			set
			{
				this._UsersRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersRoles(UsersRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UsersRoles(UsersRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Member.Pictures")]
	public partial class Picture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MemberID;
		
		private System.Data.Linq.Binary _Image;
		
		private System.Data.Linq.Binary _Signature;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    partial void OnSignatureChanging(System.Data.Linq.Binary value);
    partial void OnSignatureChanged();
    #endregion
		
		public Picture()
		{
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signature", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Signature
		{
			get
			{
				return this._Signature;
			}
			set
			{
				if ((this._Signature != value))
				{
					this.OnSignatureChanging(value);
					this.SendPropertyChanging();
					this._Signature = value;
					this.SendPropertyChanged("Signature");
					this.OnSignatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Picture", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Picture = null;
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Picture = this;
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[User].UsersRoles")]
	public partial class UsersRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserRoleID;
		
		private string _UserID;
		
		private string _RoleID;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserRoleIDChanging(int value);
    partial void OnUserRoleIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(string value);
    partial void OnRoleIDChanged();
    #endregion
		
		public UsersRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserRoleID
		{
			get
			{
				return this._UserRoleID;
			}
			set
			{
				if ((this._UserRoleID != value))
				{
					this.OnUserRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserRoleID = value;
					this.SendPropertyChanged("UserRoleID");
					this.OnUserRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(20)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="VarChar(2)")]
		public string RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UsersRole", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UsersRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UsersRoles.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(string);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersRole", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersRoles.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Member.Members")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MemberID;
		
		private string _AccountNumber;
		
		private string _AccountStatusID;
		
		private string _MembershipCategoryID;
		
		private System.DateTime _ApplicationDate;
		
		private System.Nullable<System.DateTime> _WithdrawalDate;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private System.DateTime _DateOfBirth;
		
		private string _PlaceOfBirth;
		
		private char _MaritalStatusID;
		
		private char _SexTypeID;
		
		private string _Address;
		
		private string _Province;
		
		private string _HomePhone;
		
		private string _MobilePhone;
		
		private string _MotherMaidenName;
		
		private string _LanguageDialects;
		
		private string _HighestEducationalAttainment;
		
		private string _Occupation;
		
		private string _Employer;
		
		private System.Nullable<decimal> _MonthlySalary;
		
		private string _OfficeAddress;
		
		private string _OfficePhone;
		
		private string _SpouseLastName;
		
		private string _SpouseFirstName;
		
		private string _SpouseMiddleName;
		
		private string _SpouseOccupation;
		
		private string _SpouseContactNumber;
		
		private string _SpouseEmployer;
		
		private string _SpouseOfficeAddress;
		
		private string _SpouseOfficePhone;
		
		private string _NearestRelativeLastName;
		
		private string _NearestRelativeFirstName;
		
		private string _NearestRelativeMiddleName;
		
		private string _NearestRelativeContactNumber;
		
		private string _MotherLastName;
		
		private string _MotherFirstName;
		
		private string _MotherMiddleName;
		
		private string _MotherContactNumber;
		
		private string _MotherOccupation;
		
		private string _MotherAddress;
		
		private string _FatherLastName;
		
		private string _FatherFirstName;
		
		private string _FatherMiddleName;
		
		private string _FatherContactNumber;
		
		private string _FatherOccupation;
		
		private string _FatherAddress;
		
		private EntitySet<AvailedService> _AvailedServices;
		
		private EntitySet<Dependent> _Dependents;
		
		private EntityRef<CapitalShare> _CapitalShare;
		
		private EntityRef<SavingsDeposit> _SavingsDeposit;
		
		private EntitySet<CashDisbursement> _CashDisbursements;
		
		private EntitySet<CashReceipt> _CashReceipts;
		
		private EntitySet<QuarterlyInterestComputation> _QuarterlyInterestComputations;
		
		private EntitySet<PatronageComputation> _PatronageComputations;
		
		private EntitySet<CollegeInsurancePlan> _CollegeInsurancePlans;
		
		private EntityRef<PensionPlan> _PensionPlan;
		
		private EntitySet<TimeDeposit> _TimeDeposits;
		
		private EntityRef<TulunganFund> _TulunganFund;
		
		private EntityRef<DeathAidFund> _DeathAidFund;
		
		private EntitySet<Adjustment> _Adjustments;
		
		private EntitySet<DividendComputation> _DividendComputations;
		
		private EntitySet<EducationalAttainment> _EducationalAttainments;
		
		private EntityRef<Picture> _Picture;
		
		private EntitySet<Loan> _Loans;
		
		private EntityRef<AccountStatus> _AccountStatus;
		
		private EntityRef<MaritalStatus> _MaritalStatus;
		
		private EntityRef<MembershipCategory> _MembershipCategory;
		
		private EntityRef<SexType> _SexType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnAccountStatusIDChanging(string value);
    partial void OnAccountStatusIDChanged();
    partial void OnMembershipCategoryIDChanging(string value);
    partial void OnMembershipCategoryIDChanged();
    partial void OnApplicationDateChanging(System.DateTime value);
    partial void OnApplicationDateChanged();
    partial void OnWithdrawalDateChanging(System.Nullable<System.DateTime> value);
    partial void OnWithdrawalDateChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnPlaceOfBirthChanging(string value);
    partial void OnPlaceOfBirthChanged();
    partial void OnMaritalStatusIDChanging(char value);
    partial void OnMaritalStatusIDChanged();
    partial void OnSexTypeIDChanging(char value);
    partial void OnSexTypeIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnMotherMaidenNameChanging(string value);
    partial void OnMotherMaidenNameChanged();
    partial void OnLanguageDialectsChanging(string value);
    partial void OnLanguageDialectsChanged();
    partial void OnHighestEducationalAttainmentChanging(string value);
    partial void OnHighestEducationalAttainmentChanged();
    partial void OnOccupationChanging(string value);
    partial void OnOccupationChanged();
    partial void OnEmployerChanging(string value);
    partial void OnEmployerChanged();
    partial void OnMonthlySalaryChanging(System.Nullable<decimal> value);
    partial void OnMonthlySalaryChanged();
    partial void OnOfficeAddressChanging(string value);
    partial void OnOfficeAddressChanged();
    partial void OnOfficePhoneChanging(string value);
    partial void OnOfficePhoneChanged();
    partial void OnSpouseLastNameChanging(string value);
    partial void OnSpouseLastNameChanged();
    partial void OnSpouseFirstNameChanging(string value);
    partial void OnSpouseFirstNameChanged();
    partial void OnSpouseMiddleNameChanging(string value);
    partial void OnSpouseMiddleNameChanged();
    partial void OnSpouseOccupationChanging(string value);
    partial void OnSpouseOccupationChanged();
    partial void OnSpouseContactNumberChanging(string value);
    partial void OnSpouseContactNumberChanged();
    partial void OnSpouseEmployerChanging(string value);
    partial void OnSpouseEmployerChanged();
    partial void OnSpouseOfficeAddressChanging(string value);
    partial void OnSpouseOfficeAddressChanged();
    partial void OnSpouseOfficePhoneChanging(string value);
    partial void OnSpouseOfficePhoneChanged();
    partial void OnNearestRelativeLastNameChanging(string value);
    partial void OnNearestRelativeLastNameChanged();
    partial void OnNearestRelativeFirstNameChanging(string value);
    partial void OnNearestRelativeFirstNameChanged();
    partial void OnNearestRelativeMiddleNameChanging(string value);
    partial void OnNearestRelativeMiddleNameChanged();
    partial void OnNearestRelativeContactNumberChanging(string value);
    partial void OnNearestRelativeContactNumberChanged();
    partial void OnMotherLastNameChanging(string value);
    partial void OnMotherLastNameChanged();
    partial void OnMotherFirstNameChanging(string value);
    partial void OnMotherFirstNameChanged();
    partial void OnMotherMiddleNameChanging(string value);
    partial void OnMotherMiddleNameChanged();
    partial void OnMotherContactNumberChanging(string value);
    partial void OnMotherContactNumberChanged();
    partial void OnMotherOccupationChanging(string value);
    partial void OnMotherOccupationChanged();
    partial void OnMotherAddressChanging(string value);
    partial void OnMotherAddressChanged();
    partial void OnFatherLastNameChanging(string value);
    partial void OnFatherLastNameChanged();
    partial void OnFatherFirstNameChanging(string value);
    partial void OnFatherFirstNameChanged();
    partial void OnFatherMiddleNameChanging(string value);
    partial void OnFatherMiddleNameChanged();
    partial void OnFatherContactNumberChanging(string value);
    partial void OnFatherContactNumberChanged();
    partial void OnFatherOccupationChanging(string value);
    partial void OnFatherOccupationChanged();
    partial void OnFatherAddressChanging(string value);
    partial void OnFatherAddressChanged();
    #endregion
		
		public Member()
		{
			this._AvailedServices = new EntitySet<AvailedService>(new Action<AvailedService>(this.attach_AvailedServices), new Action<AvailedService>(this.detach_AvailedServices));
			this._Dependents = new EntitySet<Dependent>(new Action<Dependent>(this.attach_Dependents), new Action<Dependent>(this.detach_Dependents));
			this._CapitalShare = default(EntityRef<CapitalShare>);
			this._SavingsDeposit = default(EntityRef<SavingsDeposit>);
			this._CashDisbursements = new EntitySet<CashDisbursement>(new Action<CashDisbursement>(this.attach_CashDisbursements), new Action<CashDisbursement>(this.detach_CashDisbursements));
			this._CashReceipts = new EntitySet<CashReceipt>(new Action<CashReceipt>(this.attach_CashReceipts), new Action<CashReceipt>(this.detach_CashReceipts));
			this._QuarterlyInterestComputations = new EntitySet<QuarterlyInterestComputation>(new Action<QuarterlyInterestComputation>(this.attach_QuarterlyInterestComputations), new Action<QuarterlyInterestComputation>(this.detach_QuarterlyInterestComputations));
			this._PatronageComputations = new EntitySet<PatronageComputation>(new Action<PatronageComputation>(this.attach_PatronageComputations), new Action<PatronageComputation>(this.detach_PatronageComputations));
			this._CollegeInsurancePlans = new EntitySet<CollegeInsurancePlan>(new Action<CollegeInsurancePlan>(this.attach_CollegeInsurancePlans), new Action<CollegeInsurancePlan>(this.detach_CollegeInsurancePlans));
			this._PensionPlan = default(EntityRef<PensionPlan>);
			this._TimeDeposits = new EntitySet<TimeDeposit>(new Action<TimeDeposit>(this.attach_TimeDeposits), new Action<TimeDeposit>(this.detach_TimeDeposits));
			this._TulunganFund = default(EntityRef<TulunganFund>);
			this._DeathAidFund = default(EntityRef<DeathAidFund>);
			this._Adjustments = new EntitySet<Adjustment>(new Action<Adjustment>(this.attach_Adjustments), new Action<Adjustment>(this.detach_Adjustments));
			this._DividendComputations = new EntitySet<DividendComputation>(new Action<DividendComputation>(this.attach_DividendComputations), new Action<DividendComputation>(this.detach_DividendComputations));
			this._EducationalAttainments = new EntitySet<EducationalAttainment>(new Action<EducationalAttainment>(this.attach_EducationalAttainments), new Action<EducationalAttainment>(this.detach_EducationalAttainments));
			this._Picture = default(EntityRef<Picture>);
			this._Loans = new EntitySet<Loan>(new Action<Loan>(this.attach_Loans), new Action<Loan>(this.detach_Loans));
			this._AccountStatus = default(EntityRef<AccountStatus>);
			this._MaritalStatus = default(EntityRef<MaritalStatus>);
			this._MembershipCategory = default(EntityRef<MembershipCategory>);
			this._SexType = default(EntityRef<SexType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="Char(13) NOT NULL", CanBeNull=false)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountStatusID", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string AccountStatusID
		{
			get
			{
				return this._AccountStatusID;
			}
			set
			{
				if ((this._AccountStatusID != value))
				{
					if (this._AccountStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountStatusIDChanging(value);
					this.SendPropertyChanging();
					this._AccountStatusID = value;
					this.SendPropertyChanged("AccountStatusID");
					this.OnAccountStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembershipCategoryID", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string MembershipCategoryID
		{
			get
			{
				return this._MembershipCategoryID;
			}
			set
			{
				if ((this._MembershipCategoryID != value))
				{
					if (this._MembershipCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembershipCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._MembershipCategoryID = value;
					this.SendPropertyChanged("MembershipCategoryID");
					this.OnMembershipCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ApplicationDate
		{
			get
			{
				return this._ApplicationDate;
			}
			set
			{
				if ((this._ApplicationDate != value))
				{
					this.OnApplicationDateChanging(value);
					this.SendPropertyChanging();
					this._ApplicationDate = value;
					this.SendPropertyChanged("ApplicationDate");
					this.OnApplicationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WithdrawalDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> WithdrawalDate
		{
			get
			{
				return this._WithdrawalDate;
			}
			set
			{
				if ((this._WithdrawalDate != value))
				{
					this.OnWithdrawalDateChanging(value);
					this.SendPropertyChanging();
					this._WithdrawalDate = value;
					this.SendPropertyChanged("WithdrawalDate");
					this.OnWithdrawalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceOfBirth", DbType="VarChar(80)")]
		public string PlaceOfBirth
		{
			get
			{
				return this._PlaceOfBirth;
			}
			set
			{
				if ((this._PlaceOfBirth != value))
				{
					this.OnPlaceOfBirthChanging(value);
					this.SendPropertyChanging();
					this._PlaceOfBirth = value;
					this.SendPropertyChanged("PlaceOfBirth");
					this.OnPlaceOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatusID", DbType="Char(1) NOT NULL")]
		public char MaritalStatusID
		{
			get
			{
				return this._MaritalStatusID;
			}
			set
			{
				if ((this._MaritalStatusID != value))
				{
					if (this._MaritalStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaritalStatusIDChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusID = value;
					this.SendPropertyChanged("MaritalStatusID");
					this.OnMaritalStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SexTypeID", DbType="Char(1) NOT NULL")]
		public char SexTypeID
		{
			get
			{
				return this._SexTypeID;
			}
			set
			{
				if ((this._SexTypeID != value))
				{
					if (this._SexType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSexTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SexTypeID = value;
					this.SendPropertyChanged("SexTypeID");
					this.OnSexTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(80)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="VarChar(80)")]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="VarChar(50)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="VarChar(50)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherMaidenName", DbType="VarChar(90)")]
		public string MotherMaidenName
		{
			get
			{
				return this._MotherMaidenName;
			}
			set
			{
				if ((this._MotherMaidenName != value))
				{
					this.OnMotherMaidenNameChanging(value);
					this.SendPropertyChanging();
					this._MotherMaidenName = value;
					this.SendPropertyChanged("MotherMaidenName");
					this.OnMotherMaidenNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageDialects", DbType="VarChar(60)")]
		public string LanguageDialects
		{
			get
			{
				return this._LanguageDialects;
			}
			set
			{
				if ((this._LanguageDialects != value))
				{
					this.OnLanguageDialectsChanging(value);
					this.SendPropertyChanging();
					this._LanguageDialects = value;
					this.SendPropertyChanged("LanguageDialects");
					this.OnLanguageDialectsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighestEducationalAttainment", DbType="VarChar(60)")]
		public string HighestEducationalAttainment
		{
			get
			{
				return this._HighestEducationalAttainment;
			}
			set
			{
				if ((this._HighestEducationalAttainment != value))
				{
					this.OnHighestEducationalAttainmentChanging(value);
					this.SendPropertyChanging();
					this._HighestEducationalAttainment = value;
					this.SendPropertyChanged("HighestEducationalAttainment");
					this.OnHighestEducationalAttainmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occupation", DbType="NVarChar(50)")]
		public string Occupation
		{
			get
			{
				return this._Occupation;
			}
			set
			{
				if ((this._Occupation != value))
				{
					this.OnOccupationChanging(value);
					this.SendPropertyChanging();
					this._Occupation = value;
					this.SendPropertyChanged("Occupation");
					this.OnOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employer", DbType="NVarChar(60)")]
		public string Employer
		{
			get
			{
				return this._Employer;
			}
			set
			{
				if ((this._Employer != value))
				{
					this.OnEmployerChanging(value);
					this.SendPropertyChanging();
					this._Employer = value;
					this.SendPropertyChanged("Employer");
					this.OnEmployerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthlySalary", DbType="Money")]
		public System.Nullable<decimal> MonthlySalary
		{
			get
			{
				return this._MonthlySalary;
			}
			set
			{
				if ((this._MonthlySalary != value))
				{
					this.OnMonthlySalaryChanging(value);
					this.SendPropertyChanging();
					this._MonthlySalary = value;
					this.SendPropertyChanged("MonthlySalary");
					this.OnMonthlySalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeAddress", DbType="VarChar(80)")]
		public string OfficeAddress
		{
			get
			{
				return this._OfficeAddress;
			}
			set
			{
				if ((this._OfficeAddress != value))
				{
					this.OnOfficeAddressChanging(value);
					this.SendPropertyChanging();
					this._OfficeAddress = value;
					this.SendPropertyChanged("OfficeAddress");
					this.OnOfficeAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficePhone", DbType="VarChar(50)")]
		public string OfficePhone
		{
			get
			{
				return this._OfficePhone;
			}
			set
			{
				if ((this._OfficePhone != value))
				{
					this.OnOfficePhoneChanging(value);
					this.SendPropertyChanging();
					this._OfficePhone = value;
					this.SendPropertyChanged("OfficePhone");
					this.OnOfficePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseLastName", DbType="VarChar(50)")]
		public string SpouseLastName
		{
			get
			{
				return this._SpouseLastName;
			}
			set
			{
				if ((this._SpouseLastName != value))
				{
					this.OnSpouseLastNameChanging(value);
					this.SendPropertyChanging();
					this._SpouseLastName = value;
					this.SendPropertyChanged("SpouseLastName");
					this.OnSpouseLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseFirstName", DbType="VarChar(50)")]
		public string SpouseFirstName
		{
			get
			{
				return this._SpouseFirstName;
			}
			set
			{
				if ((this._SpouseFirstName != value))
				{
					this.OnSpouseFirstNameChanging(value);
					this.SendPropertyChanging();
					this._SpouseFirstName = value;
					this.SendPropertyChanged("SpouseFirstName");
					this.OnSpouseFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseMiddleName", DbType="VarChar(50)")]
		public string SpouseMiddleName
		{
			get
			{
				return this._SpouseMiddleName;
			}
			set
			{
				if ((this._SpouseMiddleName != value))
				{
					this.OnSpouseMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._SpouseMiddleName = value;
					this.SendPropertyChanged("SpouseMiddleName");
					this.OnSpouseMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseOccupation", DbType="VarChar(50)")]
		public string SpouseOccupation
		{
			get
			{
				return this._SpouseOccupation;
			}
			set
			{
				if ((this._SpouseOccupation != value))
				{
					this.OnSpouseOccupationChanging(value);
					this.SendPropertyChanging();
					this._SpouseOccupation = value;
					this.SendPropertyChanged("SpouseOccupation");
					this.OnSpouseOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseContactNumber", DbType="VarChar(50)")]
		public string SpouseContactNumber
		{
			get
			{
				return this._SpouseContactNumber;
			}
			set
			{
				if ((this._SpouseContactNumber != value))
				{
					this.OnSpouseContactNumberChanging(value);
					this.SendPropertyChanging();
					this._SpouseContactNumber = value;
					this.SendPropertyChanged("SpouseContactNumber");
					this.OnSpouseContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseEmployer", DbType="VarChar(50)")]
		public string SpouseEmployer
		{
			get
			{
				return this._SpouseEmployer;
			}
			set
			{
				if ((this._SpouseEmployer != value))
				{
					this.OnSpouseEmployerChanging(value);
					this.SendPropertyChanging();
					this._SpouseEmployer = value;
					this.SendPropertyChanged("SpouseEmployer");
					this.OnSpouseEmployerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseOfficeAddress", DbType="VarChar(80)")]
		public string SpouseOfficeAddress
		{
			get
			{
				return this._SpouseOfficeAddress;
			}
			set
			{
				if ((this._SpouseOfficeAddress != value))
				{
					this.OnSpouseOfficeAddressChanging(value);
					this.SendPropertyChanging();
					this._SpouseOfficeAddress = value;
					this.SendPropertyChanged("SpouseOfficeAddress");
					this.OnSpouseOfficeAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseOfficePhone", DbType="VarChar(50)")]
		public string SpouseOfficePhone
		{
			get
			{
				return this._SpouseOfficePhone;
			}
			set
			{
				if ((this._SpouseOfficePhone != value))
				{
					this.OnSpouseOfficePhoneChanging(value);
					this.SendPropertyChanging();
					this._SpouseOfficePhone = value;
					this.SendPropertyChanged("SpouseOfficePhone");
					this.OnSpouseOfficePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NearestRelativeLastName", DbType="VarChar(50)")]
		public string NearestRelativeLastName
		{
			get
			{
				return this._NearestRelativeLastName;
			}
			set
			{
				if ((this._NearestRelativeLastName != value))
				{
					this.OnNearestRelativeLastNameChanging(value);
					this.SendPropertyChanging();
					this._NearestRelativeLastName = value;
					this.SendPropertyChanged("NearestRelativeLastName");
					this.OnNearestRelativeLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NearestRelativeFirstName", DbType="VarChar(50)")]
		public string NearestRelativeFirstName
		{
			get
			{
				return this._NearestRelativeFirstName;
			}
			set
			{
				if ((this._NearestRelativeFirstName != value))
				{
					this.OnNearestRelativeFirstNameChanging(value);
					this.SendPropertyChanging();
					this._NearestRelativeFirstName = value;
					this.SendPropertyChanged("NearestRelativeFirstName");
					this.OnNearestRelativeFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NearestRelativeMiddleName", DbType="VarChar(50)")]
		public string NearestRelativeMiddleName
		{
			get
			{
				return this._NearestRelativeMiddleName;
			}
			set
			{
				if ((this._NearestRelativeMiddleName != value))
				{
					this.OnNearestRelativeMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._NearestRelativeMiddleName = value;
					this.SendPropertyChanged("NearestRelativeMiddleName");
					this.OnNearestRelativeMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NearestRelativeContactNumber", DbType="VarChar(50)")]
		public string NearestRelativeContactNumber
		{
			get
			{
				return this._NearestRelativeContactNumber;
			}
			set
			{
				if ((this._NearestRelativeContactNumber != value))
				{
					this.OnNearestRelativeContactNumberChanging(value);
					this.SendPropertyChanging();
					this._NearestRelativeContactNumber = value;
					this.SendPropertyChanged("NearestRelativeContactNumber");
					this.OnNearestRelativeContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherLastName", DbType="VarChar(50)")]
		public string MotherLastName
		{
			get
			{
				return this._MotherLastName;
			}
			set
			{
				if ((this._MotherLastName != value))
				{
					this.OnMotherLastNameChanging(value);
					this.SendPropertyChanging();
					this._MotherLastName = value;
					this.SendPropertyChanged("MotherLastName");
					this.OnMotherLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherFirstName", DbType="VarChar(50)")]
		public string MotherFirstName
		{
			get
			{
				return this._MotherFirstName;
			}
			set
			{
				if ((this._MotherFirstName != value))
				{
					this.OnMotherFirstNameChanging(value);
					this.SendPropertyChanging();
					this._MotherFirstName = value;
					this.SendPropertyChanged("MotherFirstName");
					this.OnMotherFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherMiddleName", DbType="VarChar(50)")]
		public string MotherMiddleName
		{
			get
			{
				return this._MotherMiddleName;
			}
			set
			{
				if ((this._MotherMiddleName != value))
				{
					this.OnMotherMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MotherMiddleName = value;
					this.SendPropertyChanged("MotherMiddleName");
					this.OnMotherMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherContactNumber", DbType="VarChar(50)")]
		public string MotherContactNumber
		{
			get
			{
				return this._MotherContactNumber;
			}
			set
			{
				if ((this._MotherContactNumber != value))
				{
					this.OnMotherContactNumberChanging(value);
					this.SendPropertyChanging();
					this._MotherContactNumber = value;
					this.SendPropertyChanged("MotherContactNumber");
					this.OnMotherContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherOccupation", DbType="VarChar(50)")]
		public string MotherOccupation
		{
			get
			{
				return this._MotherOccupation;
			}
			set
			{
				if ((this._MotherOccupation != value))
				{
					this.OnMotherOccupationChanging(value);
					this.SendPropertyChanging();
					this._MotherOccupation = value;
					this.SendPropertyChanged("MotherOccupation");
					this.OnMotherOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherAddress", DbType="VarChar(80)")]
		public string MotherAddress
		{
			get
			{
				return this._MotherAddress;
			}
			set
			{
				if ((this._MotherAddress != value))
				{
					this.OnMotherAddressChanging(value);
					this.SendPropertyChanging();
					this._MotherAddress = value;
					this.SendPropertyChanged("MotherAddress");
					this.OnMotherAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherLastName", DbType="VarChar(50)")]
		public string FatherLastName
		{
			get
			{
				return this._FatherLastName;
			}
			set
			{
				if ((this._FatherLastName != value))
				{
					this.OnFatherLastNameChanging(value);
					this.SendPropertyChanging();
					this._FatherLastName = value;
					this.SendPropertyChanged("FatherLastName");
					this.OnFatherLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherFirstName", DbType="VarChar(50)")]
		public string FatherFirstName
		{
			get
			{
				return this._FatherFirstName;
			}
			set
			{
				if ((this._FatherFirstName != value))
				{
					this.OnFatherFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FatherFirstName = value;
					this.SendPropertyChanged("FatherFirstName");
					this.OnFatherFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherMiddleName", DbType="VarChar(50)")]
		public string FatherMiddleName
		{
			get
			{
				return this._FatherMiddleName;
			}
			set
			{
				if ((this._FatherMiddleName != value))
				{
					this.OnFatherMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._FatherMiddleName = value;
					this.SendPropertyChanged("FatherMiddleName");
					this.OnFatherMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherContactNumber", DbType="VarChar(50)")]
		public string FatherContactNumber
		{
			get
			{
				return this._FatherContactNumber;
			}
			set
			{
				if ((this._FatherContactNumber != value))
				{
					this.OnFatherContactNumberChanging(value);
					this.SendPropertyChanging();
					this._FatherContactNumber = value;
					this.SendPropertyChanged("FatherContactNumber");
					this.OnFatherContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherOccupation", DbType="VarChar(50)")]
		public string FatherOccupation
		{
			get
			{
				return this._FatherOccupation;
			}
			set
			{
				if ((this._FatherOccupation != value))
				{
					this.OnFatherOccupationChanging(value);
					this.SendPropertyChanging();
					this._FatherOccupation = value;
					this.SendPropertyChanged("FatherOccupation");
					this.OnFatherOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherAddress", DbType="VarChar(80)")]
		public string FatherAddress
		{
			get
			{
				return this._FatherAddress;
			}
			set
			{
				if ((this._FatherAddress != value))
				{
					this.OnFatherAddressChanging(value);
					this.SendPropertyChanging();
					this._FatherAddress = value;
					this.SendPropertyChanged("FatherAddress");
					this.OnFatherAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_AvailedService", Storage="_AvailedServices", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<AvailedService> AvailedServices
		{
			get
			{
				return this._AvailedServices;
			}
			set
			{
				this._AvailedServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Dependent", Storage="_Dependents", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<Dependent> Dependents
		{
			get
			{
				return this._Dependents;
			}
			set
			{
				this._Dependents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_CapitalShare", Storage="_CapitalShare", ThisKey="MemberID", OtherKey="MemberID", IsUnique=true, IsForeignKey=false)]
		public CapitalShare CapitalShare
		{
			get
			{
				return this._CapitalShare.Entity;
			}
			set
			{
				CapitalShare previousValue = this._CapitalShare.Entity;
				if (((previousValue != value) 
							|| (this._CapitalShare.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CapitalShare.Entity = null;
						previousValue.Member = null;
					}
					this._CapitalShare.Entity = value;
					if ((value != null))
					{
						value.Member = this;
					}
					this.SendPropertyChanged("CapitalShare");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_SavingsDeposit", Storage="_SavingsDeposit", ThisKey="MemberID", OtherKey="MemberID", IsUnique=true, IsForeignKey=false)]
		public SavingsDeposit SavingsDeposit
		{
			get
			{
				return this._SavingsDeposit.Entity;
			}
			set
			{
				SavingsDeposit previousValue = this._SavingsDeposit.Entity;
				if (((previousValue != value) 
							|| (this._SavingsDeposit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SavingsDeposit.Entity = null;
						previousValue.Member = null;
					}
					this._SavingsDeposit.Entity = value;
					if ((value != null))
					{
						value.Member = this;
					}
					this.SendPropertyChanged("SavingsDeposit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_CashDisbursement", Storage="_CashDisbursements", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<CashDisbursement> CashDisbursements
		{
			get
			{
				return this._CashDisbursements;
			}
			set
			{
				this._CashDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_CashReceipt", Storage="_CashReceipts", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<CashReceipt> CashReceipts
		{
			get
			{
				return this._CashReceipts;
			}
			set
			{
				this._CashReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_QuarterlyInterestComputation", Storage="_QuarterlyInterestComputations", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<QuarterlyInterestComputation> QuarterlyInterestComputations
		{
			get
			{
				return this._QuarterlyInterestComputations;
			}
			set
			{
				this._QuarterlyInterestComputations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_PatronageComputation", Storage="_PatronageComputations", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<PatronageComputation> PatronageComputations
		{
			get
			{
				return this._PatronageComputations;
			}
			set
			{
				this._PatronageComputations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_CollegeInsurancePlan", Storage="_CollegeInsurancePlans", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<CollegeInsurancePlan> CollegeInsurancePlans
		{
			get
			{
				return this._CollegeInsurancePlans;
			}
			set
			{
				this._CollegeInsurancePlans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_PensionPlan", Storage="_PensionPlan", ThisKey="MemberID", OtherKey="MemberID", IsUnique=true, IsForeignKey=false)]
		public PensionPlan PensionPlan
		{
			get
			{
				return this._PensionPlan.Entity;
			}
			set
			{
				PensionPlan previousValue = this._PensionPlan.Entity;
				if (((previousValue != value) 
							|| (this._PensionPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PensionPlan.Entity = null;
						previousValue.Member = null;
					}
					this._PensionPlan.Entity = value;
					if ((value != null))
					{
						value.Member = this;
					}
					this.SendPropertyChanged("PensionPlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_TimeDeposit", Storage="_TimeDeposits", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<TimeDeposit> TimeDeposits
		{
			get
			{
				return this._TimeDeposits;
			}
			set
			{
				this._TimeDeposits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_TulunganFund", Storage="_TulunganFund", ThisKey="MemberID", OtherKey="MemberID", IsUnique=true, IsForeignKey=false)]
		public TulunganFund TulunganFund
		{
			get
			{
				return this._TulunganFund.Entity;
			}
			set
			{
				TulunganFund previousValue = this._TulunganFund.Entity;
				if (((previousValue != value) 
							|| (this._TulunganFund.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TulunganFund.Entity = null;
						previousValue.Member = null;
					}
					this._TulunganFund.Entity = value;
					if ((value != null))
					{
						value.Member = this;
					}
					this.SendPropertyChanged("TulunganFund");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_DeathAidFund", Storage="_DeathAidFund", ThisKey="MemberID", OtherKey="MemberID", IsUnique=true, IsForeignKey=false)]
		public DeathAidFund DeathAidFund
		{
			get
			{
				return this._DeathAidFund.Entity;
			}
			set
			{
				DeathAidFund previousValue = this._DeathAidFund.Entity;
				if (((previousValue != value) 
							|| (this._DeathAidFund.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeathAidFund.Entity = null;
						previousValue.Member = null;
					}
					this._DeathAidFund.Entity = value;
					if ((value != null))
					{
						value.Member = this;
					}
					this.SendPropertyChanged("DeathAidFund");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Adjustment", Storage="_Adjustments", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<Adjustment> Adjustments
		{
			get
			{
				return this._Adjustments;
			}
			set
			{
				this._Adjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_DividendComputation", Storage="_DividendComputations", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<DividendComputation> DividendComputations
		{
			get
			{
				return this._DividendComputations;
			}
			set
			{
				this._DividendComputations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_EducationalAttainment", Storage="_EducationalAttainments", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<EducationalAttainment> EducationalAttainments
		{
			get
			{
				return this._EducationalAttainments;
			}
			set
			{
				this._EducationalAttainments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Picture", Storage="_Picture", ThisKey="MemberID", OtherKey="MemberID", IsUnique=true, IsForeignKey=false)]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.Member = null;
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.Member = this;
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Loan", Storage="_Loans", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<Loan> Loans
		{
			get
			{
				return this._Loans;
			}
			set
			{
				this._Loans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountStatus_Member", Storage="_AccountStatus", ThisKey="AccountStatusID", OtherKey="AccountStatusID", IsForeignKey=true)]
		public AccountStatus AccountStatus
		{
			get
			{
				return this._AccountStatus.Entity;
			}
			set
			{
				AccountStatus previousValue = this._AccountStatus.Entity;
				if (((previousValue != value) 
							|| (this._AccountStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountStatus.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._AccountStatus.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._AccountStatusID = value.AccountStatusID;
					}
					else
					{
						this._AccountStatusID = default(string);
					}
					this.SendPropertyChanged("AccountStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaritalStatus_Member", Storage="_MaritalStatus", ThisKey="MaritalStatusID", OtherKey="MaritalStatusID", IsForeignKey=true)]
		public MaritalStatus MaritalStatus
		{
			get
			{
				return this._MaritalStatus.Entity;
			}
			set
			{
				MaritalStatus previousValue = this._MaritalStatus.Entity;
				if (((previousValue != value) 
							|| (this._MaritalStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaritalStatus.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._MaritalStatus.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._MaritalStatusID = value.MaritalStatusID;
					}
					else
					{
						this._MaritalStatusID = default(char);
					}
					this.SendPropertyChanged("MaritalStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MembershipCategory_Member", Storage="_MembershipCategory", ThisKey="MembershipCategoryID", OtherKey="MembershipCategoryID", IsForeignKey=true)]
		public MembershipCategory MembershipCategory
		{
			get
			{
				return this._MembershipCategory.Entity;
			}
			set
			{
				MembershipCategory previousValue = this._MembershipCategory.Entity;
				if (((previousValue != value) 
							|| (this._MembershipCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MembershipCategory.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._MembershipCategory.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._MembershipCategoryID = value.MembershipCategoryID;
					}
					else
					{
						this._MembershipCategoryID = default(string);
					}
					this.SendPropertyChanged("MembershipCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SexType_Member", Storage="_SexType", ThisKey="SexTypeID", OtherKey="SexTypeID", IsForeignKey=true)]
		public SexType SexType
		{
			get
			{
				return this._SexType.Entity;
			}
			set
			{
				SexType previousValue = this._SexType.Entity;
				if (((previousValue != value) 
							|| (this._SexType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SexType.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._SexType.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._SexTypeID = value.SexTypeID;
					}
					else
					{
						this._SexTypeID = default(char);
					}
					this.SendPropertyChanged("SexType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AvailedServices(AvailedService entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_AvailedServices(AvailedService entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Dependents(Dependent entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Dependents(Dependent entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_CashDisbursements(CashDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_CashDisbursements(CashDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_CashReceipts(CashReceipt entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_CashReceipts(CashReceipt entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_QuarterlyInterestComputations(QuarterlyInterestComputation entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_QuarterlyInterestComputations(QuarterlyInterestComputation entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_PatronageComputations(PatronageComputation entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_PatronageComputations(PatronageComputation entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_CollegeInsurancePlans(CollegeInsurancePlan entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_CollegeInsurancePlans(CollegeInsurancePlan entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_TimeDeposits(TimeDeposit entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_TimeDeposits(TimeDeposit entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Adjustments(Adjustment entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Adjustments(Adjustment entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_DividendComputations(DividendComputation entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_DividendComputations(DividendComputation entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_EducationalAttainments(EducationalAttainment entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_EducationalAttainments(EducationalAttainment entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.FineComputationRate")]
	public partial class FineComputationRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _Rate;
		
		private decimal _EmergencyLoanFine;
		
		private System.Nullable<decimal> _EmergencyLoanFineComputationBase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRateChanging(decimal value);
    partial void OnRateChanged();
    partial void OnEmergencyLoanFineChanging(decimal value);
    partial void OnEmergencyLoanFineChanged();
    partial void OnEmergencyLoanFineComputationBaseChanging(System.Nullable<decimal> value);
    partial void OnEmergencyLoanFineComputationBaseChanged();
    #endregion
		
		public FineComputationRate()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Decimal(4,2) NOT NULL")]
		public decimal Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmergencyLoanFine", DbType="Money NOT NULL")]
		public decimal EmergencyLoanFine
		{
			get
			{
				return this._EmergencyLoanFine;
			}
			set
			{
				if ((this._EmergencyLoanFine != value))
				{
					this.OnEmergencyLoanFineChanging(value);
					this.SendPropertyChanging();
					this._EmergencyLoanFine = value;
					this.SendPropertyChanged("EmergencyLoanFine");
					this.OnEmergencyLoanFineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmergencyLoanFineComputationBase", DbType="Money")]
		public System.Nullable<decimal> EmergencyLoanFineComputationBase
		{
			get
			{
				return this._EmergencyLoanFineComputationBase;
			}
			set
			{
				if ((this._EmergencyLoanFineComputationBase != value))
				{
					this.OnEmergencyLoanFineComputationBaseChanging(value);
					this.SendPropertyChanging();
					this._EmergencyLoanFineComputationBase = value;
					this.SendPropertyChanged("EmergencyLoanFineComputationBase");
					this.OnEmergencyLoanFineComputationBaseChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.DelinquentFineReceipts")]
	public partial class DelinquentFineReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _LoanID;
		
		private long _ReceiptID;
		
		private decimal _Amount;
		
		private System.Nullable<decimal> _ComputedAmount;
		
		private System.Nullable<bool> _Condone;
		
		private System.Nullable<decimal> _PreviousUnpaid;
		
		private EntityRef<CashReceipt> _CashReceipt;
		
		private EntityRef<Loan> _Loan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnLoanIDChanging(long value);
    partial void OnLoanIDChanged();
    partial void OnReceiptIDChanging(long value);
    partial void OnReceiptIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnComputedAmountChanging(System.Nullable<decimal> value);
    partial void OnComputedAmountChanged();
    partial void OnCondoneChanging(System.Nullable<bool> value);
    partial void OnCondoneChanged();
    partial void OnPreviousUnpaidChanging(System.Nullable<decimal> value);
    partial void OnPreviousUnpaidChanged();
    #endregion
		
		public DelinquentFineReceipt()
		{
			this._CashReceipt = default(EntityRef<CashReceipt>);
			this._Loan = default(EntityRef<Loan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanID", DbType="BigInt NOT NULL")]
		public long LoanID
		{
			get
			{
				return this._LoanID;
			}
			set
			{
				if ((this._LoanID != value))
				{
					if (this._Loan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanIDChanging(value);
					this.SendPropertyChanging();
					this._LoanID = value;
					this.SendPropertyChanged("LoanID");
					this.OnLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="BigInt NOT NULL")]
		public long ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					if (this._CashReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComputedAmount", DbType="Money")]
		public System.Nullable<decimal> ComputedAmount
		{
			get
			{
				return this._ComputedAmount;
			}
			set
			{
				if ((this._ComputedAmount != value))
				{
					this.OnComputedAmountChanging(value);
					this.SendPropertyChanging();
					this._ComputedAmount = value;
					this.SendPropertyChanged("ComputedAmount");
					this.OnComputedAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Condone", DbType="Bit")]
		public System.Nullable<bool> Condone
		{
			get
			{
				return this._Condone;
			}
			set
			{
				if ((this._Condone != value))
				{
					this.OnCondoneChanging(value);
					this.SendPropertyChanging();
					this._Condone = value;
					this.SendPropertyChanged("Condone");
					this.OnCondoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousUnpaid", DbType="Money")]
		public System.Nullable<decimal> PreviousUnpaid
		{
			get
			{
				return this._PreviousUnpaid;
			}
			set
			{
				if ((this._PreviousUnpaid != value))
				{
					this.OnPreviousUnpaidChanging(value);
					this.SendPropertyChanging();
					this._PreviousUnpaid = value;
					this.SendPropertyChanged("PreviousUnpaid");
					this.OnPreviousUnpaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_DelinquentFineReceipt", Storage="_CashReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsForeignKey=true)]
		public CashReceipt CashReceipt
		{
			get
			{
				return this._CashReceipt.Entity;
			}
			set
			{
				CashReceipt previousValue = this._CashReceipt.Entity;
				if (((previousValue != value) 
							|| (this._CashReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashReceipt.Entity = null;
						previousValue.DelinquentFineReceipts.Remove(this);
					}
					this._CashReceipt.Entity = value;
					if ((value != null))
					{
						value.DelinquentFineReceipts.Add(this);
						this._ReceiptID = value.ReceiptID;
					}
					else
					{
						this._ReceiptID = default(long);
					}
					this.SendPropertyChanged("CashReceipt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_DelinquentFineReceipt", Storage="_Loan", ThisKey="LoanID", OtherKey="LoanID", IsForeignKey=true)]
		public Loan Loan
		{
			get
			{
				return this._Loan.Entity;
			}
			set
			{
				Loan previousValue = this._Loan.Entity;
				if (((previousValue != value) 
							|| (this._Loan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Loan.Entity = null;
						previousValue.DelinquentFineReceipts.Remove(this);
					}
					this._Loan.Entity = value;
					if ((value != null))
					{
						value.DelinquentFineReceipts.Add(this);
						this._LoanID = value.LoanID;
					}
					else
					{
						this._LoanID = default(long);
					}
					this.SendPropertyChanged("Loan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.LatePaymentFineReceipts")]
	public partial class LatePaymentFineReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _LoanID;
		
		private long _ReceiptID;
		
		private decimal _Amount;
		
		private System.Nullable<decimal> _ComputedAmount;
		
		private System.Nullable<bool> _Condone;
		
		private System.Nullable<decimal> _PreviousUnpaid;
		
		private EntityRef<CashReceipt> _CashReceipt;
		
		private EntityRef<Loan> _Loan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnLoanIDChanging(long value);
    partial void OnLoanIDChanged();
    partial void OnReceiptIDChanging(long value);
    partial void OnReceiptIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnComputedAmountChanging(System.Nullable<decimal> value);
    partial void OnComputedAmountChanged();
    partial void OnCondoneChanging(System.Nullable<bool> value);
    partial void OnCondoneChanged();
    partial void OnPreviousUnpaidChanging(System.Nullable<decimal> value);
    partial void OnPreviousUnpaidChanged();
    #endregion
		
		public LatePaymentFineReceipt()
		{
			this._CashReceipt = default(EntityRef<CashReceipt>);
			this._Loan = default(EntityRef<Loan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanID", DbType="BigInt NOT NULL")]
		public long LoanID
		{
			get
			{
				return this._LoanID;
			}
			set
			{
				if ((this._LoanID != value))
				{
					if (this._Loan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanIDChanging(value);
					this.SendPropertyChanging();
					this._LoanID = value;
					this.SendPropertyChanged("LoanID");
					this.OnLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="BigInt NOT NULL")]
		public long ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					if (this._CashReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComputedAmount", DbType="Money")]
		public System.Nullable<decimal> ComputedAmount
		{
			get
			{
				return this._ComputedAmount;
			}
			set
			{
				if ((this._ComputedAmount != value))
				{
					this.OnComputedAmountChanging(value);
					this.SendPropertyChanging();
					this._ComputedAmount = value;
					this.SendPropertyChanged("ComputedAmount");
					this.OnComputedAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Condone", DbType="Bit")]
		public System.Nullable<bool> Condone
		{
			get
			{
				return this._Condone;
			}
			set
			{
				if ((this._Condone != value))
				{
					this.OnCondoneChanging(value);
					this.SendPropertyChanging();
					this._Condone = value;
					this.SendPropertyChanged("Condone");
					this.OnCondoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousUnpaid", DbType="Money")]
		public System.Nullable<decimal> PreviousUnpaid
		{
			get
			{
				return this._PreviousUnpaid;
			}
			set
			{
				if ((this._PreviousUnpaid != value))
				{
					this.OnPreviousUnpaidChanging(value);
					this.SendPropertyChanging();
					this._PreviousUnpaid = value;
					this.SendPropertyChanged("PreviousUnpaid");
					this.OnPreviousUnpaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashReceipt_LatePaymentFineReceipt", Storage="_CashReceipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsForeignKey=true)]
		public CashReceipt CashReceipt
		{
			get
			{
				return this._CashReceipt.Entity;
			}
			set
			{
				CashReceipt previousValue = this._CashReceipt.Entity;
				if (((previousValue != value) 
							|| (this._CashReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashReceipt.Entity = null;
						previousValue.LatePaymentFineReceipts.Remove(this);
					}
					this._CashReceipt.Entity = value;
					if ((value != null))
					{
						value.LatePaymentFineReceipts.Add(this);
						this._ReceiptID = value.ReceiptID;
					}
					else
					{
						this._ReceiptID = default(long);
					}
					this.SendPropertyChanged("CashReceipt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_LatePaymentFineReceipt", Storage="_Loan", ThisKey="LoanID", OtherKey="LoanID", IsForeignKey=true)]
		public Loan Loan
		{
			get
			{
				return this._Loan.Entity;
			}
			set
			{
				Loan previousValue = this._Loan.Entity;
				if (((previousValue != value) 
							|| (this._Loan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Loan.Entity = null;
						previousValue.LatePaymentFineReceipts.Remove(this);
					}
					this._Loan.Entity = value;
					if ((value != null))
					{
						value.LatePaymentFineReceipts.Add(this);
						this._LoanID = value.LoanID;
					}
					else
					{
						this._LoanID = default(long);
					}
					this.SendPropertyChanged("Loan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.AgingLoanItems")]
	public partial class AgingLoanItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AgingLoanItemID;
		
		private System.Nullable<long> _AgingLoanID;
		
		private string _Name;
		
		private System.Nullable<int> _AgeInDays;
		
		private System.Nullable<int> _AgeInMonths;
		
		private string _AgeGroupInDays;
		
		private string _LoanType;
		
		private System.Nullable<bool> _LoanHasAged;
		
		private System.Nullable<decimal> _CurrentPayables;
		
		private System.Nullable<decimal> _OutstandingBalance;
		
		private System.Nullable<decimal> _AgedPayables;
		
		private System.Nullable<decimal> _GoodPayables;
		
		private System.Nullable<decimal> _LatePaymentFine;
		
		private System.Nullable<decimal> _DelinquentCharge;
		
		private System.Nullable<System.DateTime> _LoanDate;
		
		private System.Nullable<System.DateTime> _LastPaymentDate;
		
		private System.Nullable<System.DateTime> _DueDate;
		
		private EntityRef<AgingLoan> _AgingLoan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgingLoanItemIDChanging(long value);
    partial void OnAgingLoanItemIDChanged();
    partial void OnAgingLoanIDChanging(System.Nullable<long> value);
    partial void OnAgingLoanIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAgeInDaysChanging(System.Nullable<int> value);
    partial void OnAgeInDaysChanged();
    partial void OnAgeInMonthsChanging(System.Nullable<int> value);
    partial void OnAgeInMonthsChanged();
    partial void OnAgeGroupInDaysChanging(string value);
    partial void OnAgeGroupInDaysChanged();
    partial void OnLoanTypeChanging(string value);
    partial void OnLoanTypeChanged();
    partial void OnLoanHasAgedChanging(System.Nullable<bool> value);
    partial void OnLoanHasAgedChanged();
    partial void OnCurrentPayablesChanging(System.Nullable<decimal> value);
    partial void OnCurrentPayablesChanged();
    partial void OnOutstandingBalanceChanging(System.Nullable<decimal> value);
    partial void OnOutstandingBalanceChanged();
    partial void OnAgedPayablesChanging(System.Nullable<decimal> value);
    partial void OnAgedPayablesChanged();
    partial void OnGoodPayablesChanging(System.Nullable<decimal> value);
    partial void OnGoodPayablesChanged();
    partial void OnLatePaymentFineChanging(System.Nullable<decimal> value);
    partial void OnLatePaymentFineChanged();
    partial void OnDelinquentChargeChanging(System.Nullable<decimal> value);
    partial void OnDelinquentChargeChanged();
    partial void OnLoanDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLoanDateChanged();
    partial void OnLastPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPaymentDateChanged();
    partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDueDateChanged();
    #endregion
		
		public AgingLoanItem()
		{
			this._AgingLoan = default(EntityRef<AgingLoan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgingLoanItemID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AgingLoanItemID
		{
			get
			{
				return this._AgingLoanItemID;
			}
			set
			{
				if ((this._AgingLoanItemID != value))
				{
					this.OnAgingLoanItemIDChanging(value);
					this.SendPropertyChanging();
					this._AgingLoanItemID = value;
					this.SendPropertyChanged("AgingLoanItemID");
					this.OnAgingLoanItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgingLoanID", DbType="BigInt")]
		public System.Nullable<long> AgingLoanID
		{
			get
			{
				return this._AgingLoanID;
			}
			set
			{
				if ((this._AgingLoanID != value))
				{
					if (this._AgingLoan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgingLoanIDChanging(value);
					this.SendPropertyChanging();
					this._AgingLoanID = value;
					this.SendPropertyChanged("AgingLoanID");
					this.OnAgingLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeInDays", DbType="Int")]
		public System.Nullable<int> AgeInDays
		{
			get
			{
				return this._AgeInDays;
			}
			set
			{
				if ((this._AgeInDays != value))
				{
					this.OnAgeInDaysChanging(value);
					this.SendPropertyChanging();
					this._AgeInDays = value;
					this.SendPropertyChanged("AgeInDays");
					this.OnAgeInDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeInMonths", DbType="Int")]
		public System.Nullable<int> AgeInMonths
		{
			get
			{
				return this._AgeInMonths;
			}
			set
			{
				if ((this._AgeInMonths != value))
				{
					this.OnAgeInMonthsChanging(value);
					this.SendPropertyChanging();
					this._AgeInMonths = value;
					this.SendPropertyChanged("AgeInMonths");
					this.OnAgeInMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeGroupInDays", DbType="NVarChar(50)")]
		public string AgeGroupInDays
		{
			get
			{
				return this._AgeGroupInDays;
			}
			set
			{
				if ((this._AgeGroupInDays != value))
				{
					this.OnAgeGroupInDaysChanging(value);
					this.SendPropertyChanging();
					this._AgeGroupInDays = value;
					this.SendPropertyChanged("AgeGroupInDays");
					this.OnAgeGroupInDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanType", DbType="NVarChar(50)")]
		public string LoanType
		{
			get
			{
				return this._LoanType;
			}
			set
			{
				if ((this._LoanType != value))
				{
					this.OnLoanTypeChanging(value);
					this.SendPropertyChanging();
					this._LoanType = value;
					this.SendPropertyChanged("LoanType");
					this.OnLoanTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanHasAged", DbType="Bit")]
		public System.Nullable<bool> LoanHasAged
		{
			get
			{
				return this._LoanHasAged;
			}
			set
			{
				if ((this._LoanHasAged != value))
				{
					this.OnLoanHasAgedChanging(value);
					this.SendPropertyChanging();
					this._LoanHasAged = value;
					this.SendPropertyChanged("LoanHasAged");
					this.OnLoanHasAgedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentPayables", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> CurrentPayables
		{
			get
			{
				return this._CurrentPayables;
			}
			set
			{
				if ((this._CurrentPayables != value))
				{
					this.OnCurrentPayablesChanging(value);
					this.SendPropertyChanging();
					this._CurrentPayables = value;
					this.SendPropertyChanged("CurrentPayables");
					this.OnCurrentPayablesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutstandingBalance", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> OutstandingBalance
		{
			get
			{
				return this._OutstandingBalance;
			}
			set
			{
				if ((this._OutstandingBalance != value))
				{
					this.OnOutstandingBalanceChanging(value);
					this.SendPropertyChanging();
					this._OutstandingBalance = value;
					this.SendPropertyChanged("OutstandingBalance");
					this.OnOutstandingBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgedPayables", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> AgedPayables
		{
			get
			{
				return this._AgedPayables;
			}
			set
			{
				if ((this._AgedPayables != value))
				{
					this.OnAgedPayablesChanging(value);
					this.SendPropertyChanging();
					this._AgedPayables = value;
					this.SendPropertyChanged("AgedPayables");
					this.OnAgedPayablesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodPayables", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> GoodPayables
		{
			get
			{
				return this._GoodPayables;
			}
			set
			{
				if ((this._GoodPayables != value))
				{
					this.OnGoodPayablesChanging(value);
					this.SendPropertyChanging();
					this._GoodPayables = value;
					this.SendPropertyChanged("GoodPayables");
					this.OnGoodPayablesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LatePaymentFine", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> LatePaymentFine
		{
			get
			{
				return this._LatePaymentFine;
			}
			set
			{
				if ((this._LatePaymentFine != value))
				{
					this.OnLatePaymentFineChanging(value);
					this.SendPropertyChanging();
					this._LatePaymentFine = value;
					this.SendPropertyChanged("LatePaymentFine");
					this.OnLatePaymentFineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelinquentCharge", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> DelinquentCharge
		{
			get
			{
				return this._DelinquentCharge;
			}
			set
			{
				if ((this._DelinquentCharge != value))
				{
					this.OnDelinquentChargeChanging(value);
					this.SendPropertyChanging();
					this._DelinquentCharge = value;
					this.SendPropertyChanged("DelinquentCharge");
					this.OnDelinquentChargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LoanDate
		{
			get
			{
				return this._LoanDate;
			}
			set
			{
				if ((this._LoanDate != value))
				{
					this.OnLoanDateChanging(value);
					this.SendPropertyChanging();
					this._LoanDate = value;
					this.SendPropertyChanged("LoanDate");
					this.OnLoanDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPaymentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastPaymentDate
		{
			get
			{
				return this._LastPaymentDate;
			}
			set
			{
				if ((this._LastPaymentDate != value))
				{
					this.OnLastPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._LastPaymentDate = value;
					this.SendPropertyChanged("LastPaymentDate");
					this.OnLastPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AgingLoan_AgingLoanItem", Storage="_AgingLoan", ThisKey="AgingLoanID", OtherKey="AgingLoanID", IsForeignKey=true)]
		public AgingLoan AgingLoan
		{
			get
			{
				return this._AgingLoan.Entity;
			}
			set
			{
				AgingLoan previousValue = this._AgingLoan.Entity;
				if (((previousValue != value) 
							|| (this._AgingLoan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AgingLoan.Entity = null;
						previousValue.AgingLoanItems.Remove(this);
					}
					this._AgingLoan.Entity = value;
					if ((value != null))
					{
						value.AgingLoanItems.Add(this);
						this._AgingLoanID = value.AgingLoanID;
					}
					else
					{
						this._AgingLoanID = default(Nullable<long>);
					}
					this.SendPropertyChanged("AgingLoan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.AgingLoans")]
	public partial class AgingLoan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AgingLoanID;
		
		private System.Nullable<System.DateTime> _Period;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private EntitySet<AgingLoanItem> _AgingLoanItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgingLoanIDChanging(long value);
    partial void OnAgingLoanIDChanged();
    partial void OnPeriodChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    #endregion
		
		public AgingLoan()
		{
			this._AgingLoanItems = new EntitySet<AgingLoanItem>(new Action<AgingLoanItem>(this.attach_AgingLoanItems), new Action<AgingLoanItem>(this.detach_AgingLoanItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgingLoanID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AgingLoanID
		{
			get
			{
				return this._AgingLoanID;
			}
			set
			{
				if ((this._AgingLoanID != value))
				{
					this.OnAgingLoanIDChanging(value);
					this.SendPropertyChanging();
					this._AgingLoanID = value;
					this.SendPropertyChanged("AgingLoanID");
					this.OnAgingLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period", DbType="DateTime")]
		public System.Nullable<System.DateTime> Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AgingLoan_AgingLoanItem", Storage="_AgingLoanItems", ThisKey="AgingLoanID", OtherKey="AgingLoanID")]
		public EntitySet<AgingLoanItem> AgingLoanItems
		{
			get
			{
				return this._AgingLoanItems;
			}
			set
			{
				this._AgingLoanItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AgingLoanItems(AgingLoanItem entity)
		{
			this.SendPropertyChanging();
			entity.AgingLoan = this;
		}
		
		private void detach_AgingLoanItems(AgingLoanItem entity)
		{
			this.SendPropertyChanging();
			entity.AgingLoan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.DelinquentLoanItems")]
	public partial class DelinquentLoanItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _DelinquentLoanItemID;
		
		private System.Nullable<long> _DelinquentLoanID;
		
		private string _Name;
		
		private string _LoanType;
		
		private System.Nullable<decimal> _OutstandingBalance;
		
		private System.Nullable<decimal> _DelinquentCharge;
		
		private System.Nullable<decimal> _LatePaymentFine;
		
		private System.Nullable<decimal> _CapitalShare;
		
		private System.Nullable<decimal> _SavingsDeposit;
		
		private System.Nullable<decimal> _TimeDeposit;
		
		private System.Nullable<decimal> _NetExposure;
		
		private System.Nullable<System.DateTime> _LoanDate;
		
		private System.Nullable<System.DateTime> _LastPayment;
		
		private System.Nullable<System.DateTime> _DueDate;
		
		private EntityRef<DelinquentLoan> _DelinquentLoan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDelinquentLoanItemIDChanging(long value);
    partial void OnDelinquentLoanItemIDChanged();
    partial void OnDelinquentLoanIDChanging(System.Nullable<long> value);
    partial void OnDelinquentLoanIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLoanTypeChanging(string value);
    partial void OnLoanTypeChanged();
    partial void OnOutstandingBalanceChanging(System.Nullable<decimal> value);
    partial void OnOutstandingBalanceChanged();
    partial void OnDelinquentChargeChanging(System.Nullable<decimal> value);
    partial void OnDelinquentChargeChanged();
    partial void OnLatePaymentFineChanging(System.Nullable<decimal> value);
    partial void OnLatePaymentFineChanged();
    partial void OnCapitalShareChanging(System.Nullable<decimal> value);
    partial void OnCapitalShareChanged();
    partial void OnSavingsDepositChanging(System.Nullable<decimal> value);
    partial void OnSavingsDepositChanged();
    partial void OnTimeDepositChanging(System.Nullable<decimal> value);
    partial void OnTimeDepositChanged();
    partial void OnNetExposureChanging(System.Nullable<decimal> value);
    partial void OnNetExposureChanged();
    partial void OnLoanDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLoanDateChanged();
    partial void OnLastPaymentChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPaymentChanged();
    partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDueDateChanged();
    #endregion
		
		public DelinquentLoanItem()
		{
			this._DelinquentLoan = default(EntityRef<DelinquentLoan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelinquentLoanItemID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long DelinquentLoanItemID
		{
			get
			{
				return this._DelinquentLoanItemID;
			}
			set
			{
				if ((this._DelinquentLoanItemID != value))
				{
					this.OnDelinquentLoanItemIDChanging(value);
					this.SendPropertyChanging();
					this._DelinquentLoanItemID = value;
					this.SendPropertyChanged("DelinquentLoanItemID");
					this.OnDelinquentLoanItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelinquentLoanID", DbType="BigInt")]
		public System.Nullable<long> DelinquentLoanID
		{
			get
			{
				return this._DelinquentLoanID;
			}
			set
			{
				if ((this._DelinquentLoanID != value))
				{
					if (this._DelinquentLoan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDelinquentLoanIDChanging(value);
					this.SendPropertyChanging();
					this._DelinquentLoanID = value;
					this.SendPropertyChanged("DelinquentLoanID");
					this.OnDelinquentLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanType", DbType="NVarChar(50)")]
		public string LoanType
		{
			get
			{
				return this._LoanType;
			}
			set
			{
				if ((this._LoanType != value))
				{
					this.OnLoanTypeChanging(value);
					this.SendPropertyChanging();
					this._LoanType = value;
					this.SendPropertyChanged("LoanType");
					this.OnLoanTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutstandingBalance", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> OutstandingBalance
		{
			get
			{
				return this._OutstandingBalance;
			}
			set
			{
				if ((this._OutstandingBalance != value))
				{
					this.OnOutstandingBalanceChanging(value);
					this.SendPropertyChanging();
					this._OutstandingBalance = value;
					this.SendPropertyChanged("OutstandingBalance");
					this.OnOutstandingBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelinquentCharge", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> DelinquentCharge
		{
			get
			{
				return this._DelinquentCharge;
			}
			set
			{
				if ((this._DelinquentCharge != value))
				{
					this.OnDelinquentChargeChanging(value);
					this.SendPropertyChanging();
					this._DelinquentCharge = value;
					this.SendPropertyChanged("DelinquentCharge");
					this.OnDelinquentChargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LatePaymentFine", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> LatePaymentFine
		{
			get
			{
				return this._LatePaymentFine;
			}
			set
			{
				if ((this._LatePaymentFine != value))
				{
					this.OnLatePaymentFineChanging(value);
					this.SendPropertyChanging();
					this._LatePaymentFine = value;
					this.SendPropertyChanged("LatePaymentFine");
					this.OnLatePaymentFineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapitalShare", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> CapitalShare
		{
			get
			{
				return this._CapitalShare;
			}
			set
			{
				if ((this._CapitalShare != value))
				{
					this.OnCapitalShareChanging(value);
					this.SendPropertyChanging();
					this._CapitalShare = value;
					this.SendPropertyChanged("CapitalShare");
					this.OnCapitalShareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SavingsDeposit", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> SavingsDeposit
		{
			get
			{
				return this._SavingsDeposit;
			}
			set
			{
				if ((this._SavingsDeposit != value))
				{
					this.OnSavingsDepositChanging(value);
					this.SendPropertyChanging();
					this._SavingsDeposit = value;
					this.SendPropertyChanged("SavingsDeposit");
					this.OnSavingsDepositChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeDeposit", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> TimeDeposit
		{
			get
			{
				return this._TimeDeposit;
			}
			set
			{
				if ((this._TimeDeposit != value))
				{
					this.OnTimeDepositChanging(value);
					this.SendPropertyChanging();
					this._TimeDeposit = value;
					this.SendPropertyChanged("TimeDeposit");
					this.OnTimeDepositChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetExposure", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> NetExposure
		{
			get
			{
				return this._NetExposure;
			}
			set
			{
				if ((this._NetExposure != value))
				{
					this.OnNetExposureChanging(value);
					this.SendPropertyChanging();
					this._NetExposure = value;
					this.SendPropertyChanged("NetExposure");
					this.OnNetExposureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LoanDate
		{
			get
			{
				return this._LoanDate;
			}
			set
			{
				if ((this._LoanDate != value))
				{
					this.OnLoanDateChanging(value);
					this.SendPropertyChanging();
					this._LoanDate = value;
					this.SendPropertyChanged("LoanDate");
					this.OnLoanDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPayment", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastPayment
		{
			get
			{
				return this._LastPayment;
			}
			set
			{
				if ((this._LastPayment != value))
				{
					this.OnLastPaymentChanging(value);
					this.SendPropertyChanging();
					this._LastPayment = value;
					this.SendPropertyChanged("LastPayment");
					this.OnLastPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DelinquentLoan_DelinquentLoanItem", Storage="_DelinquentLoan", ThisKey="DelinquentLoanID", OtherKey="DelinquentLoanID", IsForeignKey=true)]
		public DelinquentLoan DelinquentLoan
		{
			get
			{
				return this._DelinquentLoan.Entity;
			}
			set
			{
				DelinquentLoan previousValue = this._DelinquentLoan.Entity;
				if (((previousValue != value) 
							|| (this._DelinquentLoan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DelinquentLoan.Entity = null;
						previousValue.DelinquentLoanItems.Remove(this);
					}
					this._DelinquentLoan.Entity = value;
					if ((value != null))
					{
						value.DelinquentLoanItems.Add(this);
						this._DelinquentLoanID = value.DelinquentLoanID;
					}
					else
					{
						this._DelinquentLoanID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DelinquentLoan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.DelinquentLoans")]
	public partial class DelinquentLoan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _DelinquentLoanID;
		
		private System.Nullable<System.DateTime> _Period;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private EntitySet<DelinquentLoanItem> _DelinquentLoanItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDelinquentLoanIDChanging(long value);
    partial void OnDelinquentLoanIDChanged();
    partial void OnPeriodChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    #endregion
		
		public DelinquentLoan()
		{
			this._DelinquentLoanItems = new EntitySet<DelinquentLoanItem>(new Action<DelinquentLoanItem>(this.attach_DelinquentLoanItems), new Action<DelinquentLoanItem>(this.detach_DelinquentLoanItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelinquentLoanID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long DelinquentLoanID
		{
			get
			{
				return this._DelinquentLoanID;
			}
			set
			{
				if ((this._DelinquentLoanID != value))
				{
					this.OnDelinquentLoanIDChanging(value);
					this.SendPropertyChanging();
					this._DelinquentLoanID = value;
					this.SendPropertyChanged("DelinquentLoanID");
					this.OnDelinquentLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period", DbType="DateTime")]
		public System.Nullable<System.DateTime> Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DelinquentLoan_DelinquentLoanItem", Storage="_DelinquentLoanItems", ThisKey="DelinquentLoanID", OtherKey="DelinquentLoanID")]
		public EntitySet<DelinquentLoanItem> DelinquentLoanItems
		{
			get
			{
				return this._DelinquentLoanItems;
			}
			set
			{
				this._DelinquentLoanItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DelinquentLoanItems(DelinquentLoanItem entity)
		{
			this.SendPropertyChanging();
			entity.DelinquentLoan = this;
		}
		
		private void detach_DelinquentLoanItems(DelinquentLoanItem entity)
		{
			this.SendPropertyChanging();
			entity.DelinquentLoan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.Loans")]
	public partial class Loan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _LoanID;
		
		private string _LoanServiceID;
		
		private long _MemberID;
		
		private System.DateTime _LoanDate;
		
		private string _PaymentModeID;
		
		private string _LoanDeductionTypeID;
		
		private int _Terms;
		
		private System.DateTime _DueDate;
		
		private System.Nullable<System.DateTime> _LastPaymentDate;
		
		private System.Nullable<System.DateTime> _NextPaymentDate;
		
		private System.Nullable<System.DateTime> _SettlementDate;
		
		private decimal _Amortization;
		
		private System.Nullable<decimal> _PreviousOutstandingBalance;
		
		private decimal _LoanAmount;
		
		private decimal _ServiceFee;
		
		private decimal _CollectionFee;
		
		private decimal _CapitalBuildup;
		
		private decimal _LoanGuaranteeFund;
		
		private decimal _InterestRate;
		
		private decimal _Interest;
		
		private decimal _CurrentBalance;
		
		private bool _Settled;
		
		private System.Nullable<decimal> _UnpaidLatePaymentCharge;
		
		private System.Nullable<decimal> _UnpaidDelinquentCharge;
		
		private System.Nullable<decimal> _UnpaidPayables;
		
		private System.Nullable<bool> _IsLatePaymentChargeCalculationCompleted;
		
		private EntitySet<LoanReceipt> _LoanReceipts;
		
		private EntitySet<LoanDisbursement> _LoanDisbursements;
		
		private EntitySet<LoanDividendAdjustment> _LoanDividendAdjustments;
		
		private EntitySet<LoanAdjustment> _LoanAdjustments;
		
		private EntitySet<DelinquentFineReceipt> _DelinquentFineReceipts;
		
		private EntitySet<LatePaymentFineReceipt> _LatePaymentFineReceipts;
		
		private EntitySet<LoanNotice> _LoanNotices;
		
		private EntityRef<LoanDeductionType> _LoanDeductionType;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<PaymentMode> _PaymentMode;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanIDChanging(long value);
    partial void OnLoanIDChanged();
    partial void OnLoanServiceIDChanging(string value);
    partial void OnLoanServiceIDChanged();
    partial void OnMemberIDChanging(long value);
    partial void OnMemberIDChanged();
    partial void OnLoanDateChanging(System.DateTime value);
    partial void OnLoanDateChanged();
    partial void OnPaymentModeIDChanging(string value);
    partial void OnPaymentModeIDChanged();
    partial void OnLoanDeductionTypeIDChanging(string value);
    partial void OnLoanDeductionTypeIDChanged();
    partial void OnTermsChanging(int value);
    partial void OnTermsChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnLastPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPaymentDateChanged();
    partial void OnNextPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNextPaymentDateChanged();
    partial void OnSettlementDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSettlementDateChanged();
    partial void OnAmortizationChanging(decimal value);
    partial void OnAmortizationChanged();
    partial void OnPreviousOutstandingBalanceChanging(System.Nullable<decimal> value);
    partial void OnPreviousOutstandingBalanceChanged();
    partial void OnLoanAmountChanging(decimal value);
    partial void OnLoanAmountChanged();
    partial void OnServiceFeeChanging(decimal value);
    partial void OnServiceFeeChanged();
    partial void OnCollectionFeeChanging(decimal value);
    partial void OnCollectionFeeChanged();
    partial void OnCapitalBuildupChanging(decimal value);
    partial void OnCapitalBuildupChanged();
    partial void OnLoanGuaranteeFundChanging(decimal value);
    partial void OnLoanGuaranteeFundChanged();
    partial void OnInterestRateChanging(decimal value);
    partial void OnInterestRateChanged();
    partial void OnInterestChanging(decimal value);
    partial void OnInterestChanged();
    partial void OnCurrentBalanceChanging(decimal value);
    partial void OnCurrentBalanceChanged();
    partial void OnSettledChanging(bool value);
    partial void OnSettledChanged();
    partial void OnUnpaidLatePaymentChargeChanging(System.Nullable<decimal> value);
    partial void OnUnpaidLatePaymentChargeChanged();
    partial void OnUnpaidDelinquentChargeChanging(System.Nullable<decimal> value);
    partial void OnUnpaidDelinquentChargeChanged();
    partial void OnUnpaidPayablesChanging(System.Nullable<decimal> value);
    partial void OnUnpaidPayablesChanged();
    partial void OnIsLatePaymentChargeCalculationCompletedChanging(System.Nullable<bool> value);
    partial void OnIsLatePaymentChargeCalculationCompletedChanged();
    #endregion
		
		public Loan()
		{
			this._LoanReceipts = new EntitySet<LoanReceipt>(new Action<LoanReceipt>(this.attach_LoanReceipts), new Action<LoanReceipt>(this.detach_LoanReceipts));
			this._LoanDisbursements = new EntitySet<LoanDisbursement>(new Action<LoanDisbursement>(this.attach_LoanDisbursements), new Action<LoanDisbursement>(this.detach_LoanDisbursements));
			this._LoanDividendAdjustments = new EntitySet<LoanDividendAdjustment>(new Action<LoanDividendAdjustment>(this.attach_LoanDividendAdjustments), new Action<LoanDividendAdjustment>(this.detach_LoanDividendAdjustments));
			this._LoanAdjustments = new EntitySet<LoanAdjustment>(new Action<LoanAdjustment>(this.attach_LoanAdjustments), new Action<LoanAdjustment>(this.detach_LoanAdjustments));
			this._DelinquentFineReceipts = new EntitySet<DelinquentFineReceipt>(new Action<DelinquentFineReceipt>(this.attach_DelinquentFineReceipts), new Action<DelinquentFineReceipt>(this.detach_DelinquentFineReceipts));
			this._LatePaymentFineReceipts = new EntitySet<LatePaymentFineReceipt>(new Action<LatePaymentFineReceipt>(this.attach_LatePaymentFineReceipts), new Action<LatePaymentFineReceipt>(this.detach_LatePaymentFineReceipts));
			this._LoanNotices = new EntitySet<LoanNotice>(new Action<LoanNotice>(this.attach_LoanNotices), new Action<LoanNotice>(this.detach_LoanNotices));
			this._LoanDeductionType = default(EntityRef<LoanDeductionType>);
			this._Member = default(EntityRef<Member>);
			this._PaymentMode = default(EntityRef<PaymentMode>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long LoanID
		{
			get
			{
				return this._LoanID;
			}
			set
			{
				if ((this._LoanID != value))
				{
					this.OnLoanIDChanging(value);
					this.SendPropertyChanging();
					this._LoanID = value;
					this.SendPropertyChanged("LoanID");
					this.OnLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanServiceID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string LoanServiceID
		{
			get
			{
				return this._LoanServiceID;
			}
			set
			{
				if ((this._LoanServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanServiceIDChanging(value);
					this.SendPropertyChanging();
					this._LoanServiceID = value;
					this.SendPropertyChanged("LoanServiceID");
					this.OnLoanServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime LoanDate
		{
			get
			{
				return this._LoanDate;
			}
			set
			{
				if ((this._LoanDate != value))
				{
					this.OnLoanDateChanging(value);
					this.SendPropertyChanging();
					this._LoanDate = value;
					this.SendPropertyChanged("LoanDate");
					this.OnLoanDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentModeID", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string PaymentModeID
		{
			get
			{
				return this._PaymentModeID;
			}
			set
			{
				if ((this._PaymentModeID != value))
				{
					if (this._PaymentMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentModeIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentModeID = value;
					this.SendPropertyChanged("PaymentModeID");
					this.OnPaymentModeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDeductionTypeID", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string LoanDeductionTypeID
		{
			get
			{
				return this._LoanDeductionTypeID;
			}
			set
			{
				if ((this._LoanDeductionTypeID != value))
				{
					if (this._LoanDeductionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanDeductionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LoanDeductionTypeID = value;
					this.SendPropertyChanged("LoanDeductionTypeID");
					this.OnLoanDeductionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Terms", DbType="Int NOT NULL")]
		public int Terms
		{
			get
			{
				return this._Terms;
			}
			set
			{
				if ((this._Terms != value))
				{
					this.OnTermsChanging(value);
					this.SendPropertyChanging();
					this._Terms = value;
					this.SendPropertyChanged("Terms");
					this.OnTermsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPaymentDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> LastPaymentDate
		{
			get
			{
				return this._LastPaymentDate;
			}
			set
			{
				if ((this._LastPaymentDate != value))
				{
					this.OnLastPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._LastPaymentDate = value;
					this.SendPropertyChanged("LastPaymentDate");
					this.OnLastPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextPaymentDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> NextPaymentDate
		{
			get
			{
				return this._NextPaymentDate;
			}
			set
			{
				if ((this._NextPaymentDate != value))
				{
					this.OnNextPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._NextPaymentDate = value;
					this.SendPropertyChanged("NextPaymentDate");
					this.OnNextPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettlementDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> SettlementDate
		{
			get
			{
				return this._SettlementDate;
			}
			set
			{
				if ((this._SettlementDate != value))
				{
					this.OnSettlementDateChanging(value);
					this.SendPropertyChanging();
					this._SettlementDate = value;
					this.SendPropertyChanged("SettlementDate");
					this.OnSettlementDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amortization", DbType="Money NOT NULL")]
		public decimal Amortization
		{
			get
			{
				return this._Amortization;
			}
			set
			{
				if ((this._Amortization != value))
				{
					this.OnAmortizationChanging(value);
					this.SendPropertyChanging();
					this._Amortization = value;
					this.SendPropertyChanged("Amortization");
					this.OnAmortizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousOutstandingBalance", DbType="Money")]
		public System.Nullable<decimal> PreviousOutstandingBalance
		{
			get
			{
				return this._PreviousOutstandingBalance;
			}
			set
			{
				if ((this._PreviousOutstandingBalance != value))
				{
					this.OnPreviousOutstandingBalanceChanging(value);
					this.SendPropertyChanging();
					this._PreviousOutstandingBalance = value;
					this.SendPropertyChanged("PreviousOutstandingBalance");
					this.OnPreviousOutstandingBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanAmount", DbType="Money NOT NULL")]
		public decimal LoanAmount
		{
			get
			{
				return this._LoanAmount;
			}
			set
			{
				if ((this._LoanAmount != value))
				{
					this.OnLoanAmountChanging(value);
					this.SendPropertyChanging();
					this._LoanAmount = value;
					this.SendPropertyChanged("LoanAmount");
					this.OnLoanAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceFee", DbType="Money NOT NULL")]
		public decimal ServiceFee
		{
			get
			{
				return this._ServiceFee;
			}
			set
			{
				if ((this._ServiceFee != value))
				{
					this.OnServiceFeeChanging(value);
					this.SendPropertyChanging();
					this._ServiceFee = value;
					this.SendPropertyChanged("ServiceFee");
					this.OnServiceFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionFee", DbType="Money NOT NULL")]
		public decimal CollectionFee
		{
			get
			{
				return this._CollectionFee;
			}
			set
			{
				if ((this._CollectionFee != value))
				{
					this.OnCollectionFeeChanging(value);
					this.SendPropertyChanging();
					this._CollectionFee = value;
					this.SendPropertyChanged("CollectionFee");
					this.OnCollectionFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapitalBuildup", DbType="Money NOT NULL")]
		public decimal CapitalBuildup
		{
			get
			{
				return this._CapitalBuildup;
			}
			set
			{
				if ((this._CapitalBuildup != value))
				{
					this.OnCapitalBuildupChanging(value);
					this.SendPropertyChanging();
					this._CapitalBuildup = value;
					this.SendPropertyChanged("CapitalBuildup");
					this.OnCapitalBuildupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanGuaranteeFund", DbType="Money NOT NULL")]
		public decimal LoanGuaranteeFund
		{
			get
			{
				return this._LoanGuaranteeFund;
			}
			set
			{
				if ((this._LoanGuaranteeFund != value))
				{
					this.OnLoanGuaranteeFundChanging(value);
					this.SendPropertyChanging();
					this._LoanGuaranteeFund = value;
					this.SendPropertyChanged("LoanGuaranteeFund");
					this.OnLoanGuaranteeFundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestRate", DbType="Decimal(4,2) NOT NULL")]
		public decimal InterestRate
		{
			get
			{
				return this._InterestRate;
			}
			set
			{
				if ((this._InterestRate != value))
				{
					this.OnInterestRateChanging(value);
					this.SendPropertyChanging();
					this._InterestRate = value;
					this.SendPropertyChanged("InterestRate");
					this.OnInterestRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interest", DbType="Money NOT NULL")]
		public decimal Interest
		{
			get
			{
				return this._Interest;
			}
			set
			{
				if ((this._Interest != value))
				{
					this.OnInterestChanging(value);
					this.SendPropertyChanging();
					this._Interest = value;
					this.SendPropertyChanged("Interest");
					this.OnInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentBalance", DbType="Money NOT NULL")]
		public decimal CurrentBalance
		{
			get
			{
				return this._CurrentBalance;
			}
			set
			{
				if ((this._CurrentBalance != value))
				{
					this.OnCurrentBalanceChanging(value);
					this.SendPropertyChanging();
					this._CurrentBalance = value;
					this.SendPropertyChanged("CurrentBalance");
					this.OnCurrentBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Settled", DbType="Bit NOT NULL")]
		public bool Settled
		{
			get
			{
				return this._Settled;
			}
			set
			{
				if ((this._Settled != value))
				{
					this.OnSettledChanging(value);
					this.SendPropertyChanging();
					this._Settled = value;
					this.SendPropertyChanged("Settled");
					this.OnSettledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnpaidLatePaymentCharge", DbType="Money")]
		public System.Nullable<decimal> UnpaidLatePaymentCharge
		{
			get
			{
				return this._UnpaidLatePaymentCharge;
			}
			set
			{
				if ((this._UnpaidLatePaymentCharge != value))
				{
					this.OnUnpaidLatePaymentChargeChanging(value);
					this.SendPropertyChanging();
					this._UnpaidLatePaymentCharge = value;
					this.SendPropertyChanged("UnpaidLatePaymentCharge");
					this.OnUnpaidLatePaymentChargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnpaidDelinquentCharge", DbType="Money")]
		public System.Nullable<decimal> UnpaidDelinquentCharge
		{
			get
			{
				return this._UnpaidDelinquentCharge;
			}
			set
			{
				if ((this._UnpaidDelinquentCharge != value))
				{
					this.OnUnpaidDelinquentChargeChanging(value);
					this.SendPropertyChanging();
					this._UnpaidDelinquentCharge = value;
					this.SendPropertyChanged("UnpaidDelinquentCharge");
					this.OnUnpaidDelinquentChargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnpaidPayables", DbType="Money")]
		public System.Nullable<decimal> UnpaidPayables
		{
			get
			{
				return this._UnpaidPayables;
			}
			set
			{
				if ((this._UnpaidPayables != value))
				{
					this.OnUnpaidPayablesChanging(value);
					this.SendPropertyChanging();
					this._UnpaidPayables = value;
					this.SendPropertyChanged("UnpaidPayables");
					this.OnUnpaidPayablesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLatePaymentChargeCalculationCompleted", DbType="Bit")]
		public System.Nullable<bool> IsLatePaymentChargeCalculationCompleted
		{
			get
			{
				return this._IsLatePaymentChargeCalculationCompleted;
			}
			set
			{
				if ((this._IsLatePaymentChargeCalculationCompleted != value))
				{
					this.OnIsLatePaymentChargeCalculationCompletedChanging(value);
					this.SendPropertyChanging();
					this._IsLatePaymentChargeCalculationCompleted = value;
					this.SendPropertyChanged("IsLatePaymentChargeCalculationCompleted");
					this.OnIsLatePaymentChargeCalculationCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_LoanReceipt", Storage="_LoanReceipts", ThisKey="LoanID", OtherKey="LoanID")]
		public EntitySet<LoanReceipt> LoanReceipts
		{
			get
			{
				return this._LoanReceipts;
			}
			set
			{
				this._LoanReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_LoanDisbursement", Storage="_LoanDisbursements", ThisKey="LoanID", OtherKey="LoanID")]
		public EntitySet<LoanDisbursement> LoanDisbursements
		{
			get
			{
				return this._LoanDisbursements;
			}
			set
			{
				this._LoanDisbursements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_LoanDividendAdjustment", Storage="_LoanDividendAdjustments", ThisKey="LoanID", OtherKey="LoanID")]
		public EntitySet<LoanDividendAdjustment> LoanDividendAdjustments
		{
			get
			{
				return this._LoanDividendAdjustments;
			}
			set
			{
				this._LoanDividendAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_LoanAdjustment", Storage="_LoanAdjustments", ThisKey="LoanID", OtherKey="LoanID")]
		public EntitySet<LoanAdjustment> LoanAdjustments
		{
			get
			{
				return this._LoanAdjustments;
			}
			set
			{
				this._LoanAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_DelinquentFineReceipt", Storage="_DelinquentFineReceipts", ThisKey="LoanID", OtherKey="LoanID")]
		public EntitySet<DelinquentFineReceipt> DelinquentFineReceipts
		{
			get
			{
				return this._DelinquentFineReceipts;
			}
			set
			{
				this._DelinquentFineReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_LatePaymentFineReceipt", Storage="_LatePaymentFineReceipts", ThisKey="LoanID", OtherKey="LoanID")]
		public EntitySet<LatePaymentFineReceipt> LatePaymentFineReceipts
		{
			get
			{
				return this._LatePaymentFineReceipts;
			}
			set
			{
				this._LatePaymentFineReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_LoanNotice", Storage="_LoanNotices", ThisKey="LoanID", OtherKey="LoanID")]
		public EntitySet<LoanNotice> LoanNotices
		{
			get
			{
				return this._LoanNotices;
			}
			set
			{
				this._LoanNotices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanDeductionType_Loan", Storage="_LoanDeductionType", ThisKey="LoanDeductionTypeID", OtherKey="LoanDeductionTypeID", IsForeignKey=true)]
		public LoanDeductionType LoanDeductionType
		{
			get
			{
				return this._LoanDeductionType.Entity;
			}
			set
			{
				LoanDeductionType previousValue = this._LoanDeductionType.Entity;
				if (((previousValue != value) 
							|| (this._LoanDeductionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanDeductionType.Entity = null;
						previousValue.Loans.Remove(this);
					}
					this._LoanDeductionType.Entity = value;
					if ((value != null))
					{
						value.Loans.Add(this);
						this._LoanDeductionTypeID = value.LoanDeductionTypeID;
					}
					else
					{
						this._LoanDeductionTypeID = default(string);
					}
					this.SendPropertyChanged("LoanDeductionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Loan", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Loans.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Loans.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(long);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMode_Loan", Storage="_PaymentMode", ThisKey="PaymentModeID", OtherKey="PaymentModeID", IsForeignKey=true)]
		public PaymentMode PaymentMode
		{
			get
			{
				return this._PaymentMode.Entity;
			}
			set
			{
				PaymentMode previousValue = this._PaymentMode.Entity;
				if (((previousValue != value) 
							|| (this._PaymentMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentMode.Entity = null;
						previousValue.Loans.Remove(this);
					}
					this._PaymentMode.Entity = value;
					if ((value != null))
					{
						value.Loans.Add(this);
						this._PaymentModeID = value.PaymentModeID;
					}
					else
					{
						this._PaymentModeID = default(string);
					}
					this.SendPropertyChanged("PaymentMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Loan", Storage="_Service", ThisKey="LoanServiceID", OtherKey="ServiceID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Loans.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Loans.Add(this);
						this._LoanServiceID = value.ServiceID;
					}
					else
					{
						this._LoanServiceID = default(string);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LoanReceipts(LoanReceipt entity)
		{
			this.SendPropertyChanging();
			entity.Loan = this;
		}
		
		private void detach_LoanReceipts(LoanReceipt entity)
		{
			this.SendPropertyChanging();
			entity.Loan = null;
		}
		
		private void attach_LoanDisbursements(LoanDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.Loan = this;
		}
		
		private void detach_LoanDisbursements(LoanDisbursement entity)
		{
			this.SendPropertyChanging();
			entity.Loan = null;
		}
		
		private void attach_LoanDividendAdjustments(LoanDividendAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Loan = this;
		}
		
		private void detach_LoanDividendAdjustments(LoanDividendAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Loan = null;
		}
		
		private void attach_LoanAdjustments(LoanAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Loan = this;
		}
		
		private void detach_LoanAdjustments(LoanAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Loan = null;
		}
		
		private void attach_DelinquentFineReceipts(DelinquentFineReceipt entity)
		{
			this.SendPropertyChanging();
			entity.Loan = this;
		}
		
		private void detach_DelinquentFineReceipts(DelinquentFineReceipt entity)
		{
			this.SendPropertyChanging();
			entity.Loan = null;
		}
		
		private void attach_LatePaymentFineReceipts(LatePaymentFineReceipt entity)
		{
			this.SendPropertyChanging();
			entity.Loan = this;
		}
		
		private void detach_LatePaymentFineReceipts(LatePaymentFineReceipt entity)
		{
			this.SendPropertyChanging();
			entity.Loan = null;
		}
		
		private void attach_LoanNotices(LoanNotice entity)
		{
			this.SendPropertyChanging();
			entity.Loan = this;
		}
		
		private void detach_LoanNotices(LoanNotice entity)
		{
			this.SendPropertyChanging();
			entity.Loan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Loans.LoanNotices")]
	public partial class LoanNotice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _LoanNoticeID;
		
		private long _LoanID;
		
		private System.Nullable<System.DateTime> _PreviousIssueDate;
		
		private System.Nullable<System.DateTime> _IssueDate;
		
		private string _IssueAddress;
		
		private string _IssueTo;
		
		private System.Nullable<System.DateTime> _LoanDate;
		
		private System.Nullable<System.DateTime> _DueDate;
		
		private System.Nullable<decimal> _AmountDue;
		
		private System.Nullable<decimal> _Fine;
		
		private System.Nullable<decimal> _Charge;
		
		private string _Manager;
		
		private EntityRef<Loan> _Loan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanNoticeIDChanging(long value);
    partial void OnLoanNoticeIDChanged();
    partial void OnLoanIDChanging(long value);
    partial void OnLoanIDChanged();
    partial void OnPreviousIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPreviousIssueDateChanged();
    partial void OnIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIssueDateChanged();
    partial void OnIssueAddressChanging(string value);
    partial void OnIssueAddressChanged();
    partial void OnIssueToChanging(string value);
    partial void OnIssueToChanged();
    partial void OnLoanDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLoanDateChanged();
    partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDueDateChanged();
    partial void OnAmountDueChanging(System.Nullable<decimal> value);
    partial void OnAmountDueChanged();
    partial void OnFineChanging(System.Nullable<decimal> value);
    partial void OnFineChanged();
    partial void OnChargeChanging(System.Nullable<decimal> value);
    partial void OnChargeChanged();
    partial void OnManagerChanging(string value);
    partial void OnManagerChanged();
    #endregion
		
		public LoanNotice()
		{
			this._Loan = default(EntityRef<Loan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanNoticeID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long LoanNoticeID
		{
			get
			{
				return this._LoanNoticeID;
			}
			set
			{
				if ((this._LoanNoticeID != value))
				{
					this.OnLoanNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._LoanNoticeID = value;
					this.SendPropertyChanged("LoanNoticeID");
					this.OnLoanNoticeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanID", DbType="BigInt NOT NULL")]
		public long LoanID
		{
			get
			{
				return this._LoanID;
			}
			set
			{
				if ((this._LoanID != value))
				{
					if (this._Loan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanIDChanging(value);
					this.SendPropertyChanging();
					this._LoanID = value;
					this.SendPropertyChanged("LoanID");
					this.OnLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousIssueDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> PreviousIssueDate
		{
			get
			{
				return this._PreviousIssueDate;
			}
			set
			{
				if ((this._PreviousIssueDate != value))
				{
					this.OnPreviousIssueDateChanging(value);
					this.SendPropertyChanging();
					this._PreviousIssueDate = value;
					this.SendPropertyChanged("PreviousIssueDate");
					this.OnPreviousIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueAddress", DbType="NVarChar(350)")]
		public string IssueAddress
		{
			get
			{
				return this._IssueAddress;
			}
			set
			{
				if ((this._IssueAddress != value))
				{
					this.OnIssueAddressChanging(value);
					this.SendPropertyChanging();
					this._IssueAddress = value;
					this.SendPropertyChanged("IssueAddress");
					this.OnIssueAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueTo", DbType="NVarChar(150)")]
		public string IssueTo
		{
			get
			{
				return this._IssueTo;
			}
			set
			{
				if ((this._IssueTo != value))
				{
					this.OnIssueToChanging(value);
					this.SendPropertyChanging();
					this._IssueTo = value;
					this.SendPropertyChanged("IssueTo");
					this.OnIssueToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> LoanDate
		{
			get
			{
				return this._LoanDate;
			}
			set
			{
				if ((this._LoanDate != value))
				{
					this.OnLoanDateChanging(value);
					this.SendPropertyChanging();
					this._LoanDate = value;
					this.SendPropertyChanged("LoanDate");
					this.OnLoanDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountDue", DbType="Money")]
		public System.Nullable<decimal> AmountDue
		{
			get
			{
				return this._AmountDue;
			}
			set
			{
				if ((this._AmountDue != value))
				{
					this.OnAmountDueChanging(value);
					this.SendPropertyChanging();
					this._AmountDue = value;
					this.SendPropertyChanged("AmountDue");
					this.OnAmountDueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fine", DbType="Money")]
		public System.Nullable<decimal> Fine
		{
			get
			{
				return this._Fine;
			}
			set
			{
				if ((this._Fine != value))
				{
					this.OnFineChanging(value);
					this.SendPropertyChanging();
					this._Fine = value;
					this.SendPropertyChanged("Fine");
					this.OnFineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Charge", DbType="Money")]
		public System.Nullable<decimal> Charge
		{
			get
			{
				return this._Charge;
			}
			set
			{
				if ((this._Charge != value))
				{
					this.OnChargeChanging(value);
					this.SendPropertyChanging();
					this._Charge = value;
					this.SendPropertyChanged("Charge");
					this.OnChargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager", DbType="NVarChar(150)")]
		public string Manager
		{
			get
			{
				return this._Manager;
			}
			set
			{
				if ((this._Manager != value))
				{
					this.OnManagerChanging(value);
					this.SendPropertyChanging();
					this._Manager = value;
					this.SendPropertyChanged("Manager");
					this.OnManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_LoanNotice", Storage="_Loan", ThisKey="LoanID", OtherKey="LoanID", IsForeignKey=true)]
		public Loan Loan
		{
			get
			{
				return this._Loan.Entity;
			}
			set
			{
				Loan previousValue = this._Loan.Entity;
				if (((previousValue != value) 
							|| (this._Loan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Loan.Entity = null;
						previousValue.LoanNotices.Remove(this);
					}
					this._Loan.Entity = value;
					if ((value != null))
					{
						value.LoanNotices.Add(this);
						this._LoanID = value.LoanID;
					}
					else
					{
						this._LoanID = default(long);
					}
					this.SendPropertyChanged("Loan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class uspFindMembersResult
	{
		
		private long _MemberID;
		
		private string _AccountNumber;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _MembershipCategoryName;
		
		public uspFindMembersResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="BigInt NOT NULL")]
		public long MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this._MemberID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="Char(13) NOT NULL", CanBeNull=false)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this._AccountNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this._MiddleName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembershipCategoryName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string MembershipCategoryName
		{
			get
			{
				return this._MembershipCategoryName;
			}
			set
			{
				if ((this._MembershipCategoryName != value))
				{
					this._MembershipCategoryName = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
